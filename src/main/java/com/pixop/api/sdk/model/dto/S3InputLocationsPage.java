/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.S3InputLocation;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * S3InputLocationsPage
 */
@JsonPropertyOrder({
  S3InputLocationsPage.JSON_PROPERTY_PAGE_NUMBER,
  S3InputLocationsPage.JSON_PROPERTY_PAGE_SIZE,
  S3InputLocationsPage.JSON_PROPERTY_NUMBER_OF_ELEMENTS,
  S3InputLocationsPage.JSON_PROPERTY_TOTAL_PAGES,
  S3InputLocationsPage.JSON_PROPERTY_TOTAL_ELEMENTS,
  S3InputLocationsPage.JSON_PROPERTY_ITEMS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class S3InputLocationsPage {
  public static final String JSON_PROPERTY_PAGE_NUMBER = "pageNumber";
  @javax.annotation.Nonnull
  private Integer pageNumber = 0;

  public static final String JSON_PROPERTY_PAGE_SIZE = "pageSize";
  @javax.annotation.Nonnull
  private Integer pageSize = 10;

  public static final String JSON_PROPERTY_NUMBER_OF_ELEMENTS = "numberOfElements";
  @javax.annotation.Nonnull
  private Integer numberOfElements;

  public static final String JSON_PROPERTY_TOTAL_PAGES = "totalPages";
  @javax.annotation.Nonnull
  private Integer totalPages;

  public static final String JSON_PROPERTY_TOTAL_ELEMENTS = "totalElements";
  @javax.annotation.Nonnull
  private Long totalElements;

  public static final String JSON_PROPERTY_ITEMS = "items";
  @javax.annotation.Nonnull
  private List<S3InputLocation> items = new ArrayList<>();

  public S3InputLocationsPage() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public S3InputLocationsPage(
    @JsonProperty(JSON_PROPERTY_NUMBER_OF_ELEMENTS) Integer numberOfElements, 
    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES) Integer totalPages, 
    @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS) Long totalElements
  ) {
    this();
    this.numberOfElements = numberOfElements;
    this.totalPages = totalPages;
    this.totalElements = totalElements;
  }

  public S3InputLocationsPage pageNumber(@javax.annotation.Nonnull Integer pageNumber) {
    
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * The current page number in the paginated result set. Starts at 0.
   * minimum: 0
   * @return pageNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAGE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPageNumber() {
    return pageNumber;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPageNumber(@javax.annotation.Nonnull Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public S3InputLocationsPage pageSize(@javax.annotation.Nonnull Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The number of items per page in a paginated result set.
   * minimum: 1
   * maximum: 100
   * @return pageSize
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPageSize() {
    return pageSize;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPageSize(@javax.annotation.Nonnull Integer pageSize) {
    this.pageSize = pageSize;
  }

  /**
   * The number of items on the current page.
   * minimum: 0
   * @return numberOfElements
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNumberOfElements() {
    return numberOfElements;
  }



  /**
   * The total number of pages available for the resource.
   * minimum: 0
   * @return totalPages
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalPages() {
    return totalPages;
  }



  /**
   * The total number of items available for the resource.
   * minimum: 0
   * @return totalElements
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getTotalElements() {
    return totalElements;
  }



  public S3InputLocationsPage items(@javax.annotation.Nonnull List<S3InputLocation> items) {
    
    this.items = items;
    return this;
  }

  public S3InputLocationsPage addItemsItem(S3InputLocation itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The list of S3 input locations for the current page.
   * @return items
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<S3InputLocation> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItems(@javax.annotation.Nonnull List<S3InputLocation> items) {
    this.items = items;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3InputLocationsPage s3InputLocationsPage = (S3InputLocationsPage) o;
    return Objects.equals(this.pageNumber, s3InputLocationsPage.pageNumber) &&
        Objects.equals(this.pageSize, s3InputLocationsPage.pageSize) &&
        Objects.equals(this.numberOfElements, s3InputLocationsPage.numberOfElements) &&
        Objects.equals(this.totalPages, s3InputLocationsPage.totalPages) &&
        Objects.equals(this.totalElements, s3InputLocationsPage.totalElements) &&
        Objects.equals(this.items, s3InputLocationsPage.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageNumber, pageSize, numberOfElements, totalPages, totalElements, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3InputLocationsPage {\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    numberOfElements: ").append(toIndentedString(numberOfElements)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `pageNumber` to the URL query string
    if (getPageNumber() != null) {
      try {
        joiner.add(String.format("%spageNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPageNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `pageSize` to the URL query string
    if (getPageSize() != null) {
      try {
        joiner.add(String.format("%spageSize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPageSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `numberOfElements` to the URL query string
    if (getNumberOfElements() != null) {
      try {
        joiner.add(String.format("%snumberOfElements%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumberOfElements()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalPages` to the URL query string
    if (getTotalPages() != null) {
      try {
        joiner.add(String.format("%stotalPages%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalPages()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalElements` to the URL query string
    if (getTotalElements() != null) {
      try {
        joiner.add(String.format("%stotalElements%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalElements()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `items` to the URL query string
    if (getItems() != null) {
      for (int i = 0; i < getItems().size(); i++) {
        if (getItems().get(i) != null) {
          joiner.add(getItems().get(i).toUrlQueryString(String.format("%sitems%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

