/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.OperationStatus;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Details the state of the video processing operation, including status, progress, and estimated completion time.
 */
@JsonPropertyOrder({
  VideoProcessingState.JSON_PROPERTY_UPDATED_AT,
  VideoProcessingState.JSON_PROPERTY_ETA_SECONDS,
  VideoProcessingState.JSON_PROPERTY_PROCESSING_STATUS,
  VideoProcessingState.JSON_PROPERTY_PROGRESS_PERCENTAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingState {
  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_ETA_SECONDS = "etaSeconds";
  @javax.annotation.Nullable
  private Integer etaSeconds;

  public static final String JSON_PROPERTY_PROCESSING_STATUS = "processingStatus";
  @javax.annotation.Nullable
  private OperationStatus processingStatus;

  public static final String JSON_PROPERTY_PROGRESS_PERCENTAGE = "progressPercentage";
  @javax.annotation.Nullable
  private Integer progressPercentage;

  public VideoProcessingState() {
  }

  public VideoProcessingState updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time of the last update to the processing state.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public VideoProcessingState etaSeconds(@javax.annotation.Nullable Integer etaSeconds) {
    
    this.etaSeconds = etaSeconds;
    return this;
  }

  /**
   * The estimated time remaining for processing completion, in seconds.
   * @return etaSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ETA_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEtaSeconds() {
    return etaSeconds;
  }


  @JsonProperty(JSON_PROPERTY_ETA_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEtaSeconds(@javax.annotation.Nullable Integer etaSeconds) {
    this.etaSeconds = etaSeconds;
  }

  public VideoProcessingState processingStatus(@javax.annotation.Nullable OperationStatus processingStatus) {
    
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * The current status of the video processing operation.
   * @return processingStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSING_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OperationStatus getProcessingStatus() {
    return processingStatus;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingStatus(@javax.annotation.Nullable OperationStatus processingStatus) {
    this.processingStatus = processingStatus;
  }

  public VideoProcessingState progressPercentage(@javax.annotation.Nullable Integer progressPercentage) {
    
    this.progressPercentage = progressPercentage;
    return this;
  }

  /**
   * A percentage value represented as an integer. Commonly used to denote progress or completion levels. E.g., 0, 50, 100.
   * minimum: 0
   * maximum: 100
   * @return progressPercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROGRESS_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getProgressPercentage() {
    return progressPercentage;
  }


  @JsonProperty(JSON_PROPERTY_PROGRESS_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProgressPercentage(@javax.annotation.Nullable Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingState videoProcessingState = (VideoProcessingState) o;
    return Objects.equals(this.updatedAt, videoProcessingState.updatedAt) &&
        Objects.equals(this.etaSeconds, videoProcessingState.etaSeconds) &&
        Objects.equals(this.processingStatus, videoProcessingState.processingStatus) &&
        Objects.equals(this.progressPercentage, videoProcessingState.progressPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updatedAt, etaSeconds, processingStatus, progressPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingState {\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    etaSeconds: ").append(toIndentedString(etaSeconds)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    progressPercentage: ").append(toIndentedString(progressPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      try {
        joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `etaSeconds` to the URL query string
    if (getEtaSeconds() != null) {
      try {
        joiner.add(String.format("%setaSeconds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEtaSeconds()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `processingStatus` to the URL query string
    if (getProcessingStatus() != null) {
      try {
        joiner.add(String.format("%sprocessingStatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessingStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `progressPercentage` to the URL query string
    if (getProgressPercentage() != null) {
      try {
        joiner.add(String.format("%sprogressPercentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProgressPercentage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

