/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Specifies the cropped rectangle applied to the processed video when &#x60;filters.reshaper&#x60; is set to &#x60;CROP&#x60;.  The dimensions and position are determined by the normalized crop coordinates and the source video dimensions. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsFilterSettingsCropRectangle.JSON_PROPERTY_WIDTH,
  VideoProcessingConfigurationOptionsFilterSettingsCropRectangle.JSON_PROPERTY_HEIGHT,
  VideoProcessingConfigurationOptionsFilterSettingsCropRectangle.JSON_PROPERTY_X,
  VideoProcessingConfigurationOptionsFilterSettingsCropRectangle.JSON_PROPERTY_Y
})
@JsonTypeName("VideoProcessingConfigurationOptions_filterSettings_cropRectangle")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsFilterSettingsCropRectangle {
  public static final String JSON_PROPERTY_WIDTH = "width";
  @javax.annotation.Nonnull
  private Integer width;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  @javax.annotation.Nonnull
  private Integer height;

  public static final String JSON_PROPERTY_X = "x";
  @javax.annotation.Nullable
  private Integer x;

  public static final String JSON_PROPERTY_Y = "y";
  @javax.annotation.Nullable
  private Integer y;

  public VideoProcessingConfigurationOptionsFilterSettingsCropRectangle() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsCropRectangle width(@javax.annotation.Nonnull Integer width) {
    
    this.width = width;
    return this;
  }

  /**
   * The width of the cropped rectangle in pixels.
   * minimum: 1
   * @return width
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWidth(@javax.annotation.Nonnull Integer width) {
    this.width = width;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsCropRectangle height(@javax.annotation.Nonnull Integer height) {
    
    this.height = height;
    return this;
  }

  /**
   * The height of the cropped rectangle in pixels.
   * minimum: 1
   * @return height
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeight(@javax.annotation.Nonnull Integer height) {
    this.height = height;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsCropRectangle x(@javax.annotation.Nullable Integer x) {
    
    this.x = x;
    return this;
  }

  /**
   * The X-coordinate of the top-left corner of the cropped rectangle.
   * minimum: 0
   * @return x
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getX() {
    return x;
  }


  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setX(@javax.annotation.Nullable Integer x) {
    this.x = x;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsCropRectangle y(@javax.annotation.Nullable Integer y) {
    
    this.y = y;
    return this;
  }

  /**
   * The Y-coordinate of the top-left corner of the cropped rectangle.
   * minimum: 0
   * @return y
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getY() {
    return y;
  }


  @JsonProperty(JSON_PROPERTY_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setY(@javax.annotation.Nullable Integer y) {
    this.y = y;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsCropRectangle videoProcessingConfigurationOptionsFilterSettingsCropRectangle = (VideoProcessingConfigurationOptionsFilterSettingsCropRectangle) o;
    return Objects.equals(this.width, videoProcessingConfigurationOptionsFilterSettingsCropRectangle.width) &&
        Objects.equals(this.height, videoProcessingConfigurationOptionsFilterSettingsCropRectangle.height) &&
        Objects.equals(this.x, videoProcessingConfigurationOptionsFilterSettingsCropRectangle.x) &&
        Objects.equals(this.y, videoProcessingConfigurationOptionsFilterSettingsCropRectangle.y);
  }

  @Override
  public int hashCode() {
    return Objects.hash(width, height, x, y);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsCropRectangle {\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `width` to the URL query string
    if (getWidth() != null) {
      try {
        joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `height` to the URL query string
    if (getHeight() != null) {
      try {
        joiner.add(String.format("%sheight%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeight()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `x` to the URL query string
    if (getX() != null) {
      try {
        joiner.add(String.format("%sx%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getX()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `y` to the URL query string
    if (getY() != null) {
      try {
        joiner.add(String.format("%sy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getY()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

