/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * BillingPeriod
 */
@JsonPropertyOrder({
  BillingPeriod.JSON_PROPERTY_ID,
  BillingPeriod.JSON_PROPERTY_CREATED_AT,
  BillingPeriod.JSON_PROPERTY_UPDATED_AT,
  BillingPeriod.JSON_PROPERTY_TEAM_ID,
  BillingPeriod.JSON_PROPERTY_ENDED_AT,
  BillingPeriod.JSON_PROPERTY_STORAGE_COST_USD,
  BillingPeriod.JSON_PROPERTY_DOWNLOAD_COST_USD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class BillingPeriod {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_TEAM_ID = "teamId";
  @javax.annotation.Nonnull
  private UUID teamId;

  public static final String JSON_PROPERTY_ENDED_AT = "endedAt";
  @javax.annotation.Nullable
  private OffsetDateTime endedAt;

  public static final String JSON_PROPERTY_STORAGE_COST_USD = "storageCostUsd";
  @javax.annotation.Nullable
  private BigDecimal storageCostUsd;

  public static final String JSON_PROPERTY_DOWNLOAD_COST_USD = "downloadCostUsd";
  @javax.annotation.Nullable
  private BigDecimal downloadCostUsd;

  public BillingPeriod() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public BillingPeriod(
    @JsonProperty(JSON_PROPERTY_CREATED_AT) OffsetDateTime createdAt, 
    @JsonProperty(JSON_PROPERTY_UPDATED_AT) OffsetDateTime updatedAt, 
    @JsonProperty(JSON_PROPERTY_ENDED_AT) OffsetDateTime endedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.endedAt = endedAt;
  }

  public BillingPeriod id(@javax.annotation.Nonnull UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }

  /**
   * Date and time when the object was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Date and time when the object was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public BillingPeriod teamId(@javax.annotation.Nonnull UUID teamId) {
    
    this.teamId = teamId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return teamId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getTeamId() {
    return teamId;
  }


  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTeamId(@javax.annotation.Nonnull UUID teamId) {
    this.teamId = teamId;
  }

  /**
   * The date and time when the billing period ended.
   * @return endedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENDED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEndedAt() {
    return endedAt;
  }



  public BillingPeriod storageCostUsd(@javax.annotation.Nullable BigDecimal storageCostUsd) {
    
    this.storageCostUsd = storageCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return storageCostUsd
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORAGE_COST_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStorageCostUsd() {
    return storageCostUsd;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_COST_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageCostUsd(@javax.annotation.Nullable BigDecimal storageCostUsd) {
    this.storageCostUsd = storageCostUsd;
  }

  public BillingPeriod downloadCostUsd(@javax.annotation.Nullable BigDecimal downloadCostUsd) {
    
    this.downloadCostUsd = downloadCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return downloadCostUsd
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_COST_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDownloadCostUsd() {
    return downloadCostUsd;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_COST_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadCostUsd(@javax.annotation.Nullable BigDecimal downloadCostUsd) {
    this.downloadCostUsd = downloadCostUsd;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingPeriod billingPeriod = (BillingPeriod) o;
    return Objects.equals(this.id, billingPeriod.id) &&
        Objects.equals(this.createdAt, billingPeriod.createdAt) &&
        Objects.equals(this.updatedAt, billingPeriod.updatedAt) &&
        Objects.equals(this.teamId, billingPeriod.teamId) &&
        Objects.equals(this.endedAt, billingPeriod.endedAt) &&
        Objects.equals(this.storageCostUsd, billingPeriod.storageCostUsd) &&
        Objects.equals(this.downloadCostUsd, billingPeriod.downloadCostUsd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, updatedAt, teamId, endedAt, storageCostUsd, downloadCostUsd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingPeriod {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    storageCostUsd: ").append(toIndentedString(storageCostUsd)).append("\n");
    sb.append("    downloadCostUsd: ").append(toIndentedString(downloadCostUsd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      try {
        joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `teamId` to the URL query string
    if (getTeamId() != null) {
      try {
        joiner.add(String.format("%steamId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTeamId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `endedAt` to the URL query string
    if (getEndedAt() != null) {
      try {
        joiner.add(String.format("%sendedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEndedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `storageCostUsd` to the URL query string
    if (getStorageCostUsd() != null) {
      try {
        joiner.add(String.format("%sstorageCostUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStorageCostUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `downloadCostUsd` to the URL query string
    if (getDownloadCostUsd() != null) {
      try {
        joiner.add(String.format("%sdownloadCostUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDownloadCostUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

