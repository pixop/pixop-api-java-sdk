/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The detailed cost breakdown for the video processing.
 */
@JsonPropertyOrder({
  VideoProcessingJobAppraisalCost.JSON_PROPERTY_DISCOUNT_PERCENTAGE,
  VideoProcessingJobAppraisalCost.JSON_PROPERTY_TOTAL_PROCESSING_COST_USD,
  VideoProcessingJobAppraisalCost.JSON_PROPERTY_TOTAL_PROCESSING_DISCOUNT_USD,
  VideoProcessingJobAppraisalCost.JSON_PROPERTY_TOTAL_NORMAL_PROCESSING_COST_USD
})
@JsonTypeName("VideoProcessingJobAppraisal_cost")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingJobAppraisalCost {
  public static final String JSON_PROPERTY_DISCOUNT_PERCENTAGE = "discountPercentage";
  @javax.annotation.Nonnull
  private BigDecimal discountPercentage;

  public static final String JSON_PROPERTY_TOTAL_PROCESSING_COST_USD = "totalProcessingCostUsd";
  @javax.annotation.Nonnull
  private BigDecimal totalProcessingCostUsd;

  public static final String JSON_PROPERTY_TOTAL_PROCESSING_DISCOUNT_USD = "totalProcessingDiscountUsd";
  @javax.annotation.Nonnull
  private BigDecimal totalProcessingDiscountUsd;

  public static final String JSON_PROPERTY_TOTAL_NORMAL_PROCESSING_COST_USD = "totalNormalProcessingCostUsd";
  @javax.annotation.Nonnull
  private BigDecimal totalNormalProcessingCostUsd;

  public VideoProcessingJobAppraisalCost() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public VideoProcessingJobAppraisalCost(
    @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE) BigDecimal discountPercentage
  ) {
    this();
    this.discountPercentage = discountPercentage;
  }

  /**
   * Represents the discount percentage applied to a cost or product. For example, 3.3 indicates a 3.3% discount.
   * minimum: 0
   * maximum: 100
   * @return discountPercentage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getDiscountPercentage() {
    return discountPercentage;
  }



  public VideoProcessingJobAppraisalCost totalProcessingCostUsd(@javax.annotation.Nonnull BigDecimal totalProcessingCostUsd) {
    
    this.totalProcessingCostUsd = totalProcessingCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalProcessingCostUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_PROCESSING_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalProcessingCostUsd() {
    return totalProcessingCostUsd;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_PROCESSING_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalProcessingCostUsd(@javax.annotation.Nonnull BigDecimal totalProcessingCostUsd) {
    this.totalProcessingCostUsd = totalProcessingCostUsd;
  }

  public VideoProcessingJobAppraisalCost totalProcessingDiscountUsd(@javax.annotation.Nonnull BigDecimal totalProcessingDiscountUsd) {
    
    this.totalProcessingDiscountUsd = totalProcessingDiscountUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalProcessingDiscountUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_PROCESSING_DISCOUNT_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalProcessingDiscountUsd() {
    return totalProcessingDiscountUsd;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_PROCESSING_DISCOUNT_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalProcessingDiscountUsd(@javax.annotation.Nonnull BigDecimal totalProcessingDiscountUsd) {
    this.totalProcessingDiscountUsd = totalProcessingDiscountUsd;
  }

  public VideoProcessingJobAppraisalCost totalNormalProcessingCostUsd(@javax.annotation.Nonnull BigDecimal totalNormalProcessingCostUsd) {
    
    this.totalNormalProcessingCostUsd = totalNormalProcessingCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalNormalProcessingCostUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_NORMAL_PROCESSING_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalNormalProcessingCostUsd() {
    return totalNormalProcessingCostUsd;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_NORMAL_PROCESSING_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalNormalProcessingCostUsd(@javax.annotation.Nonnull BigDecimal totalNormalProcessingCostUsd) {
    this.totalNormalProcessingCostUsd = totalNormalProcessingCostUsd;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingJobAppraisalCost videoProcessingJobAppraisalCost = (VideoProcessingJobAppraisalCost) o;
    return Objects.equals(this.discountPercentage, videoProcessingJobAppraisalCost.discountPercentage) &&
        Objects.equals(this.totalProcessingCostUsd, videoProcessingJobAppraisalCost.totalProcessingCostUsd) &&
        Objects.equals(this.totalProcessingDiscountUsd, videoProcessingJobAppraisalCost.totalProcessingDiscountUsd) &&
        Objects.equals(this.totalNormalProcessingCostUsd, videoProcessingJobAppraisalCost.totalNormalProcessingCostUsd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountPercentage, totalProcessingCostUsd, totalProcessingDiscountUsd, totalNormalProcessingCostUsd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingJobAppraisalCost {\n");
    sb.append("    discountPercentage: ").append(toIndentedString(discountPercentage)).append("\n");
    sb.append("    totalProcessingCostUsd: ").append(toIndentedString(totalProcessingCostUsd)).append("\n");
    sb.append("    totalProcessingDiscountUsd: ").append(toIndentedString(totalProcessingDiscountUsd)).append("\n");
    sb.append("    totalNormalProcessingCostUsd: ").append(toIndentedString(totalNormalProcessingCostUsd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `discountPercentage` to the URL query string
    if (getDiscountPercentage() != null) {
      try {
        joiner.add(String.format("%sdiscountPercentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDiscountPercentage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalProcessingCostUsd` to the URL query string
    if (getTotalProcessingCostUsd() != null) {
      try {
        joiner.add(String.format("%stotalProcessingCostUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalProcessingCostUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalProcessingDiscountUsd` to the URL query string
    if (getTotalProcessingDiscountUsd() != null) {
      try {
        joiner.add(String.format("%stotalProcessingDiscountUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalProcessingDiscountUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalNormalProcessingCostUsd` to the URL query string
    if (getTotalNormalProcessingCostUsd() != null) {
      try {
        joiner.add(String.format("%stotalNormalProcessingCostUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalNormalProcessingCostUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

