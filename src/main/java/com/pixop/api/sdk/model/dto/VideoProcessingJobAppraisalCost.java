/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * The detailed cost breakdown for the video processing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingJobAppraisalCost {
  public static final String SERIALIZED_NAME_DISCOUNT_PERCENTAGE = "discountPercentage";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PERCENTAGE)
  @javax.annotation.Nullable
  private BigDecimal discountPercentage;

  public static final String SERIALIZED_NAME_TOTAL_PROCESSING_COST_USD = "totalProcessingCostUsd";
  @SerializedName(SERIALIZED_NAME_TOTAL_PROCESSING_COST_USD)
  @javax.annotation.Nullable
  private BigDecimal totalProcessingCostUsd;

  public static final String SERIALIZED_NAME_TOTAL_PROCESSING_DISCOUNT_USD = "totalProcessingDiscountUsd";
  @SerializedName(SERIALIZED_NAME_TOTAL_PROCESSING_DISCOUNT_USD)
  @javax.annotation.Nullable
  private BigDecimal totalProcessingDiscountUsd;

  public static final String SERIALIZED_NAME_TOTAL_NORMAL_PROCESSING_COST_USD = "totalNormalProcessingCostUsd";
  @SerializedName(SERIALIZED_NAME_TOTAL_NORMAL_PROCESSING_COST_USD)
  @javax.annotation.Nullable
  private BigDecimal totalNormalProcessingCostUsd;

  public VideoProcessingJobAppraisalCost() {
  }

  public VideoProcessingJobAppraisalCost(
     BigDecimal discountPercentage
  ) {
    this();
    this.discountPercentage = discountPercentage;
  }

  /**
   * Represents the discount percentage applied to a cost or product. For example, 3.3 indicates a 3.3% discount.
   * minimum: 0
   * maximum: 100
   * @return discountPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getDiscountPercentage() {
    return discountPercentage;
  }



  public VideoProcessingJobAppraisalCost totalProcessingCostUsd(@javax.annotation.Nullable BigDecimal totalProcessingCostUsd) {
    this.totalProcessingCostUsd = totalProcessingCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalProcessingCostUsd
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalProcessingCostUsd() {
    return totalProcessingCostUsd;
  }

  public void setTotalProcessingCostUsd(@javax.annotation.Nullable BigDecimal totalProcessingCostUsd) {
    this.totalProcessingCostUsd = totalProcessingCostUsd;
  }


  public VideoProcessingJobAppraisalCost totalProcessingDiscountUsd(@javax.annotation.Nullable BigDecimal totalProcessingDiscountUsd) {
    this.totalProcessingDiscountUsd = totalProcessingDiscountUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalProcessingDiscountUsd
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalProcessingDiscountUsd() {
    return totalProcessingDiscountUsd;
  }

  public void setTotalProcessingDiscountUsd(@javax.annotation.Nullable BigDecimal totalProcessingDiscountUsd) {
    this.totalProcessingDiscountUsd = totalProcessingDiscountUsd;
  }


  public VideoProcessingJobAppraisalCost totalNormalProcessingCostUsd(@javax.annotation.Nullable BigDecimal totalNormalProcessingCostUsd) {
    this.totalNormalProcessingCostUsd = totalNormalProcessingCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalNormalProcessingCostUsd
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalNormalProcessingCostUsd() {
    return totalNormalProcessingCostUsd;
  }

  public void setTotalNormalProcessingCostUsd(@javax.annotation.Nullable BigDecimal totalNormalProcessingCostUsd) {
    this.totalNormalProcessingCostUsd = totalNormalProcessingCostUsd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingJobAppraisalCost videoProcessingJobAppraisalCost = (VideoProcessingJobAppraisalCost) o;
    return Objects.equals(this.discountPercentage, videoProcessingJobAppraisalCost.discountPercentage) &&
        Objects.equals(this.totalProcessingCostUsd, videoProcessingJobAppraisalCost.totalProcessingCostUsd) &&
        Objects.equals(this.totalProcessingDiscountUsd, videoProcessingJobAppraisalCost.totalProcessingDiscountUsd) &&
        Objects.equals(this.totalNormalProcessingCostUsd, videoProcessingJobAppraisalCost.totalNormalProcessingCostUsd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountPercentage, totalProcessingCostUsd, totalProcessingDiscountUsd, totalNormalProcessingCostUsd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingJobAppraisalCost {\n");
    sb.append("    discountPercentage: ").append(toIndentedString(discountPercentage)).append("\n");
    sb.append("    totalProcessingCostUsd: ").append(toIndentedString(totalProcessingCostUsd)).append("\n");
    sb.append("    totalProcessingDiscountUsd: ").append(toIndentedString(totalProcessingDiscountUsd)).append("\n");
    sb.append("    totalNormalProcessingCostUsd: ").append(toIndentedString(totalNormalProcessingCostUsd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discountPercentage");
    openapiFields.add("totalProcessingCostUsd");
    openapiFields.add("totalProcessingDiscountUsd");
    openapiFields.add("totalNormalProcessingCostUsd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingJobAppraisalCost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingJobAppraisalCost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingJobAppraisalCost is not found in the empty JSON string", VideoProcessingJobAppraisalCost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingJobAppraisalCost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingJobAppraisalCost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingJobAppraisalCost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingJobAppraisalCost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingJobAppraisalCost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingJobAppraisalCost.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingJobAppraisalCost>() {
           @Override
           public void write(JsonWriter out, VideoProcessingJobAppraisalCost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingJobAppraisalCost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingJobAppraisalCost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingJobAppraisalCost
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingJobAppraisalCost
   */
  public static VideoProcessingJobAppraisalCost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingJobAppraisalCost.class);
  }

  /**
   * Convert an instance of VideoProcessingJobAppraisalCost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

