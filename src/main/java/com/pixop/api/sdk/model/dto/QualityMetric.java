/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents a quality metric for video assessment, including detailed and subjective scoring information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class QualityMetric {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_SAMPLE_MEAN = "sampleMean";
  @SerializedName(SERIALIZED_NAME_SAMPLE_MEAN)
  @javax.annotation.Nullable
  private BigDecimal sampleMean;

  public static final String SERIALIZED_NAME_SUBJECTIVE_LABEL = "subjectiveLabel";
  @SerializedName(SERIALIZED_NAME_SUBJECTIVE_LABEL)
  @javax.annotation.Nullable
  private String subjectiveLabel;

  public static final String SERIALIZED_NAME_SUBJECTIVE_SCORE = "subjectiveScore";
  @SerializedName(SERIALIZED_NAME_SUBJECTIVE_SCORE)
  @javax.annotation.Nullable
  private BigDecimal subjectiveScore;

  public QualityMetric() {
  }

  public QualityMetric name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the quality metric, such as noise, details, or colors.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public QualityMetric sampleMean(@javax.annotation.Nullable BigDecimal sampleMean) {
    this.sampleMean = sampleMean;
    return this;
  }

  /**
   * The sample mean value of the quality metric. For example, 0.377.
   * @return sampleMean
   */
  @javax.annotation.Nullable
  public BigDecimal getSampleMean() {
    return sampleMean;
  }

  public void setSampleMean(@javax.annotation.Nullable BigDecimal sampleMean) {
    this.sampleMean = sampleMean;
  }


  public QualityMetric subjectiveLabel(@javax.annotation.Nullable String subjectiveLabel) {
    this.subjectiveLabel = subjectiveLabel;
    return this;
  }

  /**
   * The subjective label of the quality metric, such as poor, good, or untenable.
   * @return subjectiveLabel
   */
  @javax.annotation.Nullable
  public String getSubjectiveLabel() {
    return subjectiveLabel;
  }

  public void setSubjectiveLabel(@javax.annotation.Nullable String subjectiveLabel) {
    this.subjectiveLabel = subjectiveLabel;
  }


  public QualityMetric subjectiveScore(@javax.annotation.Nullable BigDecimal subjectiveScore) {
    this.subjectiveScore = subjectiveScore;
    return this;
  }

  /**
   * The subjective numerical score for the quality metric. For example, 3.726.
   * @return subjectiveScore
   */
  @javax.annotation.Nullable
  public BigDecimal getSubjectiveScore() {
    return subjectiveScore;
  }

  public void setSubjectiveScore(@javax.annotation.Nullable BigDecimal subjectiveScore) {
    this.subjectiveScore = subjectiveScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QualityMetric qualityMetric = (QualityMetric) o;
    return Objects.equals(this.name, qualityMetric.name) &&
        Objects.equals(this.sampleMean, qualityMetric.sampleMean) &&
        Objects.equals(this.subjectiveLabel, qualityMetric.subjectiveLabel) &&
        Objects.equals(this.subjectiveScore, qualityMetric.subjectiveScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sampleMean, subjectiveLabel, subjectiveScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QualityMetric {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sampleMean: ").append(toIndentedString(sampleMean)).append("\n");
    sb.append("    subjectiveLabel: ").append(toIndentedString(subjectiveLabel)).append("\n");
    sb.append("    subjectiveScore: ").append(toIndentedString(subjectiveScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("sampleMean");
    openapiFields.add("subjectiveLabel");
    openapiFields.add("subjectiveScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QualityMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QualityMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QualityMetric is not found in the empty JSON string", QualityMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QualityMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QualityMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subjectiveLabel") != null && !jsonObj.get("subjectiveLabel").isJsonNull()) && !jsonObj.get("subjectiveLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectiveLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectiveLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QualityMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QualityMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QualityMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QualityMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<QualityMetric>() {
           @Override
           public void write(JsonWriter out, QualityMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QualityMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QualityMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QualityMetric
   * @throws IOException if the JSON string is invalid with respect to QualityMetric
   */
  public static QualityMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QualityMetric.class);
  }

  /**
   * Convert an instance of QualityMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

