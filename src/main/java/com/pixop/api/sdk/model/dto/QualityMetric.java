/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents a quality metric for video assessment, including detailed and subjective scoring information.
 */
@JsonPropertyOrder({
  QualityMetric.JSON_PROPERTY_NAME,
  QualityMetric.JSON_PROPERTY_SAMPLE_MEAN,
  QualityMetric.JSON_PROPERTY_SUBJECTIVE_LABEL,
  QualityMetric.JSON_PROPERTY_SUBJECTIVE_SCORE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class QualityMetric {
  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_SAMPLE_MEAN = "sampleMean";
  @javax.annotation.Nullable
  private BigDecimal sampleMean;

  public static final String JSON_PROPERTY_SUBJECTIVE_LABEL = "subjectiveLabel";
  @javax.annotation.Nullable
  private String subjectiveLabel;

  public static final String JSON_PROPERTY_SUBJECTIVE_SCORE = "subjectiveScore";
  @javax.annotation.Nullable
  private BigDecimal subjectiveScore;

  public QualityMetric() {
  }

  public QualityMetric name(@javax.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * The name of the quality metric, such as noise, details, or colors.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }

  public QualityMetric sampleMean(@javax.annotation.Nullable BigDecimal sampleMean) {
    
    this.sampleMean = sampleMean;
    return this;
  }

  /**
   * The sample mean value of the quality metric. For example, 0.377.
   * @return sampleMean
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAMPLE_MEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSampleMean() {
    return sampleMean;
  }


  @JsonProperty(JSON_PROPERTY_SAMPLE_MEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSampleMean(@javax.annotation.Nullable BigDecimal sampleMean) {
    this.sampleMean = sampleMean;
  }

  public QualityMetric subjectiveLabel(@javax.annotation.Nullable String subjectiveLabel) {
    
    this.subjectiveLabel = subjectiveLabel;
    return this;
  }

  /**
   * The subjective label of the quality metric, such as poor, good, or untenable.
   * @return subjectiveLabel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECTIVE_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubjectiveLabel() {
    return subjectiveLabel;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECTIVE_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectiveLabel(@javax.annotation.Nullable String subjectiveLabel) {
    this.subjectiveLabel = subjectiveLabel;
  }

  public QualityMetric subjectiveScore(@javax.annotation.Nullable BigDecimal subjectiveScore) {
    
    this.subjectiveScore = subjectiveScore;
    return this;
  }

  /**
   * The subjective numerical score for the quality metric. For example, 3.726.
   * @return subjectiveScore
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECTIVE_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSubjectiveScore() {
    return subjectiveScore;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECTIVE_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectiveScore(@javax.annotation.Nullable BigDecimal subjectiveScore) {
    this.subjectiveScore = subjectiveScore;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QualityMetric qualityMetric = (QualityMetric) o;
    return Objects.equals(this.name, qualityMetric.name) &&
        Objects.equals(this.sampleMean, qualityMetric.sampleMean) &&
        Objects.equals(this.subjectiveLabel, qualityMetric.subjectiveLabel) &&
        Objects.equals(this.subjectiveScore, qualityMetric.subjectiveScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sampleMean, subjectiveLabel, subjectiveScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QualityMetric {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sampleMean: ").append(toIndentedString(sampleMean)).append("\n");
    sb.append("    subjectiveLabel: ").append(toIndentedString(subjectiveLabel)).append("\n");
    sb.append("    subjectiveScore: ").append(toIndentedString(subjectiveScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sampleMean` to the URL query string
    if (getSampleMean() != null) {
      try {
        joiner.add(String.format("%ssampleMean%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSampleMean()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subjectiveLabel` to the URL query string
    if (getSubjectiveLabel() != null) {
      try {
        joiner.add(String.format("%ssubjectiveLabel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubjectiveLabel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subjectiveScore` to the URL query string
    if (getSubjectiveScore() != null) {
      try {
        joiner.add(String.format("%ssubjectiveScore%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubjectiveScore()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

