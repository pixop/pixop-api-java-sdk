/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Defines the start and end positions of the source video used in processing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class SourceVideo {
  public static final String SERIALIZED_NAME_START_POSITION_MILLISECONDS = "startPositionMilliseconds";
  @SerializedName(SERIALIZED_NAME_START_POSITION_MILLISECONDS)
  @javax.annotation.Nullable
  private Integer startPositionMilliseconds;

  public static final String SERIALIZED_NAME_END_POSITION_MILLISECONDS = "endPositionMilliseconds";
  @SerializedName(SERIALIZED_NAME_END_POSITION_MILLISECONDS)
  @javax.annotation.Nullable
  private Integer endPositionMilliseconds;

  public SourceVideo() {
  }

  public SourceVideo startPositionMilliseconds(@javax.annotation.Nullable Integer startPositionMilliseconds) {
    this.startPositionMilliseconds = startPositionMilliseconds;
    return this;
  }

  /**
   * The start position of the source video for processing, in milliseconds.
   * minimum: 0
   * @return startPositionMilliseconds
   */
  @javax.annotation.Nullable
  public Integer getStartPositionMilliseconds() {
    return startPositionMilliseconds;
  }

  public void setStartPositionMilliseconds(@javax.annotation.Nullable Integer startPositionMilliseconds) {
    this.startPositionMilliseconds = startPositionMilliseconds;
  }


  public SourceVideo endPositionMilliseconds(@javax.annotation.Nullable Integer endPositionMilliseconds) {
    this.endPositionMilliseconds = endPositionMilliseconds;
    return this;
  }

  /**
   * The end position of the source video for processing, in milliseconds. Must be at least 1000 milliseconds.
   * minimum: 1000
   * @return endPositionMilliseconds
   */
  @javax.annotation.Nullable
  public Integer getEndPositionMilliseconds() {
    return endPositionMilliseconds;
  }

  public void setEndPositionMilliseconds(@javax.annotation.Nullable Integer endPositionMilliseconds) {
    this.endPositionMilliseconds = endPositionMilliseconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceVideo sourceVideo = (SourceVideo) o;
    return Objects.equals(this.startPositionMilliseconds, sourceVideo.startPositionMilliseconds) &&
        Objects.equals(this.endPositionMilliseconds, sourceVideo.endPositionMilliseconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startPositionMilliseconds, endPositionMilliseconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceVideo {\n");
    sb.append("    startPositionMilliseconds: ").append(toIndentedString(startPositionMilliseconds)).append("\n");
    sb.append("    endPositionMilliseconds: ").append(toIndentedString(endPositionMilliseconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startPositionMilliseconds");
    openapiFields.add("endPositionMilliseconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceVideo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceVideo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceVideo is not found in the empty JSON string", SourceVideo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceVideo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceVideo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceVideo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceVideo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceVideo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceVideo.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceVideo>() {
           @Override
           public void write(JsonWriter out, SourceVideo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceVideo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceVideo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceVideo
   * @throws IOException if the JSON string is invalid with respect to SourceVideo
   */
  public static SourceVideo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceVideo.class);
  }

  /**
   * Convert an instance of SourceVideo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

