/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsCropRectangle;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsFaceForward;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsFilmGrain;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsFrameRate;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsResolution;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Additional settings for video filters. These settings allow customization of specific filter behaviors, such as cropping coordinates, deinterlacing modes, and resolution adjustments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptionsFilterSettings {
  /**
   * Specifies how to determine the interlaced field order when &#x60;filters.deinterlacer&#x60; is used. For instance:   - &#x60;AUTO_METADATA&#x60;: Quickly determine the interlaced field order based on the source file metadata   - &#x60;AUTO_SEGMENT_ANALYSIS&#x60;: Auto determine the interlaced field order of the whole video based on a deep analysis of up to three one-minute segments   - &#x60;TOP_FIELD_FIRST&#x60;: Top field first   - &#x60;BOTTOM_FIELD_FIRST&#x60;: Bottom field first 
   */
  @JsonAdapter(InterlacedFieldOrderModeEnum.Adapter.class)
  public enum InterlacedFieldOrderModeEnum {
    AUTO_METADATA("AUTO_METADATA"),
    
    AUTO_SEGMENT_ANALYSIS("AUTO_SEGMENT_ANALYSIS"),
    
    TOP_FIELD_FIRST("TOP_FIELD_FIRST"),
    
    BOTTOM_FIELD_FIRST("BOTTOM_FIELD_FIRST");

    private String value;

    InterlacedFieldOrderModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterlacedFieldOrderModeEnum fromValue(String value) {
      for (InterlacedFieldOrderModeEnum b : InterlacedFieldOrderModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterlacedFieldOrderModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterlacedFieldOrderModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterlacedFieldOrderModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterlacedFieldOrderModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterlacedFieldOrderModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERLACED_FIELD_ORDER_MODE = "interlacedFieldOrderMode";
  @SerializedName(SERIALIZED_NAME_INTERLACED_FIELD_ORDER_MODE)
  @javax.annotation.Nullable
  private InterlacedFieldOrderModeEnum interlacedFieldOrderMode;

  public static final String SERIALIZED_NAME_NORMALIZED_CROP_COORDINATES = "normalizedCropCoordinates";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_CROP_COORDINATES)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates normalizedCropCoordinates;

  public static final String SERIALIZED_NAME_CROP_RECTANGLE = "cropRectangle";
  @SerializedName(SERIALIZED_NAME_CROP_RECTANGLE)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsCropRectangle cropRectangle;

  public static final String SERIALIZED_NAME_FACE_FORWARD = "faceForward";
  @SerializedName(SERIALIZED_NAME_FACE_FORWARD)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsFaceForward faceForward;

  /**
   * Specifies the Pixop Deep Restoration 2 variant used when &#x60;filters.scaler&#x60; is set to &#x60;DVRES2&#x60;. For instance:   - &#x60;GENERIC&#x60;: Default if not specified. Denoises, deblurs and eliminates compression artifacts, then upscales while injecting details. For any quality digital camera recorded video.    - &#x60;FINE_TUNING&#x60;: Eliminates compression artifacts, then upscales while injecting details. A relatively conservative, fine-tuning mode as neither denoising nor any deblurring is performed. Primarily intended for higher production quality video.    - &#x60;SELFIE_STYLE&#x60;: Denoises and eliminates compression artifacts, then upscales while injecting details. Intended for selfie-style recordings captured on smaller sensors such as web cameras or mobile phones. 
   */
  @JsonAdapter(Dvres2VariantEnum.Adapter.class)
  public enum Dvres2VariantEnum {
    GENERIC("GENERIC"),
    
    FINE_TUNING("FINE_TUNING"),
    
    SELFIE_STYLE("SELFIE_STYLE");

    private String value;

    Dvres2VariantEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Dvres2VariantEnum fromValue(String value) {
      for (Dvres2VariantEnum b : Dvres2VariantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Dvres2VariantEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Dvres2VariantEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Dvres2VariantEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Dvres2VariantEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Dvres2VariantEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DVRES2_VARIANT = "dvres2Variant";
  @SerializedName(SERIALIZED_NAME_DVRES2_VARIANT)
  @javax.annotation.Nullable
  private Dvres2VariantEnum dvres2Variant;

  /**
   * Defines the level of contrast enhancement applied when &#x60;filters.scaler&#x60; is set to &#x60;PABSR1&#x60;.  This setting controls how much clarity and vibrancy is added to the video. 
   */
  @JsonAdapter(ClarityBoostEnum.Adapter.class)
  public enum ClarityBoostEnum {
    NONE("NONE"),
    
    MARGINAL("MARGINAL"),
    
    VERY_LOW("VERY_LOW"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    VERY_HIGH("VERY_HIGH");

    private String value;

    ClarityBoostEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClarityBoostEnum fromValue(String value) {
      for (ClarityBoostEnum b : ClarityBoostEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClarityBoostEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClarityBoostEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClarityBoostEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClarityBoostEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClarityBoostEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLARITY_BOOST = "clarityBoost";
  @SerializedName(SERIALIZED_NAME_CLARITY_BOOST)
  @javax.annotation.Nullable
  private ClarityBoostEnum clarityBoost;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsResolution resolution;

  public static final String SERIALIZED_NAME_FRAME_RATE = "frameRate";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsFrameRate frameRate;

  public static final String SERIALIZED_NAME_FILM_GRAIN = "filmGrain";
  @SerializedName(SERIALIZED_NAME_FILM_GRAIN)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsFilmGrain filmGrain;

  public VideoProcessingConfigurationOptionsFilterSettings() {
  }

  public VideoProcessingConfigurationOptionsFilterSettings interlacedFieldOrderMode(@javax.annotation.Nullable InterlacedFieldOrderModeEnum interlacedFieldOrderMode) {
    this.interlacedFieldOrderMode = interlacedFieldOrderMode;
    return this;
  }

  /**
   * Specifies how to determine the interlaced field order when &#x60;filters.deinterlacer&#x60; is used. For instance:   - &#x60;AUTO_METADATA&#x60;: Quickly determine the interlaced field order based on the source file metadata   - &#x60;AUTO_SEGMENT_ANALYSIS&#x60;: Auto determine the interlaced field order of the whole video based on a deep analysis of up to three one-minute segments   - &#x60;TOP_FIELD_FIRST&#x60;: Top field first   - &#x60;BOTTOM_FIELD_FIRST&#x60;: Bottom field first 
   * @return interlacedFieldOrderMode
   */
  @javax.annotation.Nullable
  public InterlacedFieldOrderModeEnum getInterlacedFieldOrderMode() {
    return interlacedFieldOrderMode;
  }

  public void setInterlacedFieldOrderMode(@javax.annotation.Nullable InterlacedFieldOrderModeEnum interlacedFieldOrderMode) {
    this.interlacedFieldOrderMode = interlacedFieldOrderMode;
  }


  public VideoProcessingConfigurationOptionsFilterSettings normalizedCropCoordinates(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates normalizedCropCoordinates) {
    this.normalizedCropCoordinates = normalizedCropCoordinates;
    return this;
  }

  /**
   * Get normalizedCropCoordinates
   * @return normalizedCropCoordinates
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates getNormalizedCropCoordinates() {
    return normalizedCropCoordinates;
  }

  public void setNormalizedCropCoordinates(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates normalizedCropCoordinates) {
    this.normalizedCropCoordinates = normalizedCropCoordinates;
  }


  public VideoProcessingConfigurationOptionsFilterSettings cropRectangle(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsCropRectangle cropRectangle) {
    this.cropRectangle = cropRectangle;
    return this;
  }

  /**
   * Get cropRectangle
   * @return cropRectangle
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilterSettingsCropRectangle getCropRectangle() {
    return cropRectangle;
  }

  public void setCropRectangle(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsCropRectangle cropRectangle) {
    this.cropRectangle = cropRectangle;
  }


  public VideoProcessingConfigurationOptionsFilterSettings faceForward(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFaceForward faceForward) {
    this.faceForward = faceForward;
    return this;
  }

  /**
   * Get faceForward
   * @return faceForward
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward getFaceForward() {
    return faceForward;
  }

  public void setFaceForward(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFaceForward faceForward) {
    this.faceForward = faceForward;
  }


  public VideoProcessingConfigurationOptionsFilterSettings dvres2Variant(@javax.annotation.Nullable Dvres2VariantEnum dvres2Variant) {
    this.dvres2Variant = dvres2Variant;
    return this;
  }

  /**
   * Specifies the Pixop Deep Restoration 2 variant used when &#x60;filters.scaler&#x60; is set to &#x60;DVRES2&#x60;. For instance:   - &#x60;GENERIC&#x60;: Default if not specified. Denoises, deblurs and eliminates compression artifacts, then upscales while injecting details. For any quality digital camera recorded video.    - &#x60;FINE_TUNING&#x60;: Eliminates compression artifacts, then upscales while injecting details. A relatively conservative, fine-tuning mode as neither denoising nor any deblurring is performed. Primarily intended for higher production quality video.    - &#x60;SELFIE_STYLE&#x60;: Denoises and eliminates compression artifacts, then upscales while injecting details. Intended for selfie-style recordings captured on smaller sensors such as web cameras or mobile phones. 
   * @return dvres2Variant
   */
  @javax.annotation.Nullable
  public Dvres2VariantEnum getDvres2Variant() {
    return dvres2Variant;
  }

  public void setDvres2Variant(@javax.annotation.Nullable Dvres2VariantEnum dvres2Variant) {
    this.dvres2Variant = dvres2Variant;
  }


  public VideoProcessingConfigurationOptionsFilterSettings clarityBoost(@javax.annotation.Nullable ClarityBoostEnum clarityBoost) {
    this.clarityBoost = clarityBoost;
    return this;
  }

  /**
   * Defines the level of contrast enhancement applied when &#x60;filters.scaler&#x60; is set to &#x60;PABSR1&#x60;.  This setting controls how much clarity and vibrancy is added to the video. 
   * @return clarityBoost
   */
  @javax.annotation.Nullable
  public ClarityBoostEnum getClarityBoost() {
    return clarityBoost;
  }

  public void setClarityBoost(@javax.annotation.Nullable ClarityBoostEnum clarityBoost) {
    this.clarityBoost = clarityBoost;
  }


  public VideoProcessingConfigurationOptionsFilterSettings resolution(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsResolution resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilterSettingsResolution getResolution() {
    return resolution;
  }

  public void setResolution(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsResolution resolution) {
    this.resolution = resolution;
  }


  public VideoProcessingConfigurationOptionsFilterSettings frameRate(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFrameRate frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  /**
   * Get frameRate
   * @return frameRate
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFrameRate frameRate) {
    this.frameRate = frameRate;
  }


  public VideoProcessingConfigurationOptionsFilterSettings filmGrain(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFilmGrain filmGrain) {
    this.filmGrain = filmGrain;
    return this;
  }

  /**
   * Get filmGrain
   * @return filmGrain
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain getFilmGrain() {
    return filmGrain;
  }

  public void setFilmGrain(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFilmGrain filmGrain) {
    this.filmGrain = filmGrain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettings videoProcessingConfigurationOptionsFilterSettings = (VideoProcessingConfigurationOptionsFilterSettings) o;
    return Objects.equals(this.interlacedFieldOrderMode, videoProcessingConfigurationOptionsFilterSettings.interlacedFieldOrderMode) &&
        Objects.equals(this.normalizedCropCoordinates, videoProcessingConfigurationOptionsFilterSettings.normalizedCropCoordinates) &&
        Objects.equals(this.cropRectangle, videoProcessingConfigurationOptionsFilterSettings.cropRectangle) &&
        Objects.equals(this.faceForward, videoProcessingConfigurationOptionsFilterSettings.faceForward) &&
        Objects.equals(this.dvres2Variant, videoProcessingConfigurationOptionsFilterSettings.dvres2Variant) &&
        Objects.equals(this.clarityBoost, videoProcessingConfigurationOptionsFilterSettings.clarityBoost) &&
        Objects.equals(this.resolution, videoProcessingConfigurationOptionsFilterSettings.resolution) &&
        Objects.equals(this.frameRate, videoProcessingConfigurationOptionsFilterSettings.frameRate) &&
        Objects.equals(this.filmGrain, videoProcessingConfigurationOptionsFilterSettings.filmGrain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interlacedFieldOrderMode, normalizedCropCoordinates, cropRectangle, faceForward, dvres2Variant, clarityBoost, resolution, frameRate, filmGrain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettings {\n");
    sb.append("    interlacedFieldOrderMode: ").append(toIndentedString(interlacedFieldOrderMode)).append("\n");
    sb.append("    normalizedCropCoordinates: ").append(toIndentedString(normalizedCropCoordinates)).append("\n");
    sb.append("    cropRectangle: ").append(toIndentedString(cropRectangle)).append("\n");
    sb.append("    faceForward: ").append(toIndentedString(faceForward)).append("\n");
    sb.append("    dvres2Variant: ").append(toIndentedString(dvres2Variant)).append("\n");
    sb.append("    clarityBoost: ").append(toIndentedString(clarityBoost)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    filmGrain: ").append(toIndentedString(filmGrain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interlacedFieldOrderMode");
    openapiFields.add("normalizedCropCoordinates");
    openapiFields.add("cropRectangle");
    openapiFields.add("faceForward");
    openapiFields.add("dvres2Variant");
    openapiFields.add("clarityBoost");
    openapiFields.add("resolution");
    openapiFields.add("frameRate");
    openapiFields.add("filmGrain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptionsFilterSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptionsFilterSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptionsFilterSettings is not found in the empty JSON string", VideoProcessingConfigurationOptionsFilterSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptionsFilterSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptionsFilterSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("interlacedFieldOrderMode") != null && !jsonObj.get("interlacedFieldOrderMode").isJsonNull()) && !jsonObj.get("interlacedFieldOrderMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interlacedFieldOrderMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interlacedFieldOrderMode").toString()));
      }
      // validate the optional field `interlacedFieldOrderMode`
      if (jsonObj.get("interlacedFieldOrderMode") != null && !jsonObj.get("interlacedFieldOrderMode").isJsonNull()) {
        InterlacedFieldOrderModeEnum.validateJsonElement(jsonObj.get("interlacedFieldOrderMode"));
      }
      // validate the optional field `normalizedCropCoordinates`
      if (jsonObj.get("normalizedCropCoordinates") != null && !jsonObj.get("normalizedCropCoordinates").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates.validateJsonElement(jsonObj.get("normalizedCropCoordinates"));
      }
      // validate the optional field `cropRectangle`
      if (jsonObj.get("cropRectangle") != null && !jsonObj.get("cropRectangle").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilterSettingsCropRectangle.validateJsonElement(jsonObj.get("cropRectangle"));
      }
      // validate the optional field `faceForward`
      if (jsonObj.get("faceForward") != null && !jsonObj.get("faceForward").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilterSettingsFaceForward.validateJsonElement(jsonObj.get("faceForward"));
      }
      if ((jsonObj.get("dvres2Variant") != null && !jsonObj.get("dvres2Variant").isJsonNull()) && !jsonObj.get("dvres2Variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dvres2Variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dvres2Variant").toString()));
      }
      // validate the optional field `dvres2Variant`
      if (jsonObj.get("dvres2Variant") != null && !jsonObj.get("dvres2Variant").isJsonNull()) {
        Dvres2VariantEnum.validateJsonElement(jsonObj.get("dvres2Variant"));
      }
      if ((jsonObj.get("clarityBoost") != null && !jsonObj.get("clarityBoost").isJsonNull()) && !jsonObj.get("clarityBoost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clarityBoost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clarityBoost").toString()));
      }
      // validate the optional field `clarityBoost`
      if (jsonObj.get("clarityBoost") != null && !jsonObj.get("clarityBoost").isJsonNull()) {
        ClarityBoostEnum.validateJsonElement(jsonObj.get("clarityBoost"));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilterSettingsResolution.validateJsonElement(jsonObj.get("resolution"));
      }
      // validate the optional field `frameRate`
      if (jsonObj.get("frameRate") != null && !jsonObj.get("frameRate").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilterSettingsFrameRate.validateJsonElement(jsonObj.get("frameRate"));
      }
      // validate the optional field `filmGrain`
      if (jsonObj.get("filmGrain") != null && !jsonObj.get("filmGrain").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.validateJsonElement(jsonObj.get("filmGrain"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptionsFilterSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptionsFilterSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptionsFilterSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptionsFilterSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptionsFilterSettings>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptionsFilterSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptionsFilterSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptionsFilterSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptionsFilterSettings
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptionsFilterSettings
   */
  public static VideoProcessingConfigurationOptionsFilterSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptionsFilterSettings.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptionsFilterSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

