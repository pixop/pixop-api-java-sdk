/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsCropRectangle;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsFaceForward;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsFilmGrain;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsFrameRate;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettingsResolution;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Additional settings for video filters. These settings allow customization of specific filter behaviors, such as cropping coordinates, deinterlacing modes, and resolution adjustments.
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_INTERLACED_FIELD_ORDER_MODE,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_NORMALIZED_CROP_COORDINATES,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_CROP_RECTANGLE,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_FACE_FORWARD,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_DVRES2_VARIANT,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_CLARITY_BOOST,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_RESOLUTION,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_FRAME_RATE,
  VideoProcessingConfigurationOptionsFilterSettings.JSON_PROPERTY_FILM_GRAIN
})
@JsonTypeName("VideoProcessingConfigurationOptions_filterSettings")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsFilterSettings {
  /**
   * Specifies how to determine the interlaced field order when &#x60;filters.deinterlacer&#x60; is used. For instance:   - &#x60;AUTO_METADATA&#x60;: Quickly determine the interlaced field order based on the source file metadata   - &#x60;AUTO_SEGMENT_ANALYSIS&#x60;: Auto determine the interlaced field order of the whole video based on a deep analysis of up to three one-minute segments   - &#x60;TOP_FIELD_FIRST&#x60;: Top field first   - &#x60;BOTTOM_FIELD_FIRST&#x60;: Bottom field first 
   */
  public enum InterlacedFieldOrderModeEnum {
    AUTO_METADATA(String.valueOf("AUTO_METADATA")),
    
    AUTO_SEGMENT_ANALYSIS(String.valueOf("AUTO_SEGMENT_ANALYSIS")),
    
    TOP_FIELD_FIRST(String.valueOf("TOP_FIELD_FIRST")),
    
    BOTTOM_FIELD_FIRST(String.valueOf("BOTTOM_FIELD_FIRST")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    InterlacedFieldOrderModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterlacedFieldOrderModeEnum fromValue(String value) {
      for (InterlacedFieldOrderModeEnum b : InterlacedFieldOrderModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_INTERLACED_FIELD_ORDER_MODE = "interlacedFieldOrderMode";
  @javax.annotation.Nullable
  private InterlacedFieldOrderModeEnum interlacedFieldOrderMode;

  public static final String JSON_PROPERTY_NORMALIZED_CROP_COORDINATES = "normalizedCropCoordinates";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates normalizedCropCoordinates;

  public static final String JSON_PROPERTY_CROP_RECTANGLE = "cropRectangle";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsCropRectangle cropRectangle;

  public static final String JSON_PROPERTY_FACE_FORWARD = "faceForward";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsFaceForward faceForward;

  /**
   * Specifies the Pixop Deep Restoration 2 variant used when &#x60;filters.scaler&#x60; is set to &#x60;DVRES2&#x60;. For instance:   - &#x60;GENERIC&#x60;: Default if not specified. Denoises, deblurs and eliminates compression artifacts, then upscales while injecting details. For any quality digital camera recorded video.    - &#x60;FINE_TUNING&#x60;: Eliminates compression artifacts, then upscales while injecting details. A relatively conservative, fine-tuning mode as neither denoising nor any deblurring is performed. Primarily intended for higher production quality video.    - &#x60;SELFIE_STYLE&#x60;: Denoises and eliminates compression artifacts, then upscales while injecting details. Intended for selfie-style recordings captured on smaller sensors such as web cameras or mobile phones. 
   */
  public enum Dvres2VariantEnum {
    GENERIC(String.valueOf("GENERIC")),
    
    FINE_TUNING(String.valueOf("FINE_TUNING")),
    
    SELFIE_STYLE(String.valueOf("SELFIE_STYLE")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    Dvres2VariantEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static Dvres2VariantEnum fromValue(String value) {
      for (Dvres2VariantEnum b : Dvres2VariantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_DVRES2_VARIANT = "dvres2Variant";
  @javax.annotation.Nullable
  private Dvres2VariantEnum dvres2Variant;

  /**
   * Defines the level of contrast enhancement applied when &#x60;filters.scaler&#x60; is set to &#x60;PABSR1&#x60;.  This setting controls how much clarity and vibrancy is added to the video. 
   */
  public enum ClarityBoostEnum {
    NONE(String.valueOf("NONE")),
    
    MARGINAL(String.valueOf("MARGINAL")),
    
    VERY_LOW(String.valueOf("VERY_LOW")),
    
    LOW(String.valueOf("LOW")),
    
    MEDIUM(String.valueOf("MEDIUM")),
    
    HIGH(String.valueOf("HIGH")),
    
    VERY_HIGH(String.valueOf("VERY_HIGH")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    ClarityBoostEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ClarityBoostEnum fromValue(String value) {
      for (ClarityBoostEnum b : ClarityBoostEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_CLARITY_BOOST = "clarityBoost";
  @javax.annotation.Nullable
  private ClarityBoostEnum clarityBoost;

  public static final String JSON_PROPERTY_RESOLUTION = "resolution";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsResolution resolution;

  public static final String JSON_PROPERTY_FRAME_RATE = "frameRate";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsFrameRate frameRate;

  public static final String JSON_PROPERTY_FILM_GRAIN = "filmGrain";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettingsFilmGrain filmGrain;

  public VideoProcessingConfigurationOptionsFilterSettings() {
  }

  public VideoProcessingConfigurationOptionsFilterSettings interlacedFieldOrderMode(@javax.annotation.Nullable InterlacedFieldOrderModeEnum interlacedFieldOrderMode) {
    
    this.interlacedFieldOrderMode = interlacedFieldOrderMode;
    return this;
  }

  /**
   * Specifies how to determine the interlaced field order when &#x60;filters.deinterlacer&#x60; is used. For instance:   - &#x60;AUTO_METADATA&#x60;: Quickly determine the interlaced field order based on the source file metadata   - &#x60;AUTO_SEGMENT_ANALYSIS&#x60;: Auto determine the interlaced field order of the whole video based on a deep analysis of up to three one-minute segments   - &#x60;TOP_FIELD_FIRST&#x60;: Top field first   - &#x60;BOTTOM_FIELD_FIRST&#x60;: Bottom field first 
   * @return interlacedFieldOrderMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERLACED_FIELD_ORDER_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterlacedFieldOrderModeEnum getInterlacedFieldOrderMode() {
    return interlacedFieldOrderMode;
  }


  @JsonProperty(JSON_PROPERTY_INTERLACED_FIELD_ORDER_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterlacedFieldOrderMode(@javax.annotation.Nullable InterlacedFieldOrderModeEnum interlacedFieldOrderMode) {
    this.interlacedFieldOrderMode = interlacedFieldOrderMode;
  }

  public VideoProcessingConfigurationOptionsFilterSettings normalizedCropCoordinates(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates normalizedCropCoordinates) {
    
    this.normalizedCropCoordinates = normalizedCropCoordinates;
    return this;
  }

  /**
   * Get normalizedCropCoordinates
   * @return normalizedCropCoordinates
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NORMALIZED_CROP_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates getNormalizedCropCoordinates() {
    return normalizedCropCoordinates;
  }


  @JsonProperty(JSON_PROPERTY_NORMALIZED_CROP_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNormalizedCropCoordinates(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsNormalizedCropCoordinates normalizedCropCoordinates) {
    this.normalizedCropCoordinates = normalizedCropCoordinates;
  }

  public VideoProcessingConfigurationOptionsFilterSettings cropRectangle(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsCropRectangle cropRectangle) {
    
    this.cropRectangle = cropRectangle;
    return this;
  }

  /**
   * Get cropRectangle
   * @return cropRectangle
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CROP_RECTANGLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilterSettingsCropRectangle getCropRectangle() {
    return cropRectangle;
  }


  @JsonProperty(JSON_PROPERTY_CROP_RECTANGLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCropRectangle(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsCropRectangle cropRectangle) {
    this.cropRectangle = cropRectangle;
  }

  public VideoProcessingConfigurationOptionsFilterSettings faceForward(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFaceForward faceForward) {
    
    this.faceForward = faceForward;
    return this;
  }

  /**
   * Get faceForward
   * @return faceForward
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FACE_FORWARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward getFaceForward() {
    return faceForward;
  }


  @JsonProperty(JSON_PROPERTY_FACE_FORWARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFaceForward(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFaceForward faceForward) {
    this.faceForward = faceForward;
  }

  public VideoProcessingConfigurationOptionsFilterSettings dvres2Variant(@javax.annotation.Nullable Dvres2VariantEnum dvres2Variant) {
    
    this.dvres2Variant = dvres2Variant;
    return this;
  }

  /**
   * Specifies the Pixop Deep Restoration 2 variant used when &#x60;filters.scaler&#x60; is set to &#x60;DVRES2&#x60;. For instance:   - &#x60;GENERIC&#x60;: Default if not specified. Denoises, deblurs and eliminates compression artifacts, then upscales while injecting details. For any quality digital camera recorded video.    - &#x60;FINE_TUNING&#x60;: Eliminates compression artifacts, then upscales while injecting details. A relatively conservative, fine-tuning mode as neither denoising nor any deblurring is performed. Primarily intended for higher production quality video.    - &#x60;SELFIE_STYLE&#x60;: Denoises and eliminates compression artifacts, then upscales while injecting details. Intended for selfie-style recordings captured on smaller sensors such as web cameras or mobile phones. 
   * @return dvres2Variant
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DVRES2_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Dvres2VariantEnum getDvres2Variant() {
    return dvres2Variant;
  }


  @JsonProperty(JSON_PROPERTY_DVRES2_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDvres2Variant(@javax.annotation.Nullable Dvres2VariantEnum dvres2Variant) {
    this.dvres2Variant = dvres2Variant;
  }

  public VideoProcessingConfigurationOptionsFilterSettings clarityBoost(@javax.annotation.Nullable ClarityBoostEnum clarityBoost) {
    
    this.clarityBoost = clarityBoost;
    return this;
  }

  /**
   * Defines the level of contrast enhancement applied when &#x60;filters.scaler&#x60; is set to &#x60;PABSR1&#x60;.  This setting controls how much clarity and vibrancy is added to the video. 
   * @return clarityBoost
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLARITY_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ClarityBoostEnum getClarityBoost() {
    return clarityBoost;
  }


  @JsonProperty(JSON_PROPERTY_CLARITY_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClarityBoost(@javax.annotation.Nullable ClarityBoostEnum clarityBoost) {
    this.clarityBoost = clarityBoost;
  }

  public VideoProcessingConfigurationOptionsFilterSettings resolution(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsResolution resolution) {
    
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilterSettingsResolution getResolution() {
    return resolution;
  }


  @JsonProperty(JSON_PROPERTY_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResolution(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsResolution resolution) {
    this.resolution = resolution;
  }

  public VideoProcessingConfigurationOptionsFilterSettings frameRate(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFrameRate frameRate) {
    
    this.frameRate = frameRate;
    return this;
  }

  /**
   * Get frameRate
   * @return frameRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate getFrameRate() {
    return frameRate;
  }


  @JsonProperty(JSON_PROPERTY_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrameRate(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFrameRate frameRate) {
    this.frameRate = frameRate;
  }

  public VideoProcessingConfigurationOptionsFilterSettings filmGrain(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFilmGrain filmGrain) {
    
    this.filmGrain = filmGrain;
    return this;
  }

  /**
   * Get filmGrain
   * @return filmGrain
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILM_GRAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain getFilmGrain() {
    return filmGrain;
  }


  @JsonProperty(JSON_PROPERTY_FILM_GRAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilmGrain(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettingsFilmGrain filmGrain) {
    this.filmGrain = filmGrain;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettings videoProcessingConfigurationOptionsFilterSettings = (VideoProcessingConfigurationOptionsFilterSettings) o;
    return Objects.equals(this.interlacedFieldOrderMode, videoProcessingConfigurationOptionsFilterSettings.interlacedFieldOrderMode) &&
        Objects.equals(this.normalizedCropCoordinates, videoProcessingConfigurationOptionsFilterSettings.normalizedCropCoordinates) &&
        Objects.equals(this.cropRectangle, videoProcessingConfigurationOptionsFilterSettings.cropRectangle) &&
        Objects.equals(this.faceForward, videoProcessingConfigurationOptionsFilterSettings.faceForward) &&
        Objects.equals(this.dvres2Variant, videoProcessingConfigurationOptionsFilterSettings.dvres2Variant) &&
        Objects.equals(this.clarityBoost, videoProcessingConfigurationOptionsFilterSettings.clarityBoost) &&
        Objects.equals(this.resolution, videoProcessingConfigurationOptionsFilterSettings.resolution) &&
        Objects.equals(this.frameRate, videoProcessingConfigurationOptionsFilterSettings.frameRate) &&
        Objects.equals(this.filmGrain, videoProcessingConfigurationOptionsFilterSettings.filmGrain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interlacedFieldOrderMode, normalizedCropCoordinates, cropRectangle, faceForward, dvres2Variant, clarityBoost, resolution, frameRate, filmGrain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettings {\n");
    sb.append("    interlacedFieldOrderMode: ").append(toIndentedString(interlacedFieldOrderMode)).append("\n");
    sb.append("    normalizedCropCoordinates: ").append(toIndentedString(normalizedCropCoordinates)).append("\n");
    sb.append("    cropRectangle: ").append(toIndentedString(cropRectangle)).append("\n");
    sb.append("    faceForward: ").append(toIndentedString(faceForward)).append("\n");
    sb.append("    dvres2Variant: ").append(toIndentedString(dvres2Variant)).append("\n");
    sb.append("    clarityBoost: ").append(toIndentedString(clarityBoost)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    filmGrain: ").append(toIndentedString(filmGrain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `interlacedFieldOrderMode` to the URL query string
    if (getInterlacedFieldOrderMode() != null) {
      try {
        joiner.add(String.format("%sinterlacedFieldOrderMode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInterlacedFieldOrderMode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `normalizedCropCoordinates` to the URL query string
    if (getNormalizedCropCoordinates() != null) {
      joiner.add(getNormalizedCropCoordinates().toUrlQueryString(prefix + "normalizedCropCoordinates" + suffix));
    }

    // add `cropRectangle` to the URL query string
    if (getCropRectangle() != null) {
      joiner.add(getCropRectangle().toUrlQueryString(prefix + "cropRectangle" + suffix));
    }

    // add `faceForward` to the URL query string
    if (getFaceForward() != null) {
      joiner.add(getFaceForward().toUrlQueryString(prefix + "faceForward" + suffix));
    }

    // add `dvres2Variant` to the URL query string
    if (getDvres2Variant() != null) {
      try {
        joiner.add(String.format("%sdvres2Variant%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDvres2Variant()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `clarityBoost` to the URL query string
    if (getClarityBoost() != null) {
      try {
        joiner.add(String.format("%sclarityBoost%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClarityBoost()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resolution` to the URL query string
    if (getResolution() != null) {
      joiner.add(getResolution().toUrlQueryString(prefix + "resolution" + suffix));
    }

    // add `frameRate` to the URL query string
    if (getFrameRate() != null) {
      joiner.add(getFrameRate().toUrlQueryString(prefix + "frameRate" + suffix));
    }

    // add `filmGrain` to the URL query string
    if (getFilmGrain() != null) {
      joiner.add(getFilmGrain().toUrlQueryString(prefix + "filmGrain" + suffix));
    }

    return joiner.toString();
  }

}

