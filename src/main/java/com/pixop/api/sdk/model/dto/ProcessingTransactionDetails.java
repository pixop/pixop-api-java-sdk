/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.Product;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Additional details specific to a processing transaction.
 */
@JsonPropertyOrder({
  ProcessingTransactionDetails.JSON_PROPERTY_SOURCE_VIDEO_ID,
  ProcessingTransactionDetails.JSON_PROPERTY_PRODUCTS,
  ProcessingTransactionDetails.JSON_PROPERTY_DISCOUNT_PERCENTAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class ProcessingTransactionDetails {
  public static final String JSON_PROPERTY_SOURCE_VIDEO_ID = "sourceVideoId";
  @javax.annotation.Nullable
  private UUID sourceVideoId;

  public static final String JSON_PROPERTY_PRODUCTS = "products";
  @javax.annotation.Nullable
  private List<Product> products = new ArrayList<>();

  public static final String JSON_PROPERTY_DISCOUNT_PERCENTAGE = "discountPercentage";
  @javax.annotation.Nullable
  private BigDecimal discountPercentage;

  public ProcessingTransactionDetails() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public ProcessingTransactionDetails(
    @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE) BigDecimal discountPercentage
  ) {
    this();
    this.discountPercentage = discountPercentage;
  }

  public ProcessingTransactionDetails sourceVideoId(@javax.annotation.Nullable UUID sourceVideoId) {
    
    this.sourceVideoId = sourceVideoId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return sourceVideoId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_VIDEO_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getSourceVideoId() {
    return sourceVideoId;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_VIDEO_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceVideoId(@javax.annotation.Nullable UUID sourceVideoId) {
    this.sourceVideoId = sourceVideoId;
  }

  public ProcessingTransactionDetails products(@javax.annotation.Nullable List<Product> products) {
    
    this.products = products;
    return this;
  }

  public ProcessingTransactionDetails addProductsItem(Product productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * The list of products associated with the transaction.
   * @return products
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Product> getProducts() {
    return products;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProducts(@javax.annotation.Nullable List<Product> products) {
    this.products = products;
  }

  /**
   * Represents the discount percentage applied to a cost or product. For example, 3.3 indicates a 3.3% discount.
   * minimum: 0
   * maximum: 100
   * @return discountPercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDiscountPercentage() {
    return discountPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingTransactionDetails processingTransactionDetails = (ProcessingTransactionDetails) o;
    return Objects.equals(this.sourceVideoId, processingTransactionDetails.sourceVideoId) &&
        Objects.equals(this.products, processingTransactionDetails.products) &&
        Objects.equals(this.discountPercentage, processingTransactionDetails.discountPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceVideoId, products, discountPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingTransactionDetails {\n");
    sb.append("    sourceVideoId: ").append(toIndentedString(sourceVideoId)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    discountPercentage: ").append(toIndentedString(discountPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `sourceVideoId` to the URL query string
    if (getSourceVideoId() != null) {
      try {
        joiner.add(String.format("%ssourceVideoId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceVideoId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `products` to the URL query string
    if (getProducts() != null) {
      for (int i = 0; i < getProducts().size(); i++) {
        if (getProducts().get(i) != null) {
          joiner.add(getProducts().get(i).toUrlQueryString(String.format("%sproducts%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `discountPercentage` to the URL query string
    if (getDiscountPercentage() != null) {
      try {
        joiner.add(String.format("%sdiscountPercentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDiscountPercentage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

