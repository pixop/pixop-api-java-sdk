/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * S3InputLocation
 */
@JsonPropertyOrder({
  S3InputLocation.JSON_PROPERTY_ID,
  S3InputLocation.JSON_PROPERTY_CREATED_AT,
  S3InputLocation.JSON_PROPERTY_UPDATED_AT,
  S3InputLocation.JSON_PROPERTY_NAME,
  S3InputLocation.JSON_PROPERTY_BUCKET,
  S3InputLocation.JSON_PROPERTY_ACCESS_KEY_HIDDEN,
  S3InputLocation.JSON_PROPERTY_SECRET_ACCESS_KEY_HIDDEN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class S3InputLocation {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_BUCKET = "bucket";
  @javax.annotation.Nonnull
  private String bucket;

  public static final String JSON_PROPERTY_ACCESS_KEY_HIDDEN = "accessKeyHidden";
  @javax.annotation.Nonnull
  private String accessKeyHidden;

  public static final String JSON_PROPERTY_SECRET_ACCESS_KEY_HIDDEN = "secretAccessKeyHidden";
  @javax.annotation.Nonnull
  private String secretAccessKeyHidden;

  public S3InputLocation() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public S3InputLocation(
    @JsonProperty(JSON_PROPERTY_CREATED_AT) OffsetDateTime createdAt, 
    @JsonProperty(JSON_PROPERTY_UPDATED_AT) OffsetDateTime updatedAt, 
    @JsonProperty(JSON_PROPERTY_ACCESS_KEY_HIDDEN) String accessKeyHidden, 
    @JsonProperty(JSON_PROPERTY_SECRET_ACCESS_KEY_HIDDEN) String secretAccessKeyHidden
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.accessKeyHidden = accessKeyHidden;
    this.secretAccessKeyHidden = secretAccessKeyHidden;
  }

  public S3InputLocation id(@javax.annotation.Nonnull UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }

  /**
   * Date and time when the object was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Date and time when the object was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public S3InputLocation name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * A user-defined name to associate with the input location. Helps in organizing and identifying various input locations.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  public S3InputLocation bucket(@javax.annotation.Nonnull String bucket) {
    
    this.bucket = bucket;
    return this;
  }

  /**
   * The name of the S3 bucket. Bucket names must comply with the rules for DNS-compliant names, with a length between 3 and 63 characters.
   * @return bucket
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUCKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBucket() {
    return bucket;
  }


  @JsonProperty(JSON_PROPERTY_BUCKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBucket(@javax.annotation.Nonnull String bucket) {
    this.bucket = bucket;
  }

  /**
   * A secret string where only the last three characters are visible, while the rest are masked for security purposes.  Typically used for securely displaying sensitive values such as API keys. 
   * @return accessKeyHidden
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCESS_KEY_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccessKeyHidden() {
    return accessKeyHidden;
  }



  /**
   * A secret string where only the last three characters are visible, while the rest are masked for security purposes.  Typically used for securely displaying sensitive values such as API keys. 
   * @return secretAccessKeyHidden
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SECRET_ACCESS_KEY_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSecretAccessKeyHidden() {
    return secretAccessKeyHidden;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3InputLocation s3InputLocation = (S3InputLocation) o;
    return Objects.equals(this.id, s3InputLocation.id) &&
        Objects.equals(this.createdAt, s3InputLocation.createdAt) &&
        Objects.equals(this.updatedAt, s3InputLocation.updatedAt) &&
        Objects.equals(this.name, s3InputLocation.name) &&
        Objects.equals(this.bucket, s3InputLocation.bucket) &&
        Objects.equals(this.accessKeyHidden, s3InputLocation.accessKeyHidden) &&
        Objects.equals(this.secretAccessKeyHidden, s3InputLocation.secretAccessKeyHidden);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, updatedAt, name, bucket, accessKeyHidden, secretAccessKeyHidden);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3InputLocation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    accessKeyHidden: ").append(toIndentedString(accessKeyHidden)).append("\n");
    sb.append("    secretAccessKeyHidden: ").append(toIndentedString(secretAccessKeyHidden)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      try {
        joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `bucket` to the URL query string
    if (getBucket() != null) {
      try {
        joiner.add(String.format("%sbucket%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBucket()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `accessKeyHidden` to the URL query string
    if (getAccessKeyHidden() != null) {
      try {
        joiner.add(String.format("%saccessKeyHidden%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAccessKeyHidden()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `secretAccessKeyHidden` to the URL query string
    if (getSecretAccessKeyHidden() != null) {
      try {
        joiner.add(String.format("%ssecretAccessKeyHidden%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecretAccessKeyHidden()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

