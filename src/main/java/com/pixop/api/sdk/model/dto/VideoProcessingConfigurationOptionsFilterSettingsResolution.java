/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Defines the resolution settings when &#x60;filters.scaler&#x60; is applied.  If &#x60;tag&#x60; is specified, &#x60;width&#x60; and &#x60;height&#x60; are ignored.  When only one of &#x60;width&#x60; or &#x60;height&#x60; is provided, the other is determined based on the specified &#x60;aspectRatioTag&#x60;.  If both &#x60;width&#x60; and &#x60;height&#x60; are set, &#x60;aspectRatioTag&#x60; is ignored.  If neither &#x60;tag&#x60; nor &#x60;aspectRatioTag&#x60; is specified, both &#x60;width&#x60; and &#x60;height&#x60; must be defined. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsFilterSettingsResolution.JSON_PROPERTY_TAG,
  VideoProcessingConfigurationOptionsFilterSettingsResolution.JSON_PROPERTY_WIDTH,
  VideoProcessingConfigurationOptionsFilterSettingsResolution.JSON_PROPERTY_HEIGHT,
  VideoProcessingConfigurationOptionsFilterSettingsResolution.JSON_PROPERTY_ASPECT_RATIO_TAG
})
@JsonTypeName("VideoProcessingConfigurationOptions_filterSettings_resolution")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsFilterSettingsResolution {
  /**
   * Presets for resolution scaling, allowing quick selection of standard resolutions or scaling factors. For instance:   - STANDARD_HD: 1280 x 720 pixels.   - FULL_HD: 1920 x 1080 pixels.   - UHD_4K: 3840 x 2160 pixels.   - UHD_8K: 7680 x 4320 pixels.   - 1X: Source video frame dimensions.   - 2X: Source video frame dimensions * 2   - 3X: Source video frame dimensions * 3   - 4X: Source video frame dimensions * 4 
   */
  public enum TagEnum {
    STANDARD_HD(String.valueOf("STANDARD_HD")),
    
    FULL_HD(String.valueOf("FULL_HD")),
    
    UHD_4_K(String.valueOf("UHD_4K")),
    
    UHD_8_K(String.valueOf("UHD_8K")),
    
    _1_X(String.valueOf("1X")),
    
    _2_X(String.valueOf("2X")),
    
    _3_X(String.valueOf("3X")),
    
    _4_X(String.valueOf("4X")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    TagEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TagEnum fromValue(String value) {
      for (TagEnum b : TagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_TAG = "tag";
  @javax.annotation.Nullable
  private TagEnum tag;

  public static final String JSON_PROPERTY_WIDTH = "width";
  @javax.annotation.Nullable
  private Integer width;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  @javax.annotation.Nullable
  private Integer height;

  /**
   * Defines the aspect ratio used for video scaling. This setting determines how width and height adjustments maintain the video’s visual proportions. Available options:   - &#x60;DISPLAY&#x60;: Uses the display aspect ratio (DAR) from the source file&#39;s metadata. If DAR is not available, the storage aspect ratio is used instead.   - &#x60;STORAGE&#x60;: Uses the storage aspect ratio of the source file.   - &#x60;PAR_PRESERVED&#x60;: Preserves the pixel aspect ratio. Useful when &#x60;filters.reshaper&#x60; is also applied.   - &#x60;16:9&#x60;: Enforces a 16:9 aspect ratio.   - &#x60;4:3&#x60;: Enforces a 4:3 aspect ratio. 
   */
  public enum AspectRatioTagEnum {
    DISPLAY(String.valueOf("DISPLAY")),
    
    STORAGE(String.valueOf("STORAGE")),
    
    PAR_PRESERVED(String.valueOf("PAR_PRESERVED")),
    
    _16_9(String.valueOf("16:9")),
    
    _4_3(String.valueOf("4:3")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    AspectRatioTagEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AspectRatioTagEnum fromValue(String value) {
      for (AspectRatioTagEnum b : AspectRatioTagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_ASPECT_RATIO_TAG = "aspectRatioTag";
  @javax.annotation.Nullable
  private AspectRatioTagEnum aspectRatioTag;

  public VideoProcessingConfigurationOptionsFilterSettingsResolution() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsResolution tag(@javax.annotation.Nullable TagEnum tag) {
    
    this.tag = tag;
    return this;
  }

  /**
   * Presets for resolution scaling, allowing quick selection of standard resolutions or scaling factors. For instance:   - STANDARD_HD: 1280 x 720 pixels.   - FULL_HD: 1920 x 1080 pixels.   - UHD_4K: 3840 x 2160 pixels.   - UHD_8K: 7680 x 4320 pixels.   - 1X: Source video frame dimensions.   - 2X: Source video frame dimensions * 2   - 3X: Source video frame dimensions * 3   - 4X: Source video frame dimensions * 4 
   * @return tag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TagEnum getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(@javax.annotation.Nullable TagEnum tag) {
    this.tag = tag;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsResolution width(@javax.annotation.Nullable Integer width) {
    
    this.width = width;
    return this;
  }

  /**
   * Width of the scaled video in pixels.
   * minimum: 16
   * maximum: 7680
   * @return width
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(@javax.annotation.Nullable Integer width) {
    this.width = width;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsResolution height(@javax.annotation.Nullable Integer height) {
    
    this.height = height;
    return this;
  }

  /**
   * Height of the scaled video in pixels.
   * minimum: 16
   * maximum: 4320
   * @return height
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(@javax.annotation.Nullable Integer height) {
    this.height = height;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsResolution aspectRatioTag(@javax.annotation.Nullable AspectRatioTagEnum aspectRatioTag) {
    
    this.aspectRatioTag = aspectRatioTag;
    return this;
  }

  /**
   * Defines the aspect ratio used for video scaling. This setting determines how width and height adjustments maintain the video’s visual proportions. Available options:   - &#x60;DISPLAY&#x60;: Uses the display aspect ratio (DAR) from the source file&#39;s metadata. If DAR is not available, the storage aspect ratio is used instead.   - &#x60;STORAGE&#x60;: Uses the storage aspect ratio of the source file.   - &#x60;PAR_PRESERVED&#x60;: Preserves the pixel aspect ratio. Useful when &#x60;filters.reshaper&#x60; is also applied.   - &#x60;16:9&#x60;: Enforces a 16:9 aspect ratio.   - &#x60;4:3&#x60;: Enforces a 4:3 aspect ratio. 
   * @return aspectRatioTag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASPECT_RATIO_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AspectRatioTagEnum getAspectRatioTag() {
    return aspectRatioTag;
  }


  @JsonProperty(JSON_PROPERTY_ASPECT_RATIO_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAspectRatioTag(@javax.annotation.Nullable AspectRatioTagEnum aspectRatioTag) {
    this.aspectRatioTag = aspectRatioTag;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsResolution videoProcessingConfigurationOptionsFilterSettingsResolution = (VideoProcessingConfigurationOptionsFilterSettingsResolution) o;
    return Objects.equals(this.tag, videoProcessingConfigurationOptionsFilterSettingsResolution.tag) &&
        Objects.equals(this.width, videoProcessingConfigurationOptionsFilterSettingsResolution.width) &&
        Objects.equals(this.height, videoProcessingConfigurationOptionsFilterSettingsResolution.height) &&
        Objects.equals(this.aspectRatioTag, videoProcessingConfigurationOptionsFilterSettingsResolution.aspectRatioTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, width, height, aspectRatioTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsResolution {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    aspectRatioTag: ").append(toIndentedString(aspectRatioTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tag` to the URL query string
    if (getTag() != null) {
      try {
        joiner.add(String.format("%stag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTag()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `width` to the URL query string
    if (getWidth() != null) {
      try {
        joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `height` to the URL query string
    if (getHeight() != null) {
      try {
        joiner.add(String.format("%sheight%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeight()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `aspectRatioTag` to the URL query string
    if (getAspectRatioTag() != null) {
      try {
        joiner.add(String.format("%saspectRatioTag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAspectRatioTag()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

