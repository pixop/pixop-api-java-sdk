/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Defines the optional inverse tone-mapper and its settings
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper.JSON_PROPERTY_ALGORITHM,
  VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper.JSON_PROPERTY_OUTPUT_NITS,
  VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper.JSON_PROPERTY_SATURATION_BOOST
})
@JsonTypeName("VideoProcessingConfigurationOptions_processingSettings_outputColorSpaceConversion_inverseToneMapper")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper {
  /**
   * Specifies the inverse tone-mapping (ITM) algorithm to be applied for converting Standard Dynamic Range (SDR) to High Dynamic Range (HDR).  Available algorithms: - &#x60;INFINITEHDR&#x60;: Pixop InfiniteHDR — Pixop&#39;s ML-based SDR-HDR filter with over-exposure compensation - &#x60;LINEAR&#x60;: Linear stretch of the reference gamut - &#x60;HABLE&#x60;: Preserve dark and bright details - &#x60;REINHARD&#x60;: Simple curve for brightness preservation - &#x60;MOBIUS&#x60;: Contrast and color retention for in-range material 
   */
  public enum AlgorithmEnum {
    INFINITEHDR(String.valueOf("INFINITEHDR")),
    
    LINEAR(String.valueOf("LINEAR")),
    
    HABLE(String.valueOf("HABLE")),
    
    REINHARD(String.valueOf("REINHARD")),
    
    MOBIUS(String.valueOf("MOBIUS")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    AlgorithmEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AlgorithmEnum fromValue(String value) {
      for (AlgorithmEnum b : AlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
  @javax.annotation.Nonnull
  private AlgorithmEnum algorithm;

  public static final String JSON_PROPERTY_OUTPUT_NITS = "outputNits";
  @javax.annotation.Nullable
  private BigDecimal outputNits = new BigDecimal("100.0");

  public static final String JSON_PROPERTY_SATURATION_BOOST = "saturationBoost";
  @javax.annotation.Nullable
  private BigDecimal saturationBoost = new BigDecimal("1.25");

  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper() {
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper algorithm(@javax.annotation.Nonnull AlgorithmEnum algorithm) {
    
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Specifies the inverse tone-mapping (ITM) algorithm to be applied for converting Standard Dynamic Range (SDR) to High Dynamic Range (HDR).  Available algorithms: - &#x60;INFINITEHDR&#x60;: Pixop InfiniteHDR — Pixop&#39;s ML-based SDR-HDR filter with over-exposure compensation - &#x60;LINEAR&#x60;: Linear stretch of the reference gamut - &#x60;HABLE&#x60;: Preserve dark and bright details - &#x60;REINHARD&#x60;: Simple curve for brightness preservation - &#x60;MOBIUS&#x60;: Contrast and color retention for in-range material 
   * @return algorithm
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AlgorithmEnum getAlgorithm() {
    return algorithm;
  }


  @JsonProperty(JSON_PROPERTY_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAlgorithm(@javax.annotation.Nonnull AlgorithmEnum algorithm) {
    this.algorithm = algorithm;
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper outputNits(@javax.annotation.Nullable BigDecimal outputNits) {
    
    this.outputNits = outputNits;
    return this;
  }

  /**
   * Defines the output brightness in nits of the inverse tone-mapping operation. Not used by the &#x60;INFINITEHDR&#x60; algorithm.
   * minimum: 0.0
   * maximum: 10000.0
   * @return outputNits
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_NITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOutputNits() {
    return outputNits;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_NITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputNits(@javax.annotation.Nullable BigDecimal outputNits) {
    this.outputNits = outputNits;
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper saturationBoost(@javax.annotation.Nullable BigDecimal saturationBoost) {
    
    this.saturationBoost = saturationBoost;
    return this;
  }

  /**
   * Saturation boost factor used exclusively by the &#x60;INFINITEHDR&#x60; algorithm. A higher value increases color saturation, enhancing vibrancy.
   * minimum: 0.0
   * @return saturationBoost
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SATURATION_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSaturationBoost() {
    return saturationBoost;
  }


  @JsonProperty(JSON_PROPERTY_SATURATION_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaturationBoost(@javax.annotation.Nullable BigDecimal saturationBoost) {
    this.saturationBoost = saturationBoost;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper = (VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper) o;
    return Objects.equals(this.algorithm, videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper.algorithm) &&
        Objects.equals(this.outputNits, videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper.outputNits) &&
        Objects.equals(this.saturationBoost, videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper.saturationBoost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, outputNits, saturationBoost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    outputNits: ").append(toIndentedString(outputNits)).append("\n");
    sb.append("    saturationBoost: ").append(toIndentedString(saturationBoost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `algorithm` to the URL query string
    if (getAlgorithm() != null) {
      try {
        joiner.add(String.format("%salgorithm%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlgorithm()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `outputNits` to the URL query string
    if (getOutputNits() != null) {
      try {
        joiner.add(String.format("%soutputNits%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputNits()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `saturationBoost` to the URL query string
    if (getSaturationBoost() != null) {
      try {
        joiner.add(String.format("%ssaturationBoost%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSaturationBoost()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

