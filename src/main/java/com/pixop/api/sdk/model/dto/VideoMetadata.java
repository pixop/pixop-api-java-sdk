/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.AspectRatio;
import com.pixop.api.sdk.model.dto.FrameRate;
import com.pixop.api.sdk.model.dto.VideoScanning;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Metadata describing the properties and characteristics of a video file.
 */
@JsonPropertyOrder({
  VideoMetadata.JSON_PROPERTY_CONTAINER_NAME,
  VideoMetadata.JSON_PROPERTY_LONG_CONTAINER_NAME,
  VideoMetadata.JSON_PROPERTY_CODEC_NAME,
  VideoMetadata.JSON_PROPERTY_LONG_CODEC_NAME,
  VideoMetadata.JSON_PROPERTY_PIXEL_FORMAT_NAME,
  VideoMetadata.JSON_PROPERTY_PRIMARY_BIT_DEPTH,
  VideoMetadata.JSON_PROPERTY_FRAME_WIDTH,
  VideoMetadata.JSON_PROPERTY_FRAME_HEIGHT,
  VideoMetadata.JSON_PROPERTY_DISPLAY_ASPECT_RATIO,
  VideoMetadata.JSON_PROPERTY_SCANNING,
  VideoMetadata.JSON_PROPERTY_AVERAGE_FRAME_RATE,
  VideoMetadata.JSON_PROPERTY_DURATION_IN_MILLIS,
  VideoMetadata.JSON_PROPERTY_TOTAL_FRAMES,
  VideoMetadata.JSON_PROPERTY_SIZE,
  VideoMetadata.JSON_PROPERTY_VIDEO_STREAM_SIZE,
  VideoMetadata.JSON_PROPERTY_COLOR_RANGE_NAME,
  VideoMetadata.JSON_PROPERTY_COLOR_SPACE_NAME,
  VideoMetadata.JSON_PROPERTY_COLOR_TRANSFER_NAME,
  VideoMetadata.JSON_PROPERTY_COLOR_PRIMARIES_NAME,
  VideoMetadata.JSON_PROPERTY_HDR_STANDARD_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoMetadata {
  public static final String JSON_PROPERTY_CONTAINER_NAME = "containerName";
  @javax.annotation.Nullable
  private String containerName;

  public static final String JSON_PROPERTY_LONG_CONTAINER_NAME = "longContainerName";
  @javax.annotation.Nullable
  private String longContainerName;

  public static final String JSON_PROPERTY_CODEC_NAME = "codecName";
  @javax.annotation.Nullable
  private String codecName;

  public static final String JSON_PROPERTY_LONG_CODEC_NAME = "longCodecName";
  @javax.annotation.Nullable
  private String longCodecName;

  public static final String JSON_PROPERTY_PIXEL_FORMAT_NAME = "pixelFormatName";
  @javax.annotation.Nullable
  private String pixelFormatName;

  public static final String JSON_PROPERTY_PRIMARY_BIT_DEPTH = "primaryBitDepth";
  @javax.annotation.Nullable
  private Integer primaryBitDepth;

  public static final String JSON_PROPERTY_FRAME_WIDTH = "frameWidth";
  @javax.annotation.Nullable
  private Integer frameWidth;

  public static final String JSON_PROPERTY_FRAME_HEIGHT = "frameHeight";
  @javax.annotation.Nullable
  private Integer frameHeight;

  public static final String JSON_PROPERTY_DISPLAY_ASPECT_RATIO = "displayAspectRatio";
  @javax.annotation.Nullable
  private AspectRatio displayAspectRatio;

  public static final String JSON_PROPERTY_SCANNING = "scanning";
  @javax.annotation.Nullable
  private VideoScanning scanning;

  public static final String JSON_PROPERTY_AVERAGE_FRAME_RATE = "averageFrameRate";
  @javax.annotation.Nullable
  private FrameRate averageFrameRate;

  public static final String JSON_PROPERTY_DURATION_IN_MILLIS = "durationInMillis";
  @javax.annotation.Nullable
  private Long durationInMillis;

  public static final String JSON_PROPERTY_TOTAL_FRAMES = "totalFrames";
  @javax.annotation.Nullable
  private Integer totalFrames;

  public static final String JSON_PROPERTY_SIZE = "size";
  @javax.annotation.Nullable
  private Long size;

  public static final String JSON_PROPERTY_VIDEO_STREAM_SIZE = "videoStreamSize";
  @javax.annotation.Nullable
  private Long videoStreamSize;

  public static final String JSON_PROPERTY_COLOR_RANGE_NAME = "colorRangeName";
  @javax.annotation.Nullable
  private String colorRangeName;

  public static final String JSON_PROPERTY_COLOR_SPACE_NAME = "colorSpaceName";
  @javax.annotation.Nullable
  private String colorSpaceName;

  public static final String JSON_PROPERTY_COLOR_TRANSFER_NAME = "colorTransferName";
  @javax.annotation.Nullable
  private String colorTransferName;

  public static final String JSON_PROPERTY_COLOR_PRIMARIES_NAME = "colorPrimariesName";
  @javax.annotation.Nullable
  private String colorPrimariesName;

  public static final String JSON_PROPERTY_HDR_STANDARD_NAME = "hdrStandardName";
  @javax.annotation.Nullable
  private String hdrStandardName;

  public VideoMetadata() {
  }

  public VideoMetadata containerName(@javax.annotation.Nullable String containerName) {
    
    this.containerName = containerName;
    return this;
  }

  /**
   * The short name of the video container format. Examples include mov, mxf, mp4, and mpegts.
   * @return containerName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContainerName() {
    return containerName;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainerName(@javax.annotation.Nullable String containerName) {
    this.containerName = containerName;
  }

  public VideoMetadata longContainerName(@javax.annotation.Nullable String longContainerName) {
    
    this.longContainerName = longContainerName;
    return this;
  }

  /**
   * The full name of the video container format. Examples include MPEG-4, QuickTime / MOV, and MPEG-TS (MPEG-2 Transport Stream).
   * @return longContainerName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONG_CONTAINER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLongContainerName() {
    return longContainerName;
  }


  @JsonProperty(JSON_PROPERTY_LONG_CONTAINER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongContainerName(@javax.annotation.Nullable String longContainerName) {
    this.longContainerName = longContainerName;
  }

  public VideoMetadata codecName(@javax.annotation.Nullable String codecName) {
    
    this.codecName = codecName;
    return this;
  }

  /**
   * The short name of the codec used for video encoding. Examples include h264, prores, dnxhd, mpeg2, hevc, xdcam, and ffv1.
   * @return codecName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODEC_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCodecName() {
    return codecName;
  }


  @JsonProperty(JSON_PROPERTY_CODEC_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodecName(@javax.annotation.Nullable String codecName) {
    this.codecName = codecName;
  }

  public VideoMetadata longCodecName(@javax.annotation.Nullable String longCodecName) {
    
    this.longCodecName = longCodecName;
    return this;
  }

  /**
   * The full name of the codec used for video encoding. Examples include H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10, H.265 / HEVC (High Efficiency Video Coding), and MPEG-2 video.
   * @return longCodecName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONG_CODEC_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLongCodecName() {
    return longCodecName;
  }


  @JsonProperty(JSON_PROPERTY_LONG_CODEC_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongCodecName(@javax.annotation.Nullable String longCodecName) {
    this.longCodecName = longCodecName;
  }

  public VideoMetadata pixelFormatName(@javax.annotation.Nullable String pixelFormatName) {
    
    this.pixelFormatName = pixelFormatName;
    return this;
  }

  /**
   * The name of the pixel format used in the video. Examples include yuv420p, yuv422p, yuv444p, yuv420p10le, yuv422p10le, and yuv444p10le.
   * @return pixelFormatName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PIXEL_FORMAT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPixelFormatName() {
    return pixelFormatName;
  }


  @JsonProperty(JSON_PROPERTY_PIXEL_FORMAT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPixelFormatName(@javax.annotation.Nullable String pixelFormatName) {
    this.pixelFormatName = pixelFormatName;
  }

  public VideoMetadata primaryBitDepth(@javax.annotation.Nullable Integer primaryBitDepth) {
    
    this.primaryBitDepth = primaryBitDepth;
    return this;
  }

  /**
   * The number of bits per pixel used to represent the color information. Examples include 8, 10, and 12.
   * @return primaryBitDepth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIMARY_BIT_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPrimaryBitDepth() {
    return primaryBitDepth;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_BIT_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryBitDepth(@javax.annotation.Nullable Integer primaryBitDepth) {
    this.primaryBitDepth = primaryBitDepth;
  }

  public VideoMetadata frameWidth(@javax.annotation.Nullable Integer frameWidth) {
    
    this.frameWidth = frameWidth;
    return this;
  }

  /**
   * The width of the video frame in pixels. Examples include 1920, 1280, and 720.
   * @return frameWidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRAME_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFrameWidth() {
    return frameWidth;
  }


  @JsonProperty(JSON_PROPERTY_FRAME_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrameWidth(@javax.annotation.Nullable Integer frameWidth) {
    this.frameWidth = frameWidth;
  }

  public VideoMetadata frameHeight(@javax.annotation.Nullable Integer frameHeight) {
    
    this.frameHeight = frameHeight;
    return this;
  }

  /**
   * The height of the video frame in pixels. Examples include 1080, 720, and 480.
   * @return frameHeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRAME_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFrameHeight() {
    return frameHeight;
  }


  @JsonProperty(JSON_PROPERTY_FRAME_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrameHeight(@javax.annotation.Nullable Integer frameHeight) {
    this.frameHeight = frameHeight;
  }

  public VideoMetadata displayAspectRatio(@javax.annotation.Nullable AspectRatio displayAspectRatio) {
    
    this.displayAspectRatio = displayAspectRatio;
    return this;
  }

  /**
   * The display aspect ratio of the video.
   * @return displayAspectRatio
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_ASPECT_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AspectRatio getDisplayAspectRatio() {
    return displayAspectRatio;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_ASPECT_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayAspectRatio(@javax.annotation.Nullable AspectRatio displayAspectRatio) {
    this.displayAspectRatio = displayAspectRatio;
  }

  public VideoMetadata scanning(@javax.annotation.Nullable VideoScanning scanning) {
    
    this.scanning = scanning;
    return this;
  }

  /**
   * The scanning type of the video, indicating whether it is progressive or interlaced.
   * @return scanning
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCANNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoScanning getScanning() {
    return scanning;
  }


  @JsonProperty(JSON_PROPERTY_SCANNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScanning(@javax.annotation.Nullable VideoScanning scanning) {
    this.scanning = scanning;
  }

  public VideoMetadata averageFrameRate(@javax.annotation.Nullable FrameRate averageFrameRate) {
    
    this.averageFrameRate = averageFrameRate;
    return this;
  }

  /**
   * The average frame rate of the video in frames per second.
   * @return averageFrameRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FrameRate getAverageFrameRate() {
    return averageFrameRate;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageFrameRate(@javax.annotation.Nullable FrameRate averageFrameRate) {
    this.averageFrameRate = averageFrameRate;
  }

  public VideoMetadata durationInMillis(@javax.annotation.Nullable Long durationInMillis) {
    
    this.durationInMillis = durationInMillis;
    return this;
  }

  /**
   * The duration of the video in milliseconds. Examples include 30000 for a 30-second video.
   * @return durationInMillis
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION_IN_MILLIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDurationInMillis() {
    return durationInMillis;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_IN_MILLIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationInMillis(@javax.annotation.Nullable Long durationInMillis) {
    this.durationInMillis = durationInMillis;
  }

  public VideoMetadata totalFrames(@javax.annotation.Nullable Integer totalFrames) {
    
    this.totalFrames = totalFrames;
    return this;
  }

  /**
   * The total number of frames in the video. Examples include 900 for a 30-second video at 30 fps.
   * @return totalFrames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_FRAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalFrames() {
    return totalFrames;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_FRAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalFrames(@javax.annotation.Nullable Integer totalFrames) {
    this.totalFrames = totalFrames;
  }

  public VideoMetadata size(@javax.annotation.Nullable Long size) {
    
    this.size = size;
    return this;
  }

  /**
   * The total size of the video file in bytes. Examples include 10485760 for a 10 MB video file.
   * @return size
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(@javax.annotation.Nullable Long size) {
    this.size = size;
  }

  public VideoMetadata videoStreamSize(@javax.annotation.Nullable Long videoStreamSize) {
    
    this.videoStreamSize = videoStreamSize;
    return this;
  }

  /**
   * The size of the video stream in bytes, excluding audio and metadata. Examples include 10485760 for a 10 MB video stream.
   * @return videoStreamSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIDEO_STREAM_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getVideoStreamSize() {
    return videoStreamSize;
  }


  @JsonProperty(JSON_PROPERTY_VIDEO_STREAM_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVideoStreamSize(@javax.annotation.Nullable Long videoStreamSize) {
    this.videoStreamSize = videoStreamSize;
  }

  public VideoMetadata colorRangeName(@javax.annotation.Nullable String colorRangeName) {
    
    this.colorRangeName = colorRangeName;
    return this;
  }

  /**
   * The name of the color range used in the video.
   * @return colorRangeName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_RANGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColorRangeName() {
    return colorRangeName;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_RANGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorRangeName(@javax.annotation.Nullable String colorRangeName) {
    this.colorRangeName = colorRangeName;
  }

  public VideoMetadata colorSpaceName(@javax.annotation.Nullable String colorSpaceName) {
    
    this.colorSpaceName = colorSpaceName;
    return this;
  }

  /**
   * The name of the color space used in the video.
   * @return colorSpaceName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_SPACE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColorSpaceName() {
    return colorSpaceName;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_SPACE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorSpaceName(@javax.annotation.Nullable String colorSpaceName) {
    this.colorSpaceName = colorSpaceName;
  }

  public VideoMetadata colorTransferName(@javax.annotation.Nullable String colorTransferName) {
    
    this.colorTransferName = colorTransferName;
    return this;
  }

  /**
   * The name of the color transfer function used in the video.
   * @return colorTransferName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_TRANSFER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColorTransferName() {
    return colorTransferName;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_TRANSFER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorTransferName(@javax.annotation.Nullable String colorTransferName) {
    this.colorTransferName = colorTransferName;
  }

  public VideoMetadata colorPrimariesName(@javax.annotation.Nullable String colorPrimariesName) {
    
    this.colorPrimariesName = colorPrimariesName;
    return this;
  }

  /**
   * The name of the color primaries used in the video.
   * @return colorPrimariesName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_PRIMARIES_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColorPrimariesName() {
    return colorPrimariesName;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_PRIMARIES_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorPrimariesName(@javax.annotation.Nullable String colorPrimariesName) {
    this.colorPrimariesName = colorPrimariesName;
  }

  public VideoMetadata hdrStandardName(@javax.annotation.Nullable String hdrStandardName) {
    
    this.hdrStandardName = hdrStandardName;
    return this;
  }

  /**
   * The name of the HDR standard used in the video, if applicable.
   * @return hdrStandardName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HDR_STANDARD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHdrStandardName() {
    return hdrStandardName;
  }


  @JsonProperty(JSON_PROPERTY_HDR_STANDARD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHdrStandardName(@javax.annotation.Nullable String hdrStandardName) {
    this.hdrStandardName = hdrStandardName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMetadata videoMetadata = (VideoMetadata) o;
    return Objects.equals(this.containerName, videoMetadata.containerName) &&
        Objects.equals(this.longContainerName, videoMetadata.longContainerName) &&
        Objects.equals(this.codecName, videoMetadata.codecName) &&
        Objects.equals(this.longCodecName, videoMetadata.longCodecName) &&
        Objects.equals(this.pixelFormatName, videoMetadata.pixelFormatName) &&
        Objects.equals(this.primaryBitDepth, videoMetadata.primaryBitDepth) &&
        Objects.equals(this.frameWidth, videoMetadata.frameWidth) &&
        Objects.equals(this.frameHeight, videoMetadata.frameHeight) &&
        Objects.equals(this.displayAspectRatio, videoMetadata.displayAspectRatio) &&
        Objects.equals(this.scanning, videoMetadata.scanning) &&
        Objects.equals(this.averageFrameRate, videoMetadata.averageFrameRate) &&
        Objects.equals(this.durationInMillis, videoMetadata.durationInMillis) &&
        Objects.equals(this.totalFrames, videoMetadata.totalFrames) &&
        Objects.equals(this.size, videoMetadata.size) &&
        Objects.equals(this.videoStreamSize, videoMetadata.videoStreamSize) &&
        Objects.equals(this.colorRangeName, videoMetadata.colorRangeName) &&
        Objects.equals(this.colorSpaceName, videoMetadata.colorSpaceName) &&
        Objects.equals(this.colorTransferName, videoMetadata.colorTransferName) &&
        Objects.equals(this.colorPrimariesName, videoMetadata.colorPrimariesName) &&
        Objects.equals(this.hdrStandardName, videoMetadata.hdrStandardName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerName, longContainerName, codecName, longCodecName, pixelFormatName, primaryBitDepth, frameWidth, frameHeight, displayAspectRatio, scanning, averageFrameRate, durationInMillis, totalFrames, size, videoStreamSize, colorRangeName, colorSpaceName, colorTransferName, colorPrimariesName, hdrStandardName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMetadata {\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    longContainerName: ").append(toIndentedString(longContainerName)).append("\n");
    sb.append("    codecName: ").append(toIndentedString(codecName)).append("\n");
    sb.append("    longCodecName: ").append(toIndentedString(longCodecName)).append("\n");
    sb.append("    pixelFormatName: ").append(toIndentedString(pixelFormatName)).append("\n");
    sb.append("    primaryBitDepth: ").append(toIndentedString(primaryBitDepth)).append("\n");
    sb.append("    frameWidth: ").append(toIndentedString(frameWidth)).append("\n");
    sb.append("    frameHeight: ").append(toIndentedString(frameHeight)).append("\n");
    sb.append("    displayAspectRatio: ").append(toIndentedString(displayAspectRatio)).append("\n");
    sb.append("    scanning: ").append(toIndentedString(scanning)).append("\n");
    sb.append("    averageFrameRate: ").append(toIndentedString(averageFrameRate)).append("\n");
    sb.append("    durationInMillis: ").append(toIndentedString(durationInMillis)).append("\n");
    sb.append("    totalFrames: ").append(toIndentedString(totalFrames)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    videoStreamSize: ").append(toIndentedString(videoStreamSize)).append("\n");
    sb.append("    colorRangeName: ").append(toIndentedString(colorRangeName)).append("\n");
    sb.append("    colorSpaceName: ").append(toIndentedString(colorSpaceName)).append("\n");
    sb.append("    colorTransferName: ").append(toIndentedString(colorTransferName)).append("\n");
    sb.append("    colorPrimariesName: ").append(toIndentedString(colorPrimariesName)).append("\n");
    sb.append("    hdrStandardName: ").append(toIndentedString(hdrStandardName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `containerName` to the URL query string
    if (getContainerName() != null) {
      try {
        joiner.add(String.format("%scontainerName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContainerName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `longContainerName` to the URL query string
    if (getLongContainerName() != null) {
      try {
        joiner.add(String.format("%slongContainerName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLongContainerName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `codecName` to the URL query string
    if (getCodecName() != null) {
      try {
        joiner.add(String.format("%scodecName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCodecName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `longCodecName` to the URL query string
    if (getLongCodecName() != null) {
      try {
        joiner.add(String.format("%slongCodecName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLongCodecName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `pixelFormatName` to the URL query string
    if (getPixelFormatName() != null) {
      try {
        joiner.add(String.format("%spixelFormatName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPixelFormatName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `primaryBitDepth` to the URL query string
    if (getPrimaryBitDepth() != null) {
      try {
        joiner.add(String.format("%sprimaryBitDepth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrimaryBitDepth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `frameWidth` to the URL query string
    if (getFrameWidth() != null) {
      try {
        joiner.add(String.format("%sframeWidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFrameWidth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `frameHeight` to the URL query string
    if (getFrameHeight() != null) {
      try {
        joiner.add(String.format("%sframeHeight%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFrameHeight()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `displayAspectRatio` to the URL query string
    if (getDisplayAspectRatio() != null) {
      joiner.add(getDisplayAspectRatio().toUrlQueryString(prefix + "displayAspectRatio" + suffix));
    }

    // add `scanning` to the URL query string
    if (getScanning() != null) {
      joiner.add(getScanning().toUrlQueryString(prefix + "scanning" + suffix));
    }

    // add `averageFrameRate` to the URL query string
    if (getAverageFrameRate() != null) {
      joiner.add(getAverageFrameRate().toUrlQueryString(prefix + "averageFrameRate" + suffix));
    }

    // add `durationInMillis` to the URL query string
    if (getDurationInMillis() != null) {
      try {
        joiner.add(String.format("%sdurationInMillis%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDurationInMillis()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalFrames` to the URL query string
    if (getTotalFrames() != null) {
      try {
        joiner.add(String.format("%stotalFrames%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalFrames()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `size` to the URL query string
    if (getSize() != null) {
      try {
        joiner.add(String.format("%ssize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `videoStreamSize` to the URL query string
    if (getVideoStreamSize() != null) {
      try {
        joiner.add(String.format("%svideoStreamSize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVideoStreamSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `colorRangeName` to the URL query string
    if (getColorRangeName() != null) {
      try {
        joiner.add(String.format("%scolorRangeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorRangeName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `colorSpaceName` to the URL query string
    if (getColorSpaceName() != null) {
      try {
        joiner.add(String.format("%scolorSpaceName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorSpaceName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `colorTransferName` to the URL query string
    if (getColorTransferName() != null) {
      try {
        joiner.add(String.format("%scolorTransferName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorTransferName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `colorPrimariesName` to the URL query string
    if (getColorPrimariesName() != null) {
      try {
        joiner.add(String.format("%scolorPrimariesName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorPrimariesName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hdrStandardName` to the URL query string
    if (getHdrStandardName() != null) {
      try {
        joiner.add(String.format("%shdrStandardName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHdrStandardName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

