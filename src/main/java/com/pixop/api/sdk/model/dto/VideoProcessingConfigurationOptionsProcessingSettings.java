/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Additional processing settings for input and output color space conversions, tone mapping, and fixed output resolutions.  These settings ensure precise control over colorimetry and dynamic range transformations during video processing. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptionsProcessingSettings {
  public static final String SERIALIZED_NAME_INPUT_COLOR_SPACE_CONVERSION = "inputColorSpaceConversion";
  @SerializedName(SERIALIZED_NAME_INPUT_COLOR_SPACE_CONVERSION)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion inputColorSpaceConversion;

  public static final String SERIALIZED_NAME_OUTPUT_COLOR_SPACE_CONVERSION = "outputColorSpaceConversion";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COLOR_SPACE_CONVERSION)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion outputColorSpaceConversion;

  /**
   * Enforces a fixed resolution for the processed output by cropping and/or padding the video as needed.  This is particularly useful for adapting content to standard formats like widescreen 16:9. Black borders are inserted in padded areas.  Available resolution presets: - &#x60;STANDARD_HD&#x60;: 1280 × 720 pixels - &#x60;FULL_HD&#x60;: 1920 × 1080 pixels - &#x60;UHD_4K&#x60;: 3840 × 2160 pixels - &#x60;UHD_8K&#x60;: 7680 × 4320 pixels 
   */
  @JsonAdapter(FixedOutputResolutionEnum.Adapter.class)
  public enum FixedOutputResolutionEnum {
    STANDARD_HD("STANDARD_HD"),
    
    FULL_HD("FULL_HD"),
    
    UHD_4_K("UHD_4K"),
    
    UHD_8_K("UHD_8K");

    private String value;

    FixedOutputResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FixedOutputResolutionEnum fromValue(String value) {
      for (FixedOutputResolutionEnum b : FixedOutputResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FixedOutputResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FixedOutputResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FixedOutputResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FixedOutputResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FixedOutputResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIXED_OUTPUT_RESOLUTION = "fixedOutputResolution";
  @SerializedName(SERIALIZED_NAME_FIXED_OUTPUT_RESOLUTION)
  @javax.annotation.Nullable
  private FixedOutputResolutionEnum fixedOutputResolution;

  /**
   * Specifies the scanning mode for the processed output. Defaults to &#x60;AUTO&#x60;. For instance: - &#x60;AUTO&#x60;: automatically determine the appropriate scanning type based on metadata of the source and any filters selected - &#x60;PROGRESSIVE&#x60;: force progressive output - &#x60;INTERLACED_TOP_FIRST&#x60;: perform explicit top field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. - &#x60;INTERLACED_BOTTOM_FIRST&#x60;: perform explicit bottom field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. 
   */
  @JsonAdapter(OutputScanningEnum.Adapter.class)
  public enum OutputScanningEnum {
    AUTO("AUTO"),
    
    PROGRESSIVE("PROGRESSIVE"),
    
    INTERLACED_TOP_FIRST("INTERLACED_TOP_FIRST"),
    
    INTERLACED_BOTTOM_FIRST("INTERLACED_BOTTOM_FIRST");

    private String value;

    OutputScanningEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputScanningEnum fromValue(String value) {
      for (OutputScanningEnum b : OutputScanningEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputScanningEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputScanningEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputScanningEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputScanningEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputScanningEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_SCANNING = "outputScanning";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SCANNING)
  @javax.annotation.Nullable
  private OutputScanningEnum outputScanning;

  public VideoProcessingConfigurationOptionsProcessingSettings() {
  }

  public VideoProcessingConfigurationOptionsProcessingSettings inputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion inputColorSpaceConversion) {
    this.inputColorSpaceConversion = inputColorSpaceConversion;
    return this;
  }

  /**
   * Get inputColorSpaceConversion
   * @return inputColorSpaceConversion
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion getInputColorSpaceConversion() {
    return inputColorSpaceConversion;
  }

  public void setInputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion inputColorSpaceConversion) {
    this.inputColorSpaceConversion = inputColorSpaceConversion;
  }


  public VideoProcessingConfigurationOptionsProcessingSettings outputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion outputColorSpaceConversion) {
    this.outputColorSpaceConversion = outputColorSpaceConversion;
    return this;
  }

  /**
   * Get outputColorSpaceConversion
   * @return outputColorSpaceConversion
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion getOutputColorSpaceConversion() {
    return outputColorSpaceConversion;
  }

  public void setOutputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion outputColorSpaceConversion) {
    this.outputColorSpaceConversion = outputColorSpaceConversion;
  }


  public VideoProcessingConfigurationOptionsProcessingSettings fixedOutputResolution(@javax.annotation.Nullable FixedOutputResolutionEnum fixedOutputResolution) {
    this.fixedOutputResolution = fixedOutputResolution;
    return this;
  }

  /**
   * Enforces a fixed resolution for the processed output by cropping and/or padding the video as needed.  This is particularly useful for adapting content to standard formats like widescreen 16:9. Black borders are inserted in padded areas.  Available resolution presets: - &#x60;STANDARD_HD&#x60;: 1280 × 720 pixels - &#x60;FULL_HD&#x60;: 1920 × 1080 pixels - &#x60;UHD_4K&#x60;: 3840 × 2160 pixels - &#x60;UHD_8K&#x60;: 7680 × 4320 pixels 
   * @return fixedOutputResolution
   */
  @javax.annotation.Nullable
  public FixedOutputResolutionEnum getFixedOutputResolution() {
    return fixedOutputResolution;
  }

  public void setFixedOutputResolution(@javax.annotation.Nullable FixedOutputResolutionEnum fixedOutputResolution) {
    this.fixedOutputResolution = fixedOutputResolution;
  }


  public VideoProcessingConfigurationOptionsProcessingSettings outputScanning(@javax.annotation.Nullable OutputScanningEnum outputScanning) {
    this.outputScanning = outputScanning;
    return this;
  }

  /**
   * Specifies the scanning mode for the processed output. Defaults to &#x60;AUTO&#x60;. For instance: - &#x60;AUTO&#x60;: automatically determine the appropriate scanning type based on metadata of the source and any filters selected - &#x60;PROGRESSIVE&#x60;: force progressive output - &#x60;INTERLACED_TOP_FIRST&#x60;: perform explicit top field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. - &#x60;INTERLACED_BOTTOM_FIRST&#x60;: perform explicit bottom field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. 
   * @return outputScanning
   */
  @javax.annotation.Nullable
  public OutputScanningEnum getOutputScanning() {
    return outputScanning;
  }

  public void setOutputScanning(@javax.annotation.Nullable OutputScanningEnum outputScanning) {
    this.outputScanning = outputScanning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsProcessingSettings videoProcessingConfigurationOptionsProcessingSettings = (VideoProcessingConfigurationOptionsProcessingSettings) o;
    return Objects.equals(this.inputColorSpaceConversion, videoProcessingConfigurationOptionsProcessingSettings.inputColorSpaceConversion) &&
        Objects.equals(this.outputColorSpaceConversion, videoProcessingConfigurationOptionsProcessingSettings.outputColorSpaceConversion) &&
        Objects.equals(this.fixedOutputResolution, videoProcessingConfigurationOptionsProcessingSettings.fixedOutputResolution) &&
        Objects.equals(this.outputScanning, videoProcessingConfigurationOptionsProcessingSettings.outputScanning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputColorSpaceConversion, outputColorSpaceConversion, fixedOutputResolution, outputScanning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsProcessingSettings {\n");
    sb.append("    inputColorSpaceConversion: ").append(toIndentedString(inputColorSpaceConversion)).append("\n");
    sb.append("    outputColorSpaceConversion: ").append(toIndentedString(outputColorSpaceConversion)).append("\n");
    sb.append("    fixedOutputResolution: ").append(toIndentedString(fixedOutputResolution)).append("\n");
    sb.append("    outputScanning: ").append(toIndentedString(outputScanning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputColorSpaceConversion");
    openapiFields.add("outputColorSpaceConversion");
    openapiFields.add("fixedOutputResolution");
    openapiFields.add("outputScanning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptionsProcessingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptionsProcessingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptionsProcessingSettings is not found in the empty JSON string", VideoProcessingConfigurationOptionsProcessingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptionsProcessingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptionsProcessingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `inputColorSpaceConversion`
      if (jsonObj.get("inputColorSpaceConversion") != null && !jsonObj.get("inputColorSpaceConversion").isJsonNull()) {
        VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.validateJsonElement(jsonObj.get("inputColorSpaceConversion"));
      }
      // validate the optional field `outputColorSpaceConversion`
      if (jsonObj.get("outputColorSpaceConversion") != null && !jsonObj.get("outputColorSpaceConversion").isJsonNull()) {
        VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.validateJsonElement(jsonObj.get("outputColorSpaceConversion"));
      }
      if ((jsonObj.get("fixedOutputResolution") != null && !jsonObj.get("fixedOutputResolution").isJsonNull()) && !jsonObj.get("fixedOutputResolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedOutputResolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedOutputResolution").toString()));
      }
      // validate the optional field `fixedOutputResolution`
      if (jsonObj.get("fixedOutputResolution") != null && !jsonObj.get("fixedOutputResolution").isJsonNull()) {
        FixedOutputResolutionEnum.validateJsonElement(jsonObj.get("fixedOutputResolution"));
      }
      if ((jsonObj.get("outputScanning") != null && !jsonObj.get("outputScanning").isJsonNull()) && !jsonObj.get("outputScanning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputScanning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputScanning").toString()));
      }
      // validate the optional field `outputScanning`
      if (jsonObj.get("outputScanning") != null && !jsonObj.get("outputScanning").isJsonNull()) {
        OutputScanningEnum.validateJsonElement(jsonObj.get("outputScanning"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptionsProcessingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptionsProcessingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptionsProcessingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptionsProcessingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptionsProcessingSettings>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptionsProcessingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptionsProcessingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptionsProcessingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptionsProcessingSettings
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptionsProcessingSettings
   */
  public static VideoProcessingConfigurationOptionsProcessingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptionsProcessingSettings.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptionsProcessingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

