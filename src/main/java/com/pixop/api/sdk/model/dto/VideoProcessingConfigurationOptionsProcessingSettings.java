/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Additional processing settings for input and output color space conversions, tone mapping, and fixed output resolutions.  These settings ensure precise control over colorimetry and dynamic range transformations during video processing. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsProcessingSettings.JSON_PROPERTY_INPUT_COLOR_SPACE_CONVERSION,
  VideoProcessingConfigurationOptionsProcessingSettings.JSON_PROPERTY_OUTPUT_COLOR_SPACE_CONVERSION,
  VideoProcessingConfigurationOptionsProcessingSettings.JSON_PROPERTY_FIXED_OUTPUT_RESOLUTION,
  VideoProcessingConfigurationOptionsProcessingSettings.JSON_PROPERTY_OUTPUT_SCANNING
})
@JsonTypeName("VideoProcessingConfigurationOptions_processingSettings")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsProcessingSettings {
  public static final String JSON_PROPERTY_INPUT_COLOR_SPACE_CONVERSION = "inputColorSpaceConversion";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion inputColorSpaceConversion;

  public static final String JSON_PROPERTY_OUTPUT_COLOR_SPACE_CONVERSION = "outputColorSpaceConversion";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion outputColorSpaceConversion;

  /**
   * Enforces a fixed resolution for the processed output by cropping and/or padding the video as needed.  This is particularly useful for adapting content to standard formats like widescreen 16:9. Black borders are inserted in padded areas.  Available resolution presets: - &#x60;STANDARD_HD&#x60;: 1280 × 720 pixels - &#x60;FULL_HD&#x60;: 1920 × 1080 pixels - &#x60;UHD_4K&#x60;: 3840 × 2160 pixels - &#x60;UHD_8K&#x60;: 7680 × 4320 pixels 
   */
  public enum FixedOutputResolutionEnum {
    STANDARD_HD(String.valueOf("STANDARD_HD")),
    
    FULL_HD(String.valueOf("FULL_HD")),
    
    UHD_4_K(String.valueOf("UHD_4K")),
    
    UHD_8_K(String.valueOf("UHD_8K")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    FixedOutputResolutionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FixedOutputResolutionEnum fromValue(String value) {
      for (FixedOutputResolutionEnum b : FixedOutputResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_FIXED_OUTPUT_RESOLUTION = "fixedOutputResolution";
  @javax.annotation.Nullable
  private FixedOutputResolutionEnum fixedOutputResolution;

  /**
   * Specifies the scanning mode for the processed output. Defaults to &#x60;AUTO&#x60;. For instance: - &#x60;AUTO&#x60;: automatically determine the appropriate scanning type based on metadata of the source and any filters selected - &#x60;PROGRESSIVE&#x60;: force progressive output - &#x60;INTERLACED_TOP_FIRST&#x60;: perform explicit top field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. - &#x60;INTERLACED_BOTTOM_FIRST&#x60;: perform explicit bottom field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. 
   */
  public enum OutputScanningEnum {
    AUTO(String.valueOf("AUTO")),
    
    PROGRESSIVE(String.valueOf("PROGRESSIVE")),
    
    INTERLACED_TOP_FIRST(String.valueOf("INTERLACED_TOP_FIRST")),
    
    INTERLACED_BOTTOM_FIRST(String.valueOf("INTERLACED_BOTTOM_FIRST")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    OutputScanningEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OutputScanningEnum fromValue(String value) {
      for (OutputScanningEnum b : OutputScanningEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_OUTPUT_SCANNING = "outputScanning";
  @javax.annotation.Nullable
  private OutputScanningEnum outputScanning;

  public VideoProcessingConfigurationOptionsProcessingSettings() {
  }

  public VideoProcessingConfigurationOptionsProcessingSettings inputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion inputColorSpaceConversion) {
    
    this.inputColorSpaceConversion = inputColorSpaceConversion;
    return this;
  }

  /**
   * Get inputColorSpaceConversion
   * @return inputColorSpaceConversion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_COLOR_SPACE_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion getInputColorSpaceConversion() {
    return inputColorSpaceConversion;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_COLOR_SPACE_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion inputColorSpaceConversion) {
    this.inputColorSpaceConversion = inputColorSpaceConversion;
  }

  public VideoProcessingConfigurationOptionsProcessingSettings outputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion outputColorSpaceConversion) {
    
    this.outputColorSpaceConversion = outputColorSpaceConversion;
    return this;
  }

  /**
   * Get outputColorSpaceConversion
   * @return outputColorSpaceConversion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_COLOR_SPACE_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion getOutputColorSpaceConversion() {
    return outputColorSpaceConversion;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_COLOR_SPACE_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputColorSpaceConversion(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion outputColorSpaceConversion) {
    this.outputColorSpaceConversion = outputColorSpaceConversion;
  }

  public VideoProcessingConfigurationOptionsProcessingSettings fixedOutputResolution(@javax.annotation.Nullable FixedOutputResolutionEnum fixedOutputResolution) {
    
    this.fixedOutputResolution = fixedOutputResolution;
    return this;
  }

  /**
   * Enforces a fixed resolution for the processed output by cropping and/or padding the video as needed.  This is particularly useful for adapting content to standard formats like widescreen 16:9. Black borders are inserted in padded areas.  Available resolution presets: - &#x60;STANDARD_HD&#x60;: 1280 × 720 pixels - &#x60;FULL_HD&#x60;: 1920 × 1080 pixels - &#x60;UHD_4K&#x60;: 3840 × 2160 pixels - &#x60;UHD_8K&#x60;: 7680 × 4320 pixels 
   * @return fixedOutputResolution
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIXED_OUTPUT_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FixedOutputResolutionEnum getFixedOutputResolution() {
    return fixedOutputResolution;
  }


  @JsonProperty(JSON_PROPERTY_FIXED_OUTPUT_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixedOutputResolution(@javax.annotation.Nullable FixedOutputResolutionEnum fixedOutputResolution) {
    this.fixedOutputResolution = fixedOutputResolution;
  }

  public VideoProcessingConfigurationOptionsProcessingSettings outputScanning(@javax.annotation.Nullable OutputScanningEnum outputScanning) {
    
    this.outputScanning = outputScanning;
    return this;
  }

  /**
   * Specifies the scanning mode for the processed output. Defaults to &#x60;AUTO&#x60;. For instance: - &#x60;AUTO&#x60;: automatically determine the appropriate scanning type based on metadata of the source and any filters selected - &#x60;PROGRESSIVE&#x60;: force progressive output - &#x60;INTERLACED_TOP_FIRST&#x60;: perform explicit top field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. - &#x60;INTERLACED_BOTTOM_FIRST&#x60;: perform explicit bottom field first interlacing of the processed video stream, which has the effect of halving the stored frame rate. 
   * @return outputScanning
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_SCANNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OutputScanningEnum getOutputScanning() {
    return outputScanning;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_SCANNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputScanning(@javax.annotation.Nullable OutputScanningEnum outputScanning) {
    this.outputScanning = outputScanning;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsProcessingSettings videoProcessingConfigurationOptionsProcessingSettings = (VideoProcessingConfigurationOptionsProcessingSettings) o;
    return Objects.equals(this.inputColorSpaceConversion, videoProcessingConfigurationOptionsProcessingSettings.inputColorSpaceConversion) &&
        Objects.equals(this.outputColorSpaceConversion, videoProcessingConfigurationOptionsProcessingSettings.outputColorSpaceConversion) &&
        Objects.equals(this.fixedOutputResolution, videoProcessingConfigurationOptionsProcessingSettings.fixedOutputResolution) &&
        Objects.equals(this.outputScanning, videoProcessingConfigurationOptionsProcessingSettings.outputScanning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputColorSpaceConversion, outputColorSpaceConversion, fixedOutputResolution, outputScanning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsProcessingSettings {\n");
    sb.append("    inputColorSpaceConversion: ").append(toIndentedString(inputColorSpaceConversion)).append("\n");
    sb.append("    outputColorSpaceConversion: ").append(toIndentedString(outputColorSpaceConversion)).append("\n");
    sb.append("    fixedOutputResolution: ").append(toIndentedString(fixedOutputResolution)).append("\n");
    sb.append("    outputScanning: ").append(toIndentedString(outputScanning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `inputColorSpaceConversion` to the URL query string
    if (getInputColorSpaceConversion() != null) {
      joiner.add(getInputColorSpaceConversion().toUrlQueryString(prefix + "inputColorSpaceConversion" + suffix));
    }

    // add `outputColorSpaceConversion` to the URL query string
    if (getOutputColorSpaceConversion() != null) {
      joiner.add(getOutputColorSpaceConversion().toUrlQueryString(prefix + "outputColorSpaceConversion" + suffix));
    }

    // add `fixedOutputResolution` to the URL query string
    if (getFixedOutputResolution() != null) {
      try {
        joiner.add(String.format("%sfixedOutputResolution%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFixedOutputResolution()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `outputScanning` to the URL query string
    if (getOutputScanning() != null) {
      try {
        joiner.add(String.format("%soutputScanning%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputScanning()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

