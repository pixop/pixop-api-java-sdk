/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.AmountUnit;
import com.pixop.api.sdk.model.dto.Category;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents a product associated with a transaction or video processing. Includes pricing and discount details.
 */
@JsonPropertyOrder({
  Product.JSON_PROPERTY_PRODUCT_NAME,
  Product.JSON_PROPERTY_CATEGORY,
  Product.JSON_PROPERTY_AMOUNT,
  Product.JSON_PROPERTY_AMOUNT_UNIT,
  Product.JSON_PROPERTY_DISCOUNT_PERCENTAGE,
  Product.JSON_PROPERTY_UNIT_PRICE_USD,
  Product.JSON_PROPERTY_COST_USD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class Product {
  public static final String JSON_PROPERTY_PRODUCT_NAME = "productName";
  @javax.annotation.Nonnull
  private String productName;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  @javax.annotation.Nonnull
  private Category category;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @javax.annotation.Nonnull
  private BigDecimal amount;

  public static final String JSON_PROPERTY_AMOUNT_UNIT = "amountUnit";
  @javax.annotation.Nonnull
  private AmountUnit amountUnit;

  public static final String JSON_PROPERTY_DISCOUNT_PERCENTAGE = "discountPercentage";
  @javax.annotation.Nonnull
  private BigDecimal discountPercentage;

  public static final String JSON_PROPERTY_UNIT_PRICE_USD = "unitPriceUsd";
  @javax.annotation.Nonnull
  private BigDecimal unitPriceUsd;

  public static final String JSON_PROPERTY_COST_USD = "costUsd";
  @javax.annotation.Nonnull
  private BigDecimal costUsd;

  public Product() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public Product(
    @JsonProperty(JSON_PROPERTY_PRODUCT_NAME) String productName, 
    @JsonProperty(JSON_PROPERTY_CATEGORY) Category category, 
    @JsonProperty(JSON_PROPERTY_AMOUNT) BigDecimal amount, 
    @JsonProperty(JSON_PROPERTY_AMOUNT_UNIT) AmountUnit amountUnit, 
    @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE) BigDecimal discountPercentage
  ) {
    this();
    this.productName = productName;
    this.category = category;
    this.amount = amount;
    this.amountUnit = amountUnit;
    this.discountPercentage = discountPercentage;
  }

  /**
   * The name of the product, such as an encoder or filter. For example, H.264 / AVC.
   * @return productName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProductName() {
    return productName;
  }



  /**
   * The category to which this product belongs.
   * @return category
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Category getCategory() {
    return category;
  }



  /**
   * The quantity of the product or service consumed.
   * @return amount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }



  /**
   * The unit for the specified amount, such as USD, GB, or GP.
   * @return amountUnit
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AmountUnit getAmountUnit() {
    return amountUnit;
  }



  /**
   * Represents the discount percentage applied to a cost or product. For example, 3.3 indicates a 3.3% discount.
   * minimum: 0
   * maximum: 100
   * @return discountPercentage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getDiscountPercentage() {
    return discountPercentage;
  }



  public Product unitPriceUsd(@javax.annotation.Nonnull BigDecimal unitPriceUsd) {
    
    this.unitPriceUsd = unitPriceUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return unitPriceUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNIT_PRICE_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getUnitPriceUsd() {
    return unitPriceUsd;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_PRICE_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitPriceUsd(@javax.annotation.Nonnull BigDecimal unitPriceUsd) {
    this.unitPriceUsd = unitPriceUsd;
  }

  public Product costUsd(@javax.annotation.Nonnull BigDecimal costUsd) {
    
    this.costUsd = costUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return costUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getCostUsd() {
    return costUsd;
  }


  @JsonProperty(JSON_PROPERTY_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCostUsd(@javax.annotation.Nonnull BigDecimal costUsd) {
    this.costUsd = costUsd;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.productName, product.productName) &&
        Objects.equals(this.category, product.category) &&
        Objects.equals(this.amount, product.amount) &&
        Objects.equals(this.amountUnit, product.amountUnit) &&
        Objects.equals(this.discountPercentage, product.discountPercentage) &&
        Objects.equals(this.unitPriceUsd, product.unitPriceUsd) &&
        Objects.equals(this.costUsd, product.costUsd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productName, category, amount, amountUnit, discountPercentage, unitPriceUsd, costUsd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountUnit: ").append(toIndentedString(amountUnit)).append("\n");
    sb.append("    discountPercentage: ").append(toIndentedString(discountPercentage)).append("\n");
    sb.append("    unitPriceUsd: ").append(toIndentedString(unitPriceUsd)).append("\n");
    sb.append("    costUsd: ").append(toIndentedString(costUsd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `productName` to the URL query string
    if (getProductName() != null) {
      try {
        joiner.add(String.format("%sproductName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProductName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `category` to the URL query string
    if (getCategory() != null) {
      try {
        joiner.add(String.format("%scategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCategory()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      try {
        joiner.add(String.format("%samount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amountUnit` to the URL query string
    if (getAmountUnit() != null) {
      try {
        joiner.add(String.format("%samountUnit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmountUnit()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `discountPercentage` to the URL query string
    if (getDiscountPercentage() != null) {
      try {
        joiner.add(String.format("%sdiscountPercentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDiscountPercentage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `unitPriceUsd` to the URL query string
    if (getUnitPriceUsd() != null) {
      try {
        joiner.add(String.format("%sunitPriceUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnitPriceUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `costUsd` to the URL query string
    if (getCostUsd() != null) {
      try {
        joiner.add(String.format("%scostUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCostUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

