/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.AccountAdjustment;
import com.pixop.api.sdk.model.dto.TransactionType;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents a financial transaction within the platform.  Transactions are categorized by type and include details such as the amount, associated video, and balance adjustments. 
 */
@JsonPropertyOrder({
  Transaction.JSON_PROPERTY_CREATED_AT,
  Transaction.JSON_PROPERTY_TYPE,
  Transaction.JSON_PROPERTY_AMOUNT_USD,
  Transaction.JSON_PROPERTY_BALANCE_USD,
  Transaction.JSON_PROPERTY_VIDEO_ID,
  Transaction.JSON_PROPERTY_ACCOUNT_ADJUSTMENT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ProcessingTransaction.class, name = "PROCESSING"),
  @JsonSubTypes.Type(value = UtilitiesTransaction.class, name = "UTILITIES"),
})

public class Transaction {
  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  protected OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_TYPE = "type";
  // The discriminator does not have Nullability-annotation since it is added during serialization by the @JsonTypeName annotation
  protected TransactionType type;

  public static final String JSON_PROPERTY_AMOUNT_USD = "amountUsd";
  @javax.annotation.Nonnull
  protected BigDecimal amountUsd;

  public static final String JSON_PROPERTY_BALANCE_USD = "balanceUsd";
  @javax.annotation.Nonnull
  protected BigDecimal balanceUsd;

  public static final String JSON_PROPERTY_VIDEO_ID = "videoId";
  @javax.annotation.Nullable
  protected UUID videoId;

  public static final String JSON_PROPERTY_ACCOUNT_ADJUSTMENT = "accountAdjustment";
  @javax.annotation.Nullable
  protected AccountAdjustment accountAdjustment;

  public Transaction() {
  }

  public Transaction createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time when the transaction was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Transaction type(@javax.annotation.Nonnull TransactionType type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TransactionType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull TransactionType type) {
    this.type = type;
  }

  public Transaction amountUsd(@javax.annotation.Nonnull BigDecimal amountUsd) {
    
    this.amountUsd = amountUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return amountUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmountUsd() {
    return amountUsd;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmountUsd(@javax.annotation.Nonnull BigDecimal amountUsd) {
    this.amountUsd = amountUsd;
  }

  public Transaction balanceUsd(@javax.annotation.Nonnull BigDecimal balanceUsd) {
    
    this.balanceUsd = balanceUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return balanceUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BALANCE_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getBalanceUsd() {
    return balanceUsd;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBalanceUsd(@javax.annotation.Nonnull BigDecimal balanceUsd) {
    this.balanceUsd = balanceUsd;
  }

  public Transaction videoId(@javax.annotation.Nullable UUID videoId) {
    
    this.videoId = videoId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return videoId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIDEO_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getVideoId() {
    return videoId;
  }


  @JsonProperty(JSON_PROPERTY_VIDEO_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVideoId(@javax.annotation.Nullable UUID videoId) {
    this.videoId = videoId;
  }

  public Transaction accountAdjustment(@javax.annotation.Nullable AccountAdjustment accountAdjustment) {
    
    this.accountAdjustment = accountAdjustment;
    return this;
  }

  /**
   * Get accountAdjustment
   * @return accountAdjustment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ADJUSTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AccountAdjustment getAccountAdjustment() {
    return accountAdjustment;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ADJUSTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountAdjustment(@javax.annotation.Nullable AccountAdjustment accountAdjustment) {
    this.accountAdjustment = accountAdjustment;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.createdAt, transaction.createdAt) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.amountUsd, transaction.amountUsd) &&
        Objects.equals(this.balanceUsd, transaction.balanceUsd) &&
        Objects.equals(this.videoId, transaction.videoId) &&
        Objects.equals(this.accountAdjustment, transaction.accountAdjustment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, type, amountUsd, balanceUsd, videoId, accountAdjustment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    amountUsd: ").append(toIndentedString(amountUsd)).append("\n");
    sb.append("    balanceUsd: ").append(toIndentedString(balanceUsd)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    accountAdjustment: ").append(toIndentedString(accountAdjustment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amountUsd` to the URL query string
    if (getAmountUsd() != null) {
      try {
        joiner.add(String.format("%samountUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmountUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `balanceUsd` to the URL query string
    if (getBalanceUsd() != null) {
      try {
        joiner.add(String.format("%sbalanceUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBalanceUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `videoId` to the URL query string
    if (getVideoId() != null) {
      try {
        joiner.add(String.format("%svideoId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVideoId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `accountAdjustment` to the URL query string
    if (getAccountAdjustment() != null) {
      joiner.add(getAccountAdjustment().toUrlQueryString(prefix + "accountAdjustment" + suffix));
    }

    return joiner.toString();
  }

}

