/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.AccountAdjustment;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents a financial transaction within the platform.  Transactions are categorized by type and include details such as the amount, associated video, and balance adjustments. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class Transaction {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  protected String type;

  public static final String SERIALIZED_NAME_AMOUNT_USD = "amountUsd";
  @SerializedName(SERIALIZED_NAME_AMOUNT_USD)
  @javax.annotation.Nonnull
  private BigDecimal amountUsd;

  public static final String SERIALIZED_NAME_BALANCE_USD = "balanceUsd";
  @SerializedName(SERIALIZED_NAME_BALANCE_USD)
  @javax.annotation.Nonnull
  private BigDecimal balanceUsd;

  public static final String SERIALIZED_NAME_VIDEO_ID = "videoId";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  @javax.annotation.Nullable
  private UUID videoId;

  public static final String SERIALIZED_NAME_ACCOUNT_ADJUSTMENT = "accountAdjustment";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ADJUSTMENT)
  @javax.annotation.Nullable
  private AccountAdjustment accountAdjustment;

  public Transaction() {
    this.type = this.getClass().getSimpleName();
  }

  public Transaction createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time when the transaction was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Transaction type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the transaction, representing specific categories of financial activity. - &#x60;PROCESSING&#x60;: A transaction related to video processing. - &#x60;UTILITIES&#x60;: A transaction related to utilities such as downloads or storage. 
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }


  public Transaction amountUsd(@javax.annotation.Nonnull BigDecimal amountUsd) {
    this.amountUsd = amountUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return amountUsd
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmountUsd() {
    return amountUsd;
  }

  public void setAmountUsd(@javax.annotation.Nonnull BigDecimal amountUsd) {
    this.amountUsd = amountUsd;
  }


  public Transaction balanceUsd(@javax.annotation.Nonnull BigDecimal balanceUsd) {
    this.balanceUsd = balanceUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return balanceUsd
   */
  @javax.annotation.Nonnull
  public BigDecimal getBalanceUsd() {
    return balanceUsd;
  }

  public void setBalanceUsd(@javax.annotation.Nonnull BigDecimal balanceUsd) {
    this.balanceUsd = balanceUsd;
  }


  public Transaction videoId(@javax.annotation.Nullable UUID videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return videoId
   */
  @javax.annotation.Nullable
  public UUID getVideoId() {
    return videoId;
  }

  public void setVideoId(@javax.annotation.Nullable UUID videoId) {
    this.videoId = videoId;
  }


  public Transaction accountAdjustment(@javax.annotation.Nullable AccountAdjustment accountAdjustment) {
    this.accountAdjustment = accountAdjustment;
    return this;
  }

  /**
   * Get accountAdjustment
   * @return accountAdjustment
   */
  @javax.annotation.Nullable
  public AccountAdjustment getAccountAdjustment() {
    return accountAdjustment;
  }

  public void setAccountAdjustment(@javax.annotation.Nullable AccountAdjustment accountAdjustment) {
    this.accountAdjustment = accountAdjustment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.createdAt, transaction.createdAt) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.amountUsd, transaction.amountUsd) &&
        Objects.equals(this.balanceUsd, transaction.balanceUsd) &&
        Objects.equals(this.videoId, transaction.videoId) &&
        Objects.equals(this.accountAdjustment, transaction.accountAdjustment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, type, amountUsd, balanceUsd, videoId, accountAdjustment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    amountUsd: ").append(toIndentedString(amountUsd)).append("\n");
    sb.append("    balanceUsd: ").append(toIndentedString(balanceUsd)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    accountAdjustment: ").append(toIndentedString(accountAdjustment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("type");
    openapiFields.add("amountUsd");
    openapiFields.add("balanceUsd");
    openapiFields.add("videoId");
    openapiFields.add("accountAdjustment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("amountUsd");
    openapiRequiredFields.add("balanceUsd");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "PROCESSING":
          ProcessingTransaction.validateJsonElement(jsonElement);
          break;
        case "UTILITIES":
          UtilitiesTransaction.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

