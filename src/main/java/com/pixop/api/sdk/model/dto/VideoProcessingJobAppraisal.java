/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.ProcessingEstimation;
import com.pixop.api.sdk.model.dto.VideoProcessingJobAppraisalCost;
import com.pixop.api.sdk.model.dto.VideoProcessingJobItem;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * An appraisal containing the estimated costs and job details for processing a video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingJobAppraisal {
  public static final String SERIALIZED_NAME_JOB_ITEMS = "jobItems";
  @SerializedName(SERIALIZED_NAME_JOB_ITEMS)
  @javax.annotation.Nullable
  private List<VideoProcessingJobItem> jobItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_ESTIMATION = "estimation";
  @SerializedName(SERIALIZED_NAME_ESTIMATION)
  @javax.annotation.Nullable
  private ProcessingEstimation estimation;

  public static final String SERIALIZED_NAME_OUTPUT_DURATION_MILLIS = "outputDurationMillis";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DURATION_MILLIS)
  @javax.annotation.Nullable
  private Long outputDurationMillis;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  @javax.annotation.Nullable
  private VideoProcessingJobAppraisalCost cost;

  public VideoProcessingJobAppraisal() {
  }

  public VideoProcessingJobAppraisal(
     ProcessingEstimation estimation, 
     Long outputDurationMillis
  ) {
    this();
    this.estimation = estimation;
    this.outputDurationMillis = outputDurationMillis;
  }

  public VideoProcessingJobAppraisal jobItems(@javax.annotation.Nullable List<VideoProcessingJobItem> jobItems) {
    this.jobItems = jobItems;
    return this;
  }

  public VideoProcessingJobAppraisal addJobItemsItem(VideoProcessingJobItem jobItemsItem) {
    if (this.jobItems == null) {
      this.jobItems = new ArrayList<>();
    }
    this.jobItems.add(jobItemsItem);
    return this;
  }

  /**
   * A list of job items to be processed as part of this video.
   * @return jobItems
   */
  @javax.annotation.Nullable
  public List<VideoProcessingJobItem> getJobItems() {
    return jobItems;
  }

  public void setJobItems(@javax.annotation.Nullable List<VideoProcessingJobItem> jobItems) {
    this.jobItems = jobItems;
  }


  /**
   * The overall estimation of costs and processing metrics for the job.
   * @return estimation
   */
  @javax.annotation.Nullable
  public ProcessingEstimation getEstimation() {
    return estimation;
  }



  /**
   * The expected duration of the processed video in milliseconds. For example, 30000 represents a 30-second-long video.
   * @return outputDurationMillis
   */
  @javax.annotation.Nullable
  public Long getOutputDurationMillis() {
    return outputDurationMillis;
  }



  public VideoProcessingJobAppraisal cost(@javax.annotation.Nullable VideoProcessingJobAppraisalCost cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public VideoProcessingJobAppraisalCost getCost() {
    return cost;
  }

  public void setCost(@javax.annotation.Nullable VideoProcessingJobAppraisalCost cost) {
    this.cost = cost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingJobAppraisal videoProcessingJobAppraisal = (VideoProcessingJobAppraisal) o;
    return Objects.equals(this.jobItems, videoProcessingJobAppraisal.jobItems) &&
        Objects.equals(this.estimation, videoProcessingJobAppraisal.estimation) &&
        Objects.equals(this.outputDurationMillis, videoProcessingJobAppraisal.outputDurationMillis) &&
        Objects.equals(this.cost, videoProcessingJobAppraisal.cost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobItems, estimation, outputDurationMillis, cost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingJobAppraisal {\n");
    sb.append("    jobItems: ").append(toIndentedString(jobItems)).append("\n");
    sb.append("    estimation: ").append(toIndentedString(estimation)).append("\n");
    sb.append("    outputDurationMillis: ").append(toIndentedString(outputDurationMillis)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobItems");
    openapiFields.add("estimation");
    openapiFields.add("outputDurationMillis");
    openapiFields.add("cost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingJobAppraisal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingJobAppraisal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingJobAppraisal is not found in the empty JSON string", VideoProcessingJobAppraisal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingJobAppraisal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingJobAppraisal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("jobItems") != null && !jsonObj.get("jobItems").isJsonNull()) {
        JsonArray jsonArrayjobItems = jsonObj.getAsJsonArray("jobItems");
        if (jsonArrayjobItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobItems` to be an array in the JSON string but got `%s`", jsonObj.get("jobItems").toString()));
          }

          // validate the optional field `jobItems` (array)
          for (int i = 0; i < jsonArrayjobItems.size(); i++) {
            VideoProcessingJobItem.validateJsonElement(jsonArrayjobItems.get(i));
          };
        }
      }
      // validate the optional field `estimation`
      if (jsonObj.get("estimation") != null && !jsonObj.get("estimation").isJsonNull()) {
        ProcessingEstimation.validateJsonElement(jsonObj.get("estimation"));
      }
      // validate the optional field `cost`
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        VideoProcessingJobAppraisalCost.validateJsonElement(jsonObj.get("cost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingJobAppraisal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingJobAppraisal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingJobAppraisal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingJobAppraisal.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingJobAppraisal>() {
           @Override
           public void write(JsonWriter out, VideoProcessingJobAppraisal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingJobAppraisal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingJobAppraisal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingJobAppraisal
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingJobAppraisal
   */
  public static VideoProcessingJobAppraisal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingJobAppraisal.class);
  }

  /**
   * Convert an instance of VideoProcessingJobAppraisal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

