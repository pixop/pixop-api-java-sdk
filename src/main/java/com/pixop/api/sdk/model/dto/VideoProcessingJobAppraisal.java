/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.ProcessingEstimation;
import com.pixop.api.sdk.model.dto.VideoProcessingJobAppraisalCost;
import com.pixop.api.sdk.model.dto.VideoProcessingJobItem;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * An appraisal containing the estimated costs and job details for processing a video.
 */
@JsonPropertyOrder({
  VideoProcessingJobAppraisal.JSON_PROPERTY_JOB_ITEMS,
  VideoProcessingJobAppraisal.JSON_PROPERTY_ESTIMATION,
  VideoProcessingJobAppraisal.JSON_PROPERTY_OUTPUT_DURATION_MILLIS,
  VideoProcessingJobAppraisal.JSON_PROPERTY_COST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingJobAppraisal {
  public static final String JSON_PROPERTY_JOB_ITEMS = "jobItems";
  @javax.annotation.Nonnull
  private List<VideoProcessingJobItem> jobItems = new ArrayList<>();

  public static final String JSON_PROPERTY_ESTIMATION = "estimation";
  @javax.annotation.Nonnull
  private ProcessingEstimation estimation;

  public static final String JSON_PROPERTY_OUTPUT_DURATION_MILLIS = "outputDurationMillis";
  @javax.annotation.Nonnull
  private Long outputDurationMillis;

  public static final String JSON_PROPERTY_COST = "cost";
  @javax.annotation.Nonnull
  private VideoProcessingJobAppraisalCost cost;

  public VideoProcessingJobAppraisal() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public VideoProcessingJobAppraisal(
    @JsonProperty(JSON_PROPERTY_ESTIMATION) ProcessingEstimation estimation, 
    @JsonProperty(JSON_PROPERTY_OUTPUT_DURATION_MILLIS) Long outputDurationMillis
  ) {
    this();
    this.estimation = estimation;
    this.outputDurationMillis = outputDurationMillis;
  }

  public VideoProcessingJobAppraisal jobItems(@javax.annotation.Nonnull List<VideoProcessingJobItem> jobItems) {
    
    this.jobItems = jobItems;
    return this;
  }

  public VideoProcessingJobAppraisal addJobItemsItem(VideoProcessingJobItem jobItemsItem) {
    if (this.jobItems == null) {
      this.jobItems = new ArrayList<>();
    }
    this.jobItems.add(jobItemsItem);
    return this;
  }

  /**
   * A list of job items to be processed as part of this video.
   * @return jobItems
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_JOB_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<VideoProcessingJobItem> getJobItems() {
    return jobItems;
  }


  @JsonProperty(JSON_PROPERTY_JOB_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJobItems(@javax.annotation.Nonnull List<VideoProcessingJobItem> jobItems) {
    this.jobItems = jobItems;
  }

  /**
   * The overall estimation of costs and processing metrics for the job.
   * @return estimation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ESTIMATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProcessingEstimation getEstimation() {
    return estimation;
  }



  /**
   * The expected duration of the processed video in milliseconds. For example, 30000 represents a 30-second-long video.
   * @return outputDurationMillis
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT_DURATION_MILLIS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getOutputDurationMillis() {
    return outputDurationMillis;
  }



  public VideoProcessingJobAppraisal cost(@javax.annotation.Nonnull VideoProcessingJobAppraisalCost cost) {
    
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public VideoProcessingJobAppraisalCost getCost() {
    return cost;
  }


  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCost(@javax.annotation.Nonnull VideoProcessingJobAppraisalCost cost) {
    this.cost = cost;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingJobAppraisal videoProcessingJobAppraisal = (VideoProcessingJobAppraisal) o;
    return Objects.equals(this.jobItems, videoProcessingJobAppraisal.jobItems) &&
        Objects.equals(this.estimation, videoProcessingJobAppraisal.estimation) &&
        Objects.equals(this.outputDurationMillis, videoProcessingJobAppraisal.outputDurationMillis) &&
        Objects.equals(this.cost, videoProcessingJobAppraisal.cost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobItems, estimation, outputDurationMillis, cost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingJobAppraisal {\n");
    sb.append("    jobItems: ").append(toIndentedString(jobItems)).append("\n");
    sb.append("    estimation: ").append(toIndentedString(estimation)).append("\n");
    sb.append("    outputDurationMillis: ").append(toIndentedString(outputDurationMillis)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `jobItems` to the URL query string
    if (getJobItems() != null) {
      for (int i = 0; i < getJobItems().size(); i++) {
        if (getJobItems().get(i) != null) {
          joiner.add(getJobItems().get(i).toUrlQueryString(String.format("%sjobItems%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `estimation` to the URL query string
    if (getEstimation() != null) {
      joiner.add(getEstimation().toUrlQueryString(prefix + "estimation" + suffix));
    }

    // add `outputDurationMillis` to the URL query string
    if (getOutputDurationMillis() != null) {
      try {
        joiner.add(String.format("%soutputDurationMillis%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputDurationMillis()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `cost` to the URL query string
    if (getCost() != null) {
      joiner.add(getCost().toUrlQueryString(prefix + "cost" + suffix));
    }

    return joiner.toString();
  }

}

