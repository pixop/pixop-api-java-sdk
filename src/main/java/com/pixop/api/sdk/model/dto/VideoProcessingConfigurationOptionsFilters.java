/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Specifies the filters to apply to the video. To disable a specific filter, set its value to &#x60;null&#x60; or remove the corresponding field. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_DEINTERLACER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_RESHAPER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_DENOISER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_STABILIZER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_AUGMENTER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_SCALER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_FRAME_RATE_CONVERTER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_DEBANDER,
  VideoProcessingConfigurationOptionsFilters.JSON_PROPERTY_POST_PROCESSOR
})
@JsonTypeName("VideoProcessingConfigurationOptions_filters")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsFilters {
  /**
   * Specifies the deinterlacer to use for video processing.  **Additional settings must be set on &#x60;filterSettings.interlacedFieldOrderMode&#x60;** E.g.:    - &#x60;DEINT&#x60;: Pixop Deinterlacer. Pixop&#39;s deep neural network based video deinterlacer which reduces aliasing artifacts such as interline twitter. Doubles the output frame rate.   - &#x60;YADIF&#x60;: “Yet Another DeInterlacing Filter”. Classic deinterlacer which checks the pixels of previous, current and next frames to re-create the missed field via edge-directed interpolation and applies a spatial check to prevent most artifacts.   - &#x60;BWDIF&#x60;: Bob Weaver. Classic deinterlacer based on a motion adaptive approach that fuses the YADIF and Weston 3-Field methods. Doubles the output frame rate.   - &#x60;WESTON3F&#x60;: Weston Three Field. Classic deinterlacer that considers the same position in the previous and next fields and two of its neighbors in both directions in the current field. Doubles the output frame rate. 
   */
  public enum DeinterlacerEnum {
    DEINT(String.valueOf("DEINT")),
    
    YADIF(String.valueOf("YADIF")),
    
    BWDIF(String.valueOf("BWDIF")),
    
    WESTON3_F(String.valueOf("WESTON3F")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    DeinterlacerEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DeinterlacerEnum fromValue(String value) {
      for (DeinterlacerEnum b : DeinterlacerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_DEINTERLACER = "deinterlacer";
  @javax.annotation.Nullable
  private DeinterlacerEnum deinterlacer;

  /**
   * Specifies the reshaper to use for video processing. For instance:   - &#x60;CROP&#x60;: Frame Cropper. **Additional settings must be set on &#x60;filterSettings.normalizedCropCoordinates&#x60;** 
   */
  public enum ReshaperEnum {
    CROP(String.valueOf("CROP")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    ReshaperEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReshaperEnum fromValue(String value) {
      for (ReshaperEnum b : ReshaperEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_RESHAPER = "reshaper";
  @javax.annotation.Nullable
  private ReshaperEnum reshaper;

  /**
   * Specifies the denoiser to use for video processing. For instance: - &#x60;DENOISE&#x60;: Pixop&#39;s deep neural network-based video denoiser trained on a spatio-temporal gaussian noise model. - &#x60;HQDN3D&#x60;: High Quality DeNoise 3D. Classic denoiser based on a three-way low-pass filter, which can completely remove high-frequency noise while minimizing blending artifacts. 
   */
  public enum DenoiserEnum {
    DENOISE(String.valueOf("DENOISE")),
    
    HQDN3_D(String.valueOf("HQDN3D")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    DenoiserEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DenoiserEnum fromValue(String value) {
      for (DenoiserEnum b : DenoiserEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_DENOISER = "denoiser";
  @javax.annotation.Nullable
  private DenoiserEnum denoiser;

  /**
   * Specifies the stabilizer to use for video processing. For instance: - &#x60;DEJIT&#x60;: Pixop Dejitterer. Pixop&#39;s deep neural network based video dejitterer designed for stabilizing video that has been transferred to digital by re-aligning scanlines. 
   */
  public enum StabilizerEnum {
    DEJIT(String.valueOf("DEJIT")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    StabilizerEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StabilizerEnum fromValue(String value) {
      for (StabilizerEnum b : StabilizerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_STABILIZER = "stabilizer";
  @javax.annotation.Nullable
  private StabilizerEnum stabilizer;

  /**
   * Specifies the augmenter to use for video processing. For instance: - &#x60;FACEFORWARD&#x60;: Pixop&#39;s face enhancement augmenter for recordings of human presenters. Makes lighting appear uniform across the entire face of the subject(s), blurs the background and performs color adjustments. To obtain the desired effect, the entire face must be clearly visible, partially front lit, fill at least 5% of the image frame and remain relatively still. **Additional settings must be set on &#x60;filterSettings.faceForward&#x60;** 
   */
  public enum AugmenterEnum {
    FACEFORWARD(String.valueOf("FACEFORWARD")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    AugmenterEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AugmenterEnum fromValue(String value) {
      for (AugmenterEnum b : AugmenterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_AUGMENTER = "augmenter";
  @javax.annotation.Nullable
  private AugmenterEnum augmenter;

  /**
   * Specifies the scaler to use for video processing. **Additional settings must be set on &#x60;filterSettings.resolution&#x60;** when set. For instance:   - &#x60;DVRES2&#x60;: Pixop Deep Restoration 2. Pixop&#39;s improved deep neural network based video restoration algorithm. **Additional settings can be set on &#x60;filterSettings.dvres2Variant&#x60;**   - &#x60;DVRES&#x60;:  Pixop Deep Restoration. Pixop&#39;s original deep neural network based video restoration algorithm. Optionally scales, then deblurs, eliminates compression artifacts and injects details into degraded video (max HD resolution). For fair to good quality digital SD material.   - &#x60;PABSR1&#x60;: Pixop Super Resolution. Pixop&#39;s machine-learned based scaler. Allows upscaling up to 4x of the original displayed frame size. Neither restoration nor AI detail injection is performed. Can optionally be applied without upscaling as final sweetening. **Additional settings must be set on &#x60;filterSettings.clarityBoost&#x60;**   - &#x60;SCALE&#x60;:  Bicubic Interpolation. Classic scaler using the bicubic interpolation resampling method. Allows both upscaling and downscaling. 
   */
  public enum ScalerEnum {
    DVRES2(String.valueOf("DVRES2")),
    
    DVRES(String.valueOf("DVRES")),
    
    PABSR1(String.valueOf("PABSR1")),
    
    SCALE(String.valueOf("SCALE")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    ScalerEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScalerEnum fromValue(String value) {
      for (ScalerEnum b : ScalerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_SCALER = "scaler";
  @javax.annotation.Nullable
  private ScalerEnum scaler;

  /**
   * Specifies the frame rate converter to use for video processing. **Additional settings must be set on &#x60;filterSettings.frameRate&#x60;** when set. For instance:   - &#x60;VFI&#x60;: Pixop Frame Rate Conversion. Pixop&#39;s deep learning method for converting the frame rate accurately by estimating and interpolating the motion between two consecutive frames. Fast motion, line of sight being blocked by an intervening object and scene changes are handled.   - &#x60;FPS&#x60;: Constant FPS. Classic frame rate converter which converts the video to the specified constant frame rate by simply duplicating or dropping source frames as necessary.   - &#x60;FBLEND&#x60;: Frame Blending. Classic frame rate converter that changes the frame rate by blending new video output frames from the source frames.   - &#x60;MCINTERPOLATE&#x60;: Motion Compensation. Classic frame rate converter based on an advanced motion compensation interpolation algorithm. 
   */
  public enum FrameRateConverterEnum {
    VFI(String.valueOf("VFI")),
    
    FPS(String.valueOf("FPS")),
    
    FBLEND(String.valueOf("FBLEND")),
    
    MCINTERPOLATE(String.valueOf("MCINTERPOLATE")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    FrameRateConverterEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FrameRateConverterEnum fromValue(String value) {
      for (FrameRateConverterEnum b : FrameRateConverterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_FRAME_RATE_CONVERTER = "frameRateConverter";
  @javax.annotation.Nullable
  private FrameRateConverterEnum frameRateConverter;

  /**
   * Specifies the debander to use for video processing. For instance: - &#x60;GRADFUN&#x60;: Gradient Debander. Fixes the banding artifacts that are sometimes introduced into nearly flat regions. Interpolate the gradients that should go where the bands are, and dither them. 
   */
  public enum DebanderEnum {
    GRADFUN(String.valueOf("GRADFUN")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    DebanderEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DebanderEnum fromValue(String value) {
      for (DebanderEnum b : DebanderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_DEBANDER = "debander";
  @javax.annotation.Nullable
  private DebanderEnum debander;

  /**
   * Specifies the post-processor to use for video processing. For instance: - &#x60;FILMGRAIN&#x60;: Pixop Film Grain.  Adds a layer of digital film grain to the processed output using a physically-based grain model. By applying this filter, an element of materiality is injected, which makes denoised material look more attractive to some human observers, for example. **Additional settings must be set on &#x60;filterSettings.filmGrain&#x60;** 
   */
  public enum PostProcessorEnum {
    FILMGRAIN(String.valueOf("FILMGRAIN")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    PostProcessorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PostProcessorEnum fromValue(String value) {
      for (PostProcessorEnum b : PostProcessorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_POST_PROCESSOR = "postProcessor";
  @javax.annotation.Nullable
  private PostProcessorEnum postProcessor;

  public VideoProcessingConfigurationOptionsFilters() {
  }

  public VideoProcessingConfigurationOptionsFilters deinterlacer(@javax.annotation.Nullable DeinterlacerEnum deinterlacer) {
    
    this.deinterlacer = deinterlacer;
    return this;
  }

  /**
   * Specifies the deinterlacer to use for video processing.  **Additional settings must be set on &#x60;filterSettings.interlacedFieldOrderMode&#x60;** E.g.:    - &#x60;DEINT&#x60;: Pixop Deinterlacer. Pixop&#39;s deep neural network based video deinterlacer which reduces aliasing artifacts such as interline twitter. Doubles the output frame rate.   - &#x60;YADIF&#x60;: “Yet Another DeInterlacing Filter”. Classic deinterlacer which checks the pixels of previous, current and next frames to re-create the missed field via edge-directed interpolation and applies a spatial check to prevent most artifacts.   - &#x60;BWDIF&#x60;: Bob Weaver. Classic deinterlacer based on a motion adaptive approach that fuses the YADIF and Weston 3-Field methods. Doubles the output frame rate.   - &#x60;WESTON3F&#x60;: Weston Three Field. Classic deinterlacer that considers the same position in the previous and next fields and two of its neighbors in both directions in the current field. Doubles the output frame rate. 
   * @return deinterlacer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEINTERLACER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DeinterlacerEnum getDeinterlacer() {
    return deinterlacer;
  }


  @JsonProperty(JSON_PROPERTY_DEINTERLACER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeinterlacer(@javax.annotation.Nullable DeinterlacerEnum deinterlacer) {
    this.deinterlacer = deinterlacer;
  }

  public VideoProcessingConfigurationOptionsFilters reshaper(@javax.annotation.Nullable ReshaperEnum reshaper) {
    
    this.reshaper = reshaper;
    return this;
  }

  /**
   * Specifies the reshaper to use for video processing. For instance:   - &#x60;CROP&#x60;: Frame Cropper. **Additional settings must be set on &#x60;filterSettings.normalizedCropCoordinates&#x60;** 
   * @return reshaper
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESHAPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReshaperEnum getReshaper() {
    return reshaper;
  }


  @JsonProperty(JSON_PROPERTY_RESHAPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReshaper(@javax.annotation.Nullable ReshaperEnum reshaper) {
    this.reshaper = reshaper;
  }

  public VideoProcessingConfigurationOptionsFilters denoiser(@javax.annotation.Nullable DenoiserEnum denoiser) {
    
    this.denoiser = denoiser;
    return this;
  }

  /**
   * Specifies the denoiser to use for video processing. For instance: - &#x60;DENOISE&#x60;: Pixop&#39;s deep neural network-based video denoiser trained on a spatio-temporal gaussian noise model. - &#x60;HQDN3D&#x60;: High Quality DeNoise 3D. Classic denoiser based on a three-way low-pass filter, which can completely remove high-frequency noise while minimizing blending artifacts. 
   * @return denoiser
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DENOISER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DenoiserEnum getDenoiser() {
    return denoiser;
  }


  @JsonProperty(JSON_PROPERTY_DENOISER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDenoiser(@javax.annotation.Nullable DenoiserEnum denoiser) {
    this.denoiser = denoiser;
  }

  public VideoProcessingConfigurationOptionsFilters stabilizer(@javax.annotation.Nullable StabilizerEnum stabilizer) {
    
    this.stabilizer = stabilizer;
    return this;
  }

  /**
   * Specifies the stabilizer to use for video processing. For instance: - &#x60;DEJIT&#x60;: Pixop Dejitterer. Pixop&#39;s deep neural network based video dejitterer designed for stabilizing video that has been transferred to digital by re-aligning scanlines. 
   * @return stabilizer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STABILIZER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StabilizerEnum getStabilizer() {
    return stabilizer;
  }


  @JsonProperty(JSON_PROPERTY_STABILIZER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStabilizer(@javax.annotation.Nullable StabilizerEnum stabilizer) {
    this.stabilizer = stabilizer;
  }

  public VideoProcessingConfigurationOptionsFilters augmenter(@javax.annotation.Nullable AugmenterEnum augmenter) {
    
    this.augmenter = augmenter;
    return this;
  }

  /**
   * Specifies the augmenter to use for video processing. For instance: - &#x60;FACEFORWARD&#x60;: Pixop&#39;s face enhancement augmenter for recordings of human presenters. Makes lighting appear uniform across the entire face of the subject(s), blurs the background and performs color adjustments. To obtain the desired effect, the entire face must be clearly visible, partially front lit, fill at least 5% of the image frame and remain relatively still. **Additional settings must be set on &#x60;filterSettings.faceForward&#x60;** 
   * @return augmenter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUGMENTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AugmenterEnum getAugmenter() {
    return augmenter;
  }


  @JsonProperty(JSON_PROPERTY_AUGMENTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAugmenter(@javax.annotation.Nullable AugmenterEnum augmenter) {
    this.augmenter = augmenter;
  }

  public VideoProcessingConfigurationOptionsFilters scaler(@javax.annotation.Nullable ScalerEnum scaler) {
    
    this.scaler = scaler;
    return this;
  }

  /**
   * Specifies the scaler to use for video processing. **Additional settings must be set on &#x60;filterSettings.resolution&#x60;** when set. For instance:   - &#x60;DVRES2&#x60;: Pixop Deep Restoration 2. Pixop&#39;s improved deep neural network based video restoration algorithm. **Additional settings can be set on &#x60;filterSettings.dvres2Variant&#x60;**   - &#x60;DVRES&#x60;:  Pixop Deep Restoration. Pixop&#39;s original deep neural network based video restoration algorithm. Optionally scales, then deblurs, eliminates compression artifacts and injects details into degraded video (max HD resolution). For fair to good quality digital SD material.   - &#x60;PABSR1&#x60;: Pixop Super Resolution. Pixop&#39;s machine-learned based scaler. Allows upscaling up to 4x of the original displayed frame size. Neither restoration nor AI detail injection is performed. Can optionally be applied without upscaling as final sweetening. **Additional settings must be set on &#x60;filterSettings.clarityBoost&#x60;**   - &#x60;SCALE&#x60;:  Bicubic Interpolation. Classic scaler using the bicubic interpolation resampling method. Allows both upscaling and downscaling. 
   * @return scaler
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCALER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScalerEnum getScaler() {
    return scaler;
  }


  @JsonProperty(JSON_PROPERTY_SCALER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScaler(@javax.annotation.Nullable ScalerEnum scaler) {
    this.scaler = scaler;
  }

  public VideoProcessingConfigurationOptionsFilters frameRateConverter(@javax.annotation.Nullable FrameRateConverterEnum frameRateConverter) {
    
    this.frameRateConverter = frameRateConverter;
    return this;
  }

  /**
   * Specifies the frame rate converter to use for video processing. **Additional settings must be set on &#x60;filterSettings.frameRate&#x60;** when set. For instance:   - &#x60;VFI&#x60;: Pixop Frame Rate Conversion. Pixop&#39;s deep learning method for converting the frame rate accurately by estimating and interpolating the motion between two consecutive frames. Fast motion, line of sight being blocked by an intervening object and scene changes are handled.   - &#x60;FPS&#x60;: Constant FPS. Classic frame rate converter which converts the video to the specified constant frame rate by simply duplicating or dropping source frames as necessary.   - &#x60;FBLEND&#x60;: Frame Blending. Classic frame rate converter that changes the frame rate by blending new video output frames from the source frames.   - &#x60;MCINTERPOLATE&#x60;: Motion Compensation. Classic frame rate converter based on an advanced motion compensation interpolation algorithm. 
   * @return frameRateConverter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRAME_RATE_CONVERTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FrameRateConverterEnum getFrameRateConverter() {
    return frameRateConverter;
  }


  @JsonProperty(JSON_PROPERTY_FRAME_RATE_CONVERTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrameRateConverter(@javax.annotation.Nullable FrameRateConverterEnum frameRateConverter) {
    this.frameRateConverter = frameRateConverter;
  }

  public VideoProcessingConfigurationOptionsFilters debander(@javax.annotation.Nullable DebanderEnum debander) {
    
    this.debander = debander;
    return this;
  }

  /**
   * Specifies the debander to use for video processing. For instance: - &#x60;GRADFUN&#x60;: Gradient Debander. Fixes the banding artifacts that are sometimes introduced into nearly flat regions. Interpolate the gradients that should go where the bands are, and dither them. 
   * @return debander
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEBANDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DebanderEnum getDebander() {
    return debander;
  }


  @JsonProperty(JSON_PROPERTY_DEBANDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDebander(@javax.annotation.Nullable DebanderEnum debander) {
    this.debander = debander;
  }

  public VideoProcessingConfigurationOptionsFilters postProcessor(@javax.annotation.Nullable PostProcessorEnum postProcessor) {
    
    this.postProcessor = postProcessor;
    return this;
  }

  /**
   * Specifies the post-processor to use for video processing. For instance: - &#x60;FILMGRAIN&#x60;: Pixop Film Grain.  Adds a layer of digital film grain to the processed output using a physically-based grain model. By applying this filter, an element of materiality is injected, which makes denoised material look more attractive to some human observers, for example. **Additional settings must be set on &#x60;filterSettings.filmGrain&#x60;** 
   * @return postProcessor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POST_PROCESSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostProcessorEnum getPostProcessor() {
    return postProcessor;
  }


  @JsonProperty(JSON_PROPERTY_POST_PROCESSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostProcessor(@javax.annotation.Nullable PostProcessorEnum postProcessor) {
    this.postProcessor = postProcessor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilters videoProcessingConfigurationOptionsFilters = (VideoProcessingConfigurationOptionsFilters) o;
    return Objects.equals(this.deinterlacer, videoProcessingConfigurationOptionsFilters.deinterlacer) &&
        Objects.equals(this.reshaper, videoProcessingConfigurationOptionsFilters.reshaper) &&
        Objects.equals(this.denoiser, videoProcessingConfigurationOptionsFilters.denoiser) &&
        Objects.equals(this.stabilizer, videoProcessingConfigurationOptionsFilters.stabilizer) &&
        Objects.equals(this.augmenter, videoProcessingConfigurationOptionsFilters.augmenter) &&
        Objects.equals(this.scaler, videoProcessingConfigurationOptionsFilters.scaler) &&
        Objects.equals(this.frameRateConverter, videoProcessingConfigurationOptionsFilters.frameRateConverter) &&
        Objects.equals(this.debander, videoProcessingConfigurationOptionsFilters.debander) &&
        Objects.equals(this.postProcessor, videoProcessingConfigurationOptionsFilters.postProcessor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deinterlacer, reshaper, denoiser, stabilizer, augmenter, scaler, frameRateConverter, debander, postProcessor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilters {\n");
    sb.append("    deinterlacer: ").append(toIndentedString(deinterlacer)).append("\n");
    sb.append("    reshaper: ").append(toIndentedString(reshaper)).append("\n");
    sb.append("    denoiser: ").append(toIndentedString(denoiser)).append("\n");
    sb.append("    stabilizer: ").append(toIndentedString(stabilizer)).append("\n");
    sb.append("    augmenter: ").append(toIndentedString(augmenter)).append("\n");
    sb.append("    scaler: ").append(toIndentedString(scaler)).append("\n");
    sb.append("    frameRateConverter: ").append(toIndentedString(frameRateConverter)).append("\n");
    sb.append("    debander: ").append(toIndentedString(debander)).append("\n");
    sb.append("    postProcessor: ").append(toIndentedString(postProcessor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `deinterlacer` to the URL query string
    if (getDeinterlacer() != null) {
      try {
        joiner.add(String.format("%sdeinterlacer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDeinterlacer()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `reshaper` to the URL query string
    if (getReshaper() != null) {
      try {
        joiner.add(String.format("%sreshaper%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReshaper()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `denoiser` to the URL query string
    if (getDenoiser() != null) {
      try {
        joiner.add(String.format("%sdenoiser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDenoiser()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `stabilizer` to the URL query string
    if (getStabilizer() != null) {
      try {
        joiner.add(String.format("%sstabilizer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStabilizer()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `augmenter` to the URL query string
    if (getAugmenter() != null) {
      try {
        joiner.add(String.format("%saugmenter%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAugmenter()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scaler` to the URL query string
    if (getScaler() != null) {
      try {
        joiner.add(String.format("%sscaler%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScaler()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `frameRateConverter` to the URL query string
    if (getFrameRateConverter() != null) {
      try {
        joiner.add(String.format("%sframeRateConverter%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFrameRateConverter()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `debander` to the URL query string
    if (getDebander() != null) {
      try {
        joiner.add(String.format("%sdebander%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDebander()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `postProcessor` to the URL query string
    if (getPostProcessor() != null) {
      try {
        joiner.add(String.format("%spostProcessor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPostProcessor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

