/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.WebhookEventType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Defines the fields that can be updated for an existing webhook.   Use this object to partially modify webhook properties. 
 */
@JsonPropertyOrder({
  WebhookPatch.JSON_PROPERTY_NAME,
  WebhookPatch.JSON_PROPERTY_DESCRIPTION,
  WebhookPatch.JSON_PROPERTY_URL,
  WebhookPatch.JSON_PROPERTY_RATE_LIMIT_PER_SECOND,
  WebhookPatch.JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES,
  WebhookPatch.JSON_PROPERTY_EVENT_TYPES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class WebhookPatch {
  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nullable
  private String url;

  public static final String JSON_PROPERTY_RATE_LIMIT_PER_SECOND = "rateLimitPerSecond";
  @javax.annotation.Nullable
  private Integer rateLimitPerSecond;

  public static final String JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES = "maxTotalRetryDelayMinutes";
  @javax.annotation.Nullable
  private Integer maxTotalRetryDelayMinutes;

  public static final String JSON_PROPERTY_EVENT_TYPES = "eventTypes";
  @javax.annotation.Nullable
  private List<WebhookEventType> eventTypes;

  public WebhookPatch() {
  }

  public WebhookPatch name(@javax.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * A user-defined name to help identify and organize the webhook.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }

  public WebhookPatch description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * A user-defined description providing context about the webhook’s purpose or usage.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public WebhookPatch url(@javax.annotation.Nullable String url) {
    
    this.url = url;
    return this;
  }

  /**
   * A URL that must use HTTPS and point to a publicly reachable address. Only port 443 is allowed for HTTPS URLs. The following addresses are not allowed: - Loopback (e.g., 127.x.x.x, ::1) - Site-local (RFC1918) addresses (e.g., 10.x.x.x, 192.168.x.x, 172.16–31.x.x, IPv6 unique-local) - Link-local addresses (e.g., 169.254.x.x, fe80::/10) - Multicast addresses (e.g., 224.0.0.0–239.255.255.255, ff00::/8)  The server will parse the URL, resolve its host, and reject any internal or non-public address. 
   * @return url
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }

  public WebhookPatch rateLimitPerSecond(@javax.annotation.Nullable Integer rateLimitPerSecond) {
    
    this.rateLimitPerSecond = rateLimitPerSecond;
    return this;
  }

  /**
   * The maximum number of requests per second that Pixop will send to the webhook URL.   This rate limit is enforced to avoid overwhelming the receiving system. 
   * minimum: 1
   * maximum: 1000
   * @return rateLimitPerSecond
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RATE_LIMIT_PER_SECOND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRateLimitPerSecond() {
    return rateLimitPerSecond;
  }


  @JsonProperty(JSON_PROPERTY_RATE_LIMIT_PER_SECOND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRateLimitPerSecond(@javax.annotation.Nullable Integer rateLimitPerSecond) {
    this.rateLimitPerSecond = rateLimitPerSecond;
  }

  public WebhookPatch maxTotalRetryDelayMinutes(@javax.annotation.Nullable Integer maxTotalRetryDelayMinutes) {
    
    this.maxTotalRetryDelayMinutes = maxTotalRetryDelayMinutes;
    return this;
  }

  /**
   * The maximum total duration, in minutes, over which retry attempts will be made for a failed webhook event.   Once this threshold is reached, no further retries will be performed. 
   * minimum: 0
   * maximum: 1440
   * @return maxTotalRetryDelayMinutes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxTotalRetryDelayMinutes() {
    return maxTotalRetryDelayMinutes;
  }


  @JsonProperty(JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxTotalRetryDelayMinutes(@javax.annotation.Nullable Integer maxTotalRetryDelayMinutes) {
    this.maxTotalRetryDelayMinutes = maxTotalRetryDelayMinutes;
  }

  public WebhookPatch eventTypes(@javax.annotation.Nullable List<WebhookEventType> eventTypes) {
    
    this.eventTypes = eventTypes;
    return this;
  }

  public WebhookPatch addEventTypesItem(WebhookEventType eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

  /**
   * Get eventTypes
   * @return eventTypes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WebhookEventType> getEventTypes() {
    return eventTypes;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventTypes(@javax.annotation.Nullable List<WebhookEventType> eventTypes) {
    this.eventTypes = eventTypes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookPatch webhookPatch = (WebhookPatch) o;
    return Objects.equals(this.name, webhookPatch.name) &&
        Objects.equals(this.description, webhookPatch.description) &&
        Objects.equals(this.url, webhookPatch.url) &&
        Objects.equals(this.rateLimitPerSecond, webhookPatch.rateLimitPerSecond) &&
        Objects.equals(this.maxTotalRetryDelayMinutes, webhookPatch.maxTotalRetryDelayMinutes) &&
        Objects.equals(this.eventTypes, webhookPatch.eventTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, url, rateLimitPerSecond, maxTotalRetryDelayMinutes, eventTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookPatch {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    rateLimitPerSecond: ").append(toIndentedString(rateLimitPerSecond)).append("\n");
    sb.append("    maxTotalRetryDelayMinutes: ").append(toIndentedString(maxTotalRetryDelayMinutes)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `url` to the URL query string
    if (getUrl() != null) {
      try {
        joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rateLimitPerSecond` to the URL query string
    if (getRateLimitPerSecond() != null) {
      try {
        joiner.add(String.format("%srateLimitPerSecond%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRateLimitPerSecond()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `maxTotalRetryDelayMinutes` to the URL query string
    if (getMaxTotalRetryDelayMinutes() != null) {
      try {
        joiner.add(String.format("%smaxTotalRetryDelayMinutes%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTotalRetryDelayMinutes()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `eventTypes` to the URL query string
    if (getEventTypes() != null) {
      for (int i = 0; i < getEventTypes().size(); i++) {
        if (getEventTypes().get(i) != null) {
          try {
            joiner.add(String.format("%seventTypes%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getEventTypes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    return joiner.toString();
  }

}

