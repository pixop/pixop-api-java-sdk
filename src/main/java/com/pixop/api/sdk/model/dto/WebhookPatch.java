/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.WebhookEventType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Defines the fields that can be updated for an existing webhook.   Use this object to partially modify webhook properties. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class WebhookPatch {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_RATE_LIMIT_PER_SECOND = "rateLimitPerSecond";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_PER_SECOND)
  @javax.annotation.Nullable
  private Integer rateLimitPerSecond;

  public static final String SERIALIZED_NAME_MAX_TOTAL_RETRY_DELAY_MINUTES = "maxTotalRetryDelayMinutes";
  @SerializedName(SERIALIZED_NAME_MAX_TOTAL_RETRY_DELAY_MINUTES)
  @javax.annotation.Nullable
  private Integer maxTotalRetryDelayMinutes;

  public static final String SERIALIZED_NAME_EVENT_TYPES = "eventTypes";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  @javax.annotation.Nullable
  private List<WebhookEventType> eventTypes;

  public WebhookPatch() {
  }

  public WebhookPatch name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * A user-defined name to help identify and organize the webhook.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public WebhookPatch description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A user-defined description providing context about the webhook’s purpose or usage.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public WebhookPatch url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * A webhook URL that must follow the same rules as &#x60;HttpsURL&#x60;, but **must not** contain user information (i.e. a &#x60;username:password&#x60; pair in the URL).  **Invalid example** — user info is not allowed: - &#x60;https://user:pass@webhook.example.com/callback&#x60;  **Valid examples**: - &#x60;https://webhook.example.com/callback&#x60; - &#x60;https://api.example.com/webhooks/event&#x60;  &#x60;HttpsURL&#x60;:  A URL that must use HTTPS and point to a publicly reachable address. Only port 443 is allowed for HTTPS URLs. The following addresses are not allowed: - Loopback (e.g., 127.x.x.x, ::1) - Site-local (RFC1918) addresses (e.g., 10.x.x.x, 192.168.x.x, 172.16–31.x.x, IPv6 unique-local) - Link-local addresses (e.g., 169.254.x.x, fe80::/10) - Multicast addresses (e.g., 224.0.0.0–239.255.255.255, ff00::/8)  The server will parse the URL, resolve its host, and reject any internal or non-public address. 
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public WebhookPatch rateLimitPerSecond(@javax.annotation.Nullable Integer rateLimitPerSecond) {
    this.rateLimitPerSecond = rateLimitPerSecond;
    return this;
  }

  /**
   * The maximum number of requests per second that Pixop will send to the webhook URL.   This rate limit is enforced to avoid overwhelming the receiving system. 
   * minimum: 1
   * maximum: 1000
   * @return rateLimitPerSecond
   */
  @javax.annotation.Nullable
  public Integer getRateLimitPerSecond() {
    return rateLimitPerSecond;
  }

  public void setRateLimitPerSecond(@javax.annotation.Nullable Integer rateLimitPerSecond) {
    this.rateLimitPerSecond = rateLimitPerSecond;
  }


  public WebhookPatch maxTotalRetryDelayMinutes(@javax.annotation.Nullable Integer maxTotalRetryDelayMinutes) {
    this.maxTotalRetryDelayMinutes = maxTotalRetryDelayMinutes;
    return this;
  }

  /**
   * The maximum total duration, in minutes, over which retry attempts will be made for a failed webhook event.   Once this threshold is reached, no further retries will be performed. 
   * minimum: 0
   * maximum: 1440
   * @return maxTotalRetryDelayMinutes
   */
  @javax.annotation.Nullable
  public Integer getMaxTotalRetryDelayMinutes() {
    return maxTotalRetryDelayMinutes;
  }

  public void setMaxTotalRetryDelayMinutes(@javax.annotation.Nullable Integer maxTotalRetryDelayMinutes) {
    this.maxTotalRetryDelayMinutes = maxTotalRetryDelayMinutes;
  }


  public WebhookPatch eventTypes(@javax.annotation.Nullable List<WebhookEventType> eventTypes) {
    this.eventTypes = eventTypes;
    return this;
  }

  public WebhookPatch addEventTypesItem(WebhookEventType eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

  /**
   * A list of event types the webhook is subscribed to.   The webhook will receive notifications for all specified event types. Each event type corresponds to a specific stage or outcome in the processing pipeline. - &#x60;video_in.started&#x60;: Input video copy operation has started - &#x60;video_in.done&#x60;: Input video copy operation completed - &#x60;video_in.failed&#x60;: Input video copy operation failed - &#x60;video_in.cancelled&#x60;: Input video copy operation was cancelled - &#x60;video_in_ingestion.started&#x60;: Ingestion of input video has started - &#x60;video_in_ingestion.done&#x60;: Ingestion of input video completed - &#x60;video_in_ingestion.failed&#x60;: Ingestion of input video failed - &#x60;video_in_ingestion.cancelled&#x60;: Ingestion of input video was cancelled - &#x60;clip_processing.started&#x60;: Video clip processing has started - &#x60;clip_processing.done&#x60;: Video clip processing completed - &#x60;clip_processing.failed&#x60;: Video clip processing failed - &#x60;clip_processing.cancelled&#x60;: Video clip processing was cancelled - &#x60;clip_ingestion.started&#x60;: Ingestion of video clip has started - &#x60;clip_ingestion.done&#x60;: Ingestion of video clip completed - &#x60;clip_ingestion.failed&#x60;: Ingestion of video clip failed - &#x60;clip_ingestion.cancelled&#x60;: Ingestion of video clip was cancelled - &#x60;video_processing.started&#x60;: Video processing has started - &#x60;video_processing.done&#x60;: Video processing completed - &#x60;video_processing.failed&#x60;: Video processing failed - &#x60;video_processing.cancelled&#x60;: Video processing was cancelled - &#x60;video_processing_ingestion.started&#x60;: Ingestion of processed video has started - &#x60;video_processing_ingestion.done&#x60;: Ingestion of processed video completed - &#x60;video_processing_ingestion.failed&#x60;: Ingestion of processed video failed - &#x60;video_processing_ingestion.cancelled&#x60;: Ingestion of processed video was cancelled - &#x60;video_out.started&#x60;: Output video copy operation has started - &#x60;video_out.done&#x60;: Output video copy operation completed - &#x60;video_out.failed&#x60;: Output video copy operation failed - &#x60;video_out.cancelled&#x60;: Output video copy operation was cancelled 
   * @return eventTypes
   */
  @javax.annotation.Nullable
  public List<WebhookEventType> getEventTypes() {
    return eventTypes;
  }

  public void setEventTypes(@javax.annotation.Nullable List<WebhookEventType> eventTypes) {
    this.eventTypes = eventTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookPatch webhookPatch = (WebhookPatch) o;
    return Objects.equals(this.name, webhookPatch.name) &&
        Objects.equals(this.description, webhookPatch.description) &&
        Objects.equals(this.url, webhookPatch.url) &&
        Objects.equals(this.rateLimitPerSecond, webhookPatch.rateLimitPerSecond) &&
        Objects.equals(this.maxTotalRetryDelayMinutes, webhookPatch.maxTotalRetryDelayMinutes) &&
        Objects.equals(this.eventTypes, webhookPatch.eventTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, url, rateLimitPerSecond, maxTotalRetryDelayMinutes, eventTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookPatch {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    rateLimitPerSecond: ").append(toIndentedString(rateLimitPerSecond)).append("\n");
    sb.append("    maxTotalRetryDelayMinutes: ").append(toIndentedString(maxTotalRetryDelayMinutes)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("url");
    openapiFields.add("rateLimitPerSecond");
    openapiFields.add("maxTotalRetryDelayMinutes");
    openapiFields.add("eventTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookPatch is not found in the empty JSON string", WebhookPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventTypes") != null && !jsonObj.get("eventTypes").isJsonNull() && !jsonObj.get("eventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("eventTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookPatch>() {
           @Override
           public void write(JsonWriter out, WebhookPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookPatch
   * @throws IOException if the JSON string is invalid with respect to WebhookPatch
   */
  public static WebhookPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookPatch.class);
  }

  /**
   * Convert an instance of WebhookPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

