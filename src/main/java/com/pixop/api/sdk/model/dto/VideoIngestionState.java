/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.OperationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents the state of the video ingestion process, including status and progress indicators.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoIngestionState {
  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ETA_SECONDS = "etaSeconds";
  @SerializedName(SERIALIZED_NAME_ETA_SECONDS)
  @javax.annotation.Nullable
  private Integer etaSeconds;

  public static final String SERIALIZED_NAME_INGESTION_STATUS = "ingestionStatus";
  @SerializedName(SERIALIZED_NAME_INGESTION_STATUS)
  @javax.annotation.Nullable
  private OperationStatus ingestionStatus;

  public static final String SERIALIZED_NAME_WEB_VIDEO_AVAILABLE = "webVideoAvailable";
  @SerializedName(SERIALIZED_NAME_WEB_VIDEO_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean webVideoAvailable = false;

  public static final String SERIALIZED_NAME_THUMBNAILS_AVAILABLE = "thumbnailsAvailable";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean thumbnailsAvailable = false;

  public static final String SERIALIZED_NAME_FULL_FRAMES_AVAILABLE = "fullFramesAvailable";
  @SerializedName(SERIALIZED_NAME_FULL_FRAMES_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean fullFramesAvailable = false;

  public static final String SERIALIZED_NAME_VIDEO_METADATA_AVAILABLE = "videoMetadataAvailable";
  @SerializedName(SERIALIZED_NAME_VIDEO_METADATA_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean videoMetadataAvailable = false;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENTAGE = "progressPercentage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENTAGE)
  @javax.annotation.Nullable
  private Integer progressPercentage;

  public VideoIngestionState() {
  }

  public VideoIngestionState updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time of the last update to the ingestion state.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public VideoIngestionState etaSeconds(@javax.annotation.Nullable Integer etaSeconds) {
    this.etaSeconds = etaSeconds;
    return this;
  }

  /**
   * The estimated time remaining for ingestion completion, in seconds.
   * @return etaSeconds
   */
  @javax.annotation.Nullable
  public Integer getEtaSeconds() {
    return etaSeconds;
  }

  public void setEtaSeconds(@javax.annotation.Nullable Integer etaSeconds) {
    this.etaSeconds = etaSeconds;
  }


  public VideoIngestionState ingestionStatus(@javax.annotation.Nullable OperationStatus ingestionStatus) {
    this.ingestionStatus = ingestionStatus;
    return this;
  }

  /**
   * The current status of the ingestion process.
   * @return ingestionStatus
   */
  @javax.annotation.Nullable
  public OperationStatus getIngestionStatus() {
    return ingestionStatus;
  }

  public void setIngestionStatus(@javax.annotation.Nullable OperationStatus ingestionStatus) {
    this.ingestionStatus = ingestionStatus;
  }


  public VideoIngestionState webVideoAvailable(@javax.annotation.Nullable Boolean webVideoAvailable) {
    this.webVideoAvailable = webVideoAvailable;
    return this;
  }

  /**
   * Indicates if a web-compatible video format is available.
   * @return webVideoAvailable
   */
  @javax.annotation.Nullable
  public Boolean getWebVideoAvailable() {
    return webVideoAvailable;
  }

  public void setWebVideoAvailable(@javax.annotation.Nullable Boolean webVideoAvailable) {
    this.webVideoAvailable = webVideoAvailable;
  }


  public VideoIngestionState thumbnailsAvailable(@javax.annotation.Nullable Boolean thumbnailsAvailable) {
    this.thumbnailsAvailable = thumbnailsAvailable;
    return this;
  }

  /**
   * Indicates if thumbnails have been generated for the video.
   * @return thumbnailsAvailable
   */
  @javax.annotation.Nullable
  public Boolean getThumbnailsAvailable() {
    return thumbnailsAvailable;
  }

  public void setThumbnailsAvailable(@javax.annotation.Nullable Boolean thumbnailsAvailable) {
    this.thumbnailsAvailable = thumbnailsAvailable;
  }


  public VideoIngestionState fullFramesAvailable(@javax.annotation.Nullable Boolean fullFramesAvailable) {
    this.fullFramesAvailable = fullFramesAvailable;
    return this;
  }

  /**
   * Indicates if full-frame images have been generated for the video.
   * @return fullFramesAvailable
   */
  @javax.annotation.Nullable
  public Boolean getFullFramesAvailable() {
    return fullFramesAvailable;
  }

  public void setFullFramesAvailable(@javax.annotation.Nullable Boolean fullFramesAvailable) {
    this.fullFramesAvailable = fullFramesAvailable;
  }


  public VideoIngestionState videoMetadataAvailable(@javax.annotation.Nullable Boolean videoMetadataAvailable) {
    this.videoMetadataAvailable = videoMetadataAvailable;
    return this;
  }

  /**
   * Indicates if the metadata for the video has been extracted and is available.
   * @return videoMetadataAvailable
   */
  @javax.annotation.Nullable
  public Boolean getVideoMetadataAvailable() {
    return videoMetadataAvailable;
  }

  public void setVideoMetadataAvailable(@javax.annotation.Nullable Boolean videoMetadataAvailable) {
    this.videoMetadataAvailable = videoMetadataAvailable;
  }


  public VideoIngestionState progressPercentage(@javax.annotation.Nullable Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
    return this;
  }

  /**
   * A percentage value represented as an integer. Commonly used to denote progress or completion levels. E.g., 0, 50, 100.
   * minimum: 0
   * maximum: 100
   * @return progressPercentage
   */
  @javax.annotation.Nullable
  public Integer getProgressPercentage() {
    return progressPercentage;
  }

  public void setProgressPercentage(@javax.annotation.Nullable Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoIngestionState videoIngestionState = (VideoIngestionState) o;
    return Objects.equals(this.updatedAt, videoIngestionState.updatedAt) &&
        Objects.equals(this.etaSeconds, videoIngestionState.etaSeconds) &&
        Objects.equals(this.ingestionStatus, videoIngestionState.ingestionStatus) &&
        Objects.equals(this.webVideoAvailable, videoIngestionState.webVideoAvailable) &&
        Objects.equals(this.thumbnailsAvailable, videoIngestionState.thumbnailsAvailable) &&
        Objects.equals(this.fullFramesAvailable, videoIngestionState.fullFramesAvailable) &&
        Objects.equals(this.videoMetadataAvailable, videoIngestionState.videoMetadataAvailable) &&
        Objects.equals(this.progressPercentage, videoIngestionState.progressPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updatedAt, etaSeconds, ingestionStatus, webVideoAvailable, thumbnailsAvailable, fullFramesAvailable, videoMetadataAvailable, progressPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoIngestionState {\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    etaSeconds: ").append(toIndentedString(etaSeconds)).append("\n");
    sb.append("    ingestionStatus: ").append(toIndentedString(ingestionStatus)).append("\n");
    sb.append("    webVideoAvailable: ").append(toIndentedString(webVideoAvailable)).append("\n");
    sb.append("    thumbnailsAvailable: ").append(toIndentedString(thumbnailsAvailable)).append("\n");
    sb.append("    fullFramesAvailable: ").append(toIndentedString(fullFramesAvailable)).append("\n");
    sb.append("    videoMetadataAvailable: ").append(toIndentedString(videoMetadataAvailable)).append("\n");
    sb.append("    progressPercentage: ").append(toIndentedString(progressPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("updatedAt");
    openapiFields.add("etaSeconds");
    openapiFields.add("ingestionStatus");
    openapiFields.add("webVideoAvailable");
    openapiFields.add("thumbnailsAvailable");
    openapiFields.add("fullFramesAvailable");
    openapiFields.add("videoMetadataAvailable");
    openapiFields.add("progressPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoIngestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoIngestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoIngestionState is not found in the empty JSON string", VideoIngestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoIngestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoIngestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ingestionStatus`
      if (jsonObj.get("ingestionStatus") != null && !jsonObj.get("ingestionStatus").isJsonNull()) {
        OperationStatus.validateJsonElement(jsonObj.get("ingestionStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoIngestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoIngestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoIngestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoIngestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoIngestionState>() {
           @Override
           public void write(JsonWriter out, VideoIngestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoIngestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoIngestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoIngestionState
   * @throws IOException if the JSON string is invalid with respect to VideoIngestionState
   */
  public static VideoIngestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoIngestionState.class);
  }

  /**
   * Convert an instance of VideoIngestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

