/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.TransactionTotalsByCategory;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * A summary of transaction totals categorized by type, including overall totals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class TransactionTotals {
  public static final String SERIALIZED_NAME_TOTALS_FOR_ALL_CATEGORIES = "totalsForAllCategories";
  @SerializedName(SERIALIZED_NAME_TOTALS_FOR_ALL_CATEGORIES)
  @javax.annotation.Nullable
  private TransactionTotalsByCategory totalsForAllCategories;

  public static final String SERIALIZED_NAME_TOTALS_BY_CATEGORY = "totalsByCategory";
  @SerializedName(SERIALIZED_NAME_TOTALS_BY_CATEGORY)
  @javax.annotation.Nullable
  private List<TransactionTotalsByCategory> totalsByCategory = new ArrayList<>();

  public TransactionTotals() {
  }

  public TransactionTotals(
     TransactionTotalsByCategory totalsForAllCategories
  ) {
    this();
    this.totalsForAllCategories = totalsForAllCategories;
  }

  /**
   * The aggregate totals for all transaction categories.
   * @return totalsForAllCategories
   */
  @javax.annotation.Nullable
  public TransactionTotalsByCategory getTotalsForAllCategories() {
    return totalsForAllCategories;
  }



  public TransactionTotals totalsByCategory(@javax.annotation.Nullable List<TransactionTotalsByCategory> totalsByCategory) {
    this.totalsByCategory = totalsByCategory;
    return this;
  }

  public TransactionTotals addTotalsByCategoryItem(TransactionTotalsByCategory totalsByCategoryItem) {
    if (this.totalsByCategory == null) {
      this.totalsByCategory = new ArrayList<>();
    }
    this.totalsByCategory.add(totalsByCategoryItem);
    return this;
  }

  /**
   * The list of transaction totals grouped by category.
   * @return totalsByCategory
   */
  @javax.annotation.Nullable
  public List<TransactionTotalsByCategory> getTotalsByCategory() {
    return totalsByCategory;
  }

  public void setTotalsByCategory(@javax.annotation.Nullable List<TransactionTotalsByCategory> totalsByCategory) {
    this.totalsByCategory = totalsByCategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionTotals transactionTotals = (TransactionTotals) o;
    return Objects.equals(this.totalsForAllCategories, transactionTotals.totalsForAllCategories) &&
        Objects.equals(this.totalsByCategory, transactionTotals.totalsByCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalsForAllCategories, totalsByCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionTotals {\n");
    sb.append("    totalsForAllCategories: ").append(toIndentedString(totalsForAllCategories)).append("\n");
    sb.append("    totalsByCategory: ").append(toIndentedString(totalsByCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalsForAllCategories");
    openapiFields.add("totalsByCategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionTotals
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionTotals.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionTotals is not found in the empty JSON string", TransactionTotals.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionTotals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionTotals` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `totalsForAllCategories`
      if (jsonObj.get("totalsForAllCategories") != null && !jsonObj.get("totalsForAllCategories").isJsonNull()) {
        TransactionTotalsByCategory.validateJsonElement(jsonObj.get("totalsForAllCategories"));
      }
      if (jsonObj.get("totalsByCategory") != null && !jsonObj.get("totalsByCategory").isJsonNull()) {
        JsonArray jsonArraytotalsByCategory = jsonObj.getAsJsonArray("totalsByCategory");
        if (jsonArraytotalsByCategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("totalsByCategory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `totalsByCategory` to be an array in the JSON string but got `%s`", jsonObj.get("totalsByCategory").toString()));
          }

          // validate the optional field `totalsByCategory` (array)
          for (int i = 0; i < jsonArraytotalsByCategory.size(); i++) {
            TransactionTotalsByCategory.validateJsonElement(jsonArraytotalsByCategory.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionTotals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionTotals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionTotals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionTotals.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionTotals>() {
           @Override
           public void write(JsonWriter out, TransactionTotals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionTotals read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionTotals given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionTotals
   * @throws IOException if the JSON string is invalid with respect to TransactionTotals
   */
  public static TransactionTotals fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionTotals.class);
  }

  /**
   * Convert an instance of TransactionTotals to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

