/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.Category;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A breakdown of transaction totals for a specific category.
 */
@JsonPropertyOrder({
  TransactionTotalsByCategory.JSON_PROPERTY_CATEGORY,
  TransactionTotalsByCategory.JSON_PROPERTY_TOTAL_CREDIT_USD,
  TransactionTotalsByCategory.JSON_PROPERTY_TOTAL_DEBIT_USD,
  TransactionTotalsByCategory.JSON_PROPERTY_NET_TOTAL_USD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class TransactionTotalsByCategory {
  public static final String JSON_PROPERTY_CATEGORY = "category";
  @javax.annotation.Nullable
  private Category category;

  public static final String JSON_PROPERTY_TOTAL_CREDIT_USD = "totalCreditUsd";
  @javax.annotation.Nullable
  private BigDecimal totalCreditUsd;

  public static final String JSON_PROPERTY_TOTAL_DEBIT_USD = "totalDebitUsd";
  @javax.annotation.Nullable
  private BigDecimal totalDebitUsd;

  public static final String JSON_PROPERTY_NET_TOTAL_USD = "netTotalUsd";
  @javax.annotation.Nullable
  private BigDecimal netTotalUsd;

  public TransactionTotalsByCategory() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public TransactionTotalsByCategory(
    @JsonProperty(JSON_PROPERTY_CATEGORY) Category category
  ) {
    this();
    this.category = category;
  }

  /**
   * The category of the transactions being summed.
   * @return category
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Category getCategory() {
    return category;
  }



  public TransactionTotalsByCategory totalCreditUsd(@javax.annotation.Nullable BigDecimal totalCreditUsd) {
    
    this.totalCreditUsd = totalCreditUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalCreditUsd
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_CREDIT_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTotalCreditUsd() {
    return totalCreditUsd;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_CREDIT_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalCreditUsd(@javax.annotation.Nullable BigDecimal totalCreditUsd) {
    this.totalCreditUsd = totalCreditUsd;
  }

  public TransactionTotalsByCategory totalDebitUsd(@javax.annotation.Nullable BigDecimal totalDebitUsd) {
    
    this.totalDebitUsd = totalDebitUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return totalDebitUsd
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_DEBIT_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTotalDebitUsd() {
    return totalDebitUsd;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_DEBIT_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalDebitUsd(@javax.annotation.Nullable BigDecimal totalDebitUsd) {
    this.totalDebitUsd = totalDebitUsd;
  }

  public TransactionTotalsByCategory netTotalUsd(@javax.annotation.Nullable BigDecimal netTotalUsd) {
    
    this.netTotalUsd = netTotalUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return netTotalUsd
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_TOTAL_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNetTotalUsd() {
    return netTotalUsd;
  }


  @JsonProperty(JSON_PROPERTY_NET_TOTAL_USD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetTotalUsd(@javax.annotation.Nullable BigDecimal netTotalUsd) {
    this.netTotalUsd = netTotalUsd;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionTotalsByCategory transactionTotalsByCategory = (TransactionTotalsByCategory) o;
    return Objects.equals(this.category, transactionTotalsByCategory.category) &&
        Objects.equals(this.totalCreditUsd, transactionTotalsByCategory.totalCreditUsd) &&
        Objects.equals(this.totalDebitUsd, transactionTotalsByCategory.totalDebitUsd) &&
        Objects.equals(this.netTotalUsd, transactionTotalsByCategory.netTotalUsd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, totalCreditUsd, totalDebitUsd, netTotalUsd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionTotalsByCategory {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    totalCreditUsd: ").append(toIndentedString(totalCreditUsd)).append("\n");
    sb.append("    totalDebitUsd: ").append(toIndentedString(totalDebitUsd)).append("\n");
    sb.append("    netTotalUsd: ").append(toIndentedString(netTotalUsd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `category` to the URL query string
    if (getCategory() != null) {
      try {
        joiner.add(String.format("%scategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCategory()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalCreditUsd` to the URL query string
    if (getTotalCreditUsd() != null) {
      try {
        joiner.add(String.format("%stotalCreditUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalCreditUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalDebitUsd` to the URL query string
    if (getTotalDebitUsd() != null) {
      try {
        joiner.add(String.format("%stotalDebitUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalDebitUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `netTotalUsd` to the URL query string
    if (getNetTotalUsd() != null) {
      try {
        joiner.add(String.format("%snetTotalUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNetTotalUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

