/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.SourceVideo;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptions;
import com.pixop.api.sdk.model.dto.VideoProcessingState;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the processing details of a video, including its state, source video, and applied processing options.
 */
@JsonPropertyOrder({
  VideoProcessing.JSON_PROPERTY_PROCESSING_STATE,
  VideoProcessing.JSON_PROPERTY_SOURCE_VIDEO,
  VideoProcessing.JSON_PROPERTY_OPTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessing {
  public static final String JSON_PROPERTY_PROCESSING_STATE = "processingState";
  @javax.annotation.Nullable
  private VideoProcessingState processingState;

  public static final String JSON_PROPERTY_SOURCE_VIDEO = "sourceVideo";
  @javax.annotation.Nullable
  private SourceVideo sourceVideo;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptions options;

  public VideoProcessing() {
  }

  public VideoProcessing processingState(@javax.annotation.Nullable VideoProcessingState processingState) {
    
    this.processingState = processingState;
    return this;
  }

  /**
   * The current state of the video processing operation.
   * @return processingState
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingState getProcessingState() {
    return processingState;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingState(@javax.annotation.Nullable VideoProcessingState processingState) {
    this.processingState = processingState;
  }

  public VideoProcessing sourceVideo(@javax.annotation.Nullable SourceVideo sourceVideo) {
    
    this.sourceVideo = sourceVideo;
    return this;
  }

  /**
   * Information about the source video used for processing.
   * @return sourceVideo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_VIDEO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceVideo getSourceVideo() {
    return sourceVideo;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_VIDEO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceVideo(@javax.annotation.Nullable SourceVideo sourceVideo) {
    this.sourceVideo = sourceVideo;
  }

  public VideoProcessing options(@javax.annotation.Nullable VideoProcessingConfigurationOptions options) {
    
    this.options = options;
    return this;
  }

  /**
   * The configuration options applied to the video processing.
   * @return options
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptions getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(@javax.annotation.Nullable VideoProcessingConfigurationOptions options) {
    this.options = options;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessing videoProcessing = (VideoProcessing) o;
    return Objects.equals(this.processingState, videoProcessing.processingState) &&
        Objects.equals(this.sourceVideo, videoProcessing.sourceVideo) &&
        Objects.equals(this.options, videoProcessing.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processingState, sourceVideo, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessing {\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    sourceVideo: ").append(toIndentedString(sourceVideo)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `processingState` to the URL query string
    if (getProcessingState() != null) {
      joiner.add(getProcessingState().toUrlQueryString(prefix + "processingState" + suffix));
    }

    // add `sourceVideo` to the URL query string
    if (getSourceVideo() != null) {
      joiner.add(getSourceVideo().toUrlQueryString(prefix + "sourceVideo" + suffix));
    }

    // add `options` to the URL query string
    if (getOptions() != null) {
      joiner.add(getOptions().toUrlQueryString(prefix + "options" + suffix));
    }

    return joiner.toString();
  }

}

