/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.SourceVideo;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptions;
import com.pixop.api.sdk.model.dto.VideoProcessingState;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents the processing details of a video, including its state, source video, and applied processing options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessing {
  public static final String SERIALIZED_NAME_PROCESSING_STATE = "processingState";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATE)
  @javax.annotation.Nullable
  private VideoProcessingState processingState;

  public static final String SERIALIZED_NAME_SOURCE_VIDEO = "sourceVideo";
  @SerializedName(SERIALIZED_NAME_SOURCE_VIDEO)
  @javax.annotation.Nullable
  private SourceVideo sourceVideo;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptions options;

  public VideoProcessing() {
  }

  public VideoProcessing processingState(@javax.annotation.Nullable VideoProcessingState processingState) {
    this.processingState = processingState;
    return this;
  }

  /**
   * The current state of the video processing operation.
   * @return processingState
   */
  @javax.annotation.Nullable
  public VideoProcessingState getProcessingState() {
    return processingState;
  }

  public void setProcessingState(@javax.annotation.Nullable VideoProcessingState processingState) {
    this.processingState = processingState;
  }


  public VideoProcessing sourceVideo(@javax.annotation.Nullable SourceVideo sourceVideo) {
    this.sourceVideo = sourceVideo;
    return this;
  }

  /**
   * Information about the source video used for processing.
   * @return sourceVideo
   */
  @javax.annotation.Nullable
  public SourceVideo getSourceVideo() {
    return sourceVideo;
  }

  public void setSourceVideo(@javax.annotation.Nullable SourceVideo sourceVideo) {
    this.sourceVideo = sourceVideo;
  }


  public VideoProcessing options(@javax.annotation.Nullable VideoProcessingConfigurationOptions options) {
    this.options = options;
    return this;
  }

  /**
   * The configuration options applied to the video processing.
   * @return options
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptions getOptions() {
    return options;
  }

  public void setOptions(@javax.annotation.Nullable VideoProcessingConfigurationOptions options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessing videoProcessing = (VideoProcessing) o;
    return Objects.equals(this.processingState, videoProcessing.processingState) &&
        Objects.equals(this.sourceVideo, videoProcessing.sourceVideo) &&
        Objects.equals(this.options, videoProcessing.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processingState, sourceVideo, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessing {\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    sourceVideo: ").append(toIndentedString(sourceVideo)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("processingState");
    openapiFields.add("sourceVideo");
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessing is not found in the empty JSON string", VideoProcessing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `processingState`
      if (jsonObj.get("processingState") != null && !jsonObj.get("processingState").isJsonNull()) {
        VideoProcessingState.validateJsonElement(jsonObj.get("processingState"));
      }
      // validate the optional field `sourceVideo`
      if (jsonObj.get("sourceVideo") != null && !jsonObj.get("sourceVideo").isJsonNull()) {
        SourceVideo.validateJsonElement(jsonObj.get("sourceVideo"));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        VideoProcessingConfigurationOptions.validateJsonElement(jsonObj.get("options"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessing.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessing>() {
           @Override
           public void write(JsonWriter out, VideoProcessing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessing
   * @throws IOException if the JSON string is invalid with respect to VideoProcessing
   */
  public static VideoProcessing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessing.class);
  }

  /**
   * Convert an instance of VideoProcessing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

