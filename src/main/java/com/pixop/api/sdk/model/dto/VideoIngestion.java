/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.VideoIngestionState;
import com.pixop.api.sdk.model.dto.VideoMetadata;
import com.pixop.api.sdk.model.dto.VideoQualityAssessment;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Details the ingestion process of a video, including its state, metadata, and quality assessment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoIngestion {
  public static final String SERIALIZED_NAME_INGESTION_STATE = "ingestionState";
  @SerializedName(SERIALIZED_NAME_INGESTION_STATE)
  @javax.annotation.Nonnull
  private VideoIngestionState ingestionState;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nonnull
  private VideoMetadata metadata;

  public static final String SERIALIZED_NAME_QUALITY_ASSESSMENT = "qualityAssessment";
  @SerializedName(SERIALIZED_NAME_QUALITY_ASSESSMENT)
  @javax.annotation.Nonnull
  private VideoQualityAssessment qualityAssessment;

  public VideoIngestion() {
  }

  public VideoIngestion ingestionState(@javax.annotation.Nonnull VideoIngestionState ingestionState) {
    this.ingestionState = ingestionState;
    return this;
  }

  /**
   * The state of the video ingestion process.
   * @return ingestionState
   */
  @javax.annotation.Nonnull
  public VideoIngestionState getIngestionState() {
    return ingestionState;
  }

  public void setIngestionState(@javax.annotation.Nonnull VideoIngestionState ingestionState) {
    this.ingestionState = ingestionState;
  }


  public VideoIngestion metadata(@javax.annotation.Nonnull VideoMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The metadata extracted during the ingestion process.
   * @return metadata
   */
  @javax.annotation.Nonnull
  public VideoMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nonnull VideoMetadata metadata) {
    this.metadata = metadata;
  }


  public VideoIngestion qualityAssessment(@javax.annotation.Nonnull VideoQualityAssessment qualityAssessment) {
    this.qualityAssessment = qualityAssessment;
    return this;
  }

  /**
   * The quality assessment results of the ingested video.
   * @return qualityAssessment
   */
  @javax.annotation.Nonnull
  public VideoQualityAssessment getQualityAssessment() {
    return qualityAssessment;
  }

  public void setQualityAssessment(@javax.annotation.Nonnull VideoQualityAssessment qualityAssessment) {
    this.qualityAssessment = qualityAssessment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoIngestion videoIngestion = (VideoIngestion) o;
    return Objects.equals(this.ingestionState, videoIngestion.ingestionState) &&
        Objects.equals(this.metadata, videoIngestion.metadata) &&
        Objects.equals(this.qualityAssessment, videoIngestion.qualityAssessment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ingestionState, metadata, qualityAssessment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoIngestion {\n");
    sb.append("    ingestionState: ").append(toIndentedString(ingestionState)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    qualityAssessment: ").append(toIndentedString(qualityAssessment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ingestionState");
    openapiFields.add("metadata");
    openapiFields.add("qualityAssessment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ingestionState");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("qualityAssessment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoIngestion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoIngestion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoIngestion is not found in the empty JSON string", VideoIngestion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoIngestion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoIngestion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoIngestion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ingestionState`
      VideoIngestionState.validateJsonElement(jsonObj.get("ingestionState"));
      // validate the required field `metadata`
      VideoMetadata.validateJsonElement(jsonObj.get("metadata"));
      // validate the required field `qualityAssessment`
      VideoQualityAssessment.validateJsonElement(jsonObj.get("qualityAssessment"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoIngestion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoIngestion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoIngestion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoIngestion.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoIngestion>() {
           @Override
           public void write(JsonWriter out, VideoIngestion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoIngestion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoIngestion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoIngestion
   * @throws IOException if the JSON string is invalid with respect to VideoIngestion
   */
  public static VideoIngestion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoIngestion.class);
  }

  /**
   * Convert an instance of VideoIngestion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

