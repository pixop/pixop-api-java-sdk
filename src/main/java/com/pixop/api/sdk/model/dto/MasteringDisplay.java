/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.MasteringDisplayPoint;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents the SMPTE ST 2086 metadata of a mastering display, describing the display&#39;s color volume and luminance characteristics.  This metadata defines the primary color chromaticities, white point, and luminance levels for High Dynamic Range (HDR) content mastering. If &#x60;tag&#x60; is specified, the individual chromaticity properties (&#x60;red&#x60;, &#x60;green&#x60;, &#x60;blue&#x60;, &#x60;whitePoint&#x60;) are ignored in favor of the preset values associated with that tag.  If &#x60;tag&#x60; is omitted, the properties &#x60;red&#x60;, &#x60;green&#x60;, &#x60;blue&#x60;, and &#x60;whitePoint&#x60; must each be defined explicitly. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class MasteringDisplay {
  /**
   * Presets for primary color chromaticities and white point, enabling quick selection of standard chromaticity values. For instance:   - P3_D65     - red: x: 0.68, y: 0.32     - green: x: 0.265, y: 0.69     - blue: x: 0.15, y: 0.06     - whitePoint: x: 0.3127, y: 0.329   - BT2020     - red: x: 0.708, y: 0.292     - green: x: 0.17, y: 0.797     - blue: x: 0.131, y: 0.046     - whitePoint: x: 0.3127, y: 0.329 
   */
  @JsonAdapter(TagEnum.Adapter.class)
  public enum TagEnum {
    P3_D65("P3_D65"),
    
    BT2020("BT2020");

    private String value;

    TagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TagEnum fromValue(String value) {
      for (TagEnum b : TagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TagEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TagEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private TagEnum tag;

  public static final String SERIALIZED_NAME_RED = "red";
  @SerializedName(SERIALIZED_NAME_RED)
  @javax.annotation.Nullable
  private MasteringDisplayPoint red;

  public static final String SERIALIZED_NAME_GREEN = "green";
  @SerializedName(SERIALIZED_NAME_GREEN)
  @javax.annotation.Nullable
  private MasteringDisplayPoint green;

  public static final String SERIALIZED_NAME_BLUE = "blue";
  @SerializedName(SERIALIZED_NAME_BLUE)
  @javax.annotation.Nullable
  private MasteringDisplayPoint blue;

  public static final String SERIALIZED_NAME_WHITE_POINT = "whitePoint";
  @SerializedName(SERIALIZED_NAME_WHITE_POINT)
  @javax.annotation.Nullable
  private MasteringDisplayPoint whitePoint;

  public static final String SERIALIZED_NAME_MIN_LUMINANCE = "minLuminance";
  @SerializedName(SERIALIZED_NAME_MIN_LUMINANCE)
  @javax.annotation.Nullable
  private BigDecimal minLuminance = new BigDecimal("0.005");

  public static final String SERIALIZED_NAME_MAX_LUMINANCE = "maxLuminance";
  @SerializedName(SERIALIZED_NAME_MAX_LUMINANCE)
  @javax.annotation.Nullable
  private BigDecimal maxLuminance;

  public MasteringDisplay() {
  }

  public MasteringDisplay tag(@javax.annotation.Nullable TagEnum tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Presets for primary color chromaticities and white point, enabling quick selection of standard chromaticity values. For instance:   - P3_D65     - red: x: 0.68, y: 0.32     - green: x: 0.265, y: 0.69     - blue: x: 0.15, y: 0.06     - whitePoint: x: 0.3127, y: 0.329   - BT2020     - red: x: 0.708, y: 0.292     - green: x: 0.17, y: 0.797     - blue: x: 0.131, y: 0.046     - whitePoint: x: 0.3127, y: 0.329 
   * @return tag
   */
  @javax.annotation.Nullable
  public TagEnum getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable TagEnum tag) {
    this.tag = tag;
  }


  public MasteringDisplay red(@javax.annotation.Nullable MasteringDisplayPoint red) {
    this.red = red;
    return this;
  }

  /**
   * The chromaticity coordinates for the red primary color.
   * @return red
   */
  @javax.annotation.Nullable
  public MasteringDisplayPoint getRed() {
    return red;
  }

  public void setRed(@javax.annotation.Nullable MasteringDisplayPoint red) {
    this.red = red;
  }


  public MasteringDisplay green(@javax.annotation.Nullable MasteringDisplayPoint green) {
    this.green = green;
    return this;
  }

  /**
   * The chromaticity coordinates for the green primary color.
   * @return green
   */
  @javax.annotation.Nullable
  public MasteringDisplayPoint getGreen() {
    return green;
  }

  public void setGreen(@javax.annotation.Nullable MasteringDisplayPoint green) {
    this.green = green;
  }


  public MasteringDisplay blue(@javax.annotation.Nullable MasteringDisplayPoint blue) {
    this.blue = blue;
    return this;
  }

  /**
   * The chromaticity coordinates for the blue primary color.
   * @return blue
   */
  @javax.annotation.Nullable
  public MasteringDisplayPoint getBlue() {
    return blue;
  }

  public void setBlue(@javax.annotation.Nullable MasteringDisplayPoint blue) {
    this.blue = blue;
  }


  public MasteringDisplay whitePoint(@javax.annotation.Nullable MasteringDisplayPoint whitePoint) {
    this.whitePoint = whitePoint;
    return this;
  }

  /**
   * The chromaticity coordinates for the white point, representing the display’s reference white.
   * @return whitePoint
   */
  @javax.annotation.Nullable
  public MasteringDisplayPoint getWhitePoint() {
    return whitePoint;
  }

  public void setWhitePoint(@javax.annotation.Nullable MasteringDisplayPoint whitePoint) {
    this.whitePoint = whitePoint;
  }


  public MasteringDisplay minLuminance(@javax.annotation.Nullable BigDecimal minLuminance) {
    this.minLuminance = minLuminance;
    return this;
  }

  /**
   * The minimum luminance level of the mastering display, measured in cd/m² (nits).  This defines the darkest level the display can achieve. 
   * minimum: 0.0
   * maximum: 10000.0
   * @return minLuminance
   */
  @javax.annotation.Nullable
  public BigDecimal getMinLuminance() {
    return minLuminance;
  }

  public void setMinLuminance(@javax.annotation.Nullable BigDecimal minLuminance) {
    this.minLuminance = minLuminance;
  }


  public MasteringDisplay maxLuminance(@javax.annotation.Nullable BigDecimal maxLuminance) {
    this.maxLuminance = maxLuminance;
    return this;
  }

  /**
   * The maximum luminance level of the mastering display, measured in cd/m² (nits).  This defines the brightest level the display can achieve.  If omitted, it defaults to &#x60;maxCll&#x60;; if &#x60;maxCll&#x60; is also unspecified, it defaults to 1000. 
   * minimum: 0.0
   * maximum: 10000.0
   * @return maxLuminance
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxLuminance() {
    return maxLuminance;
  }

  public void setMaxLuminance(@javax.annotation.Nullable BigDecimal maxLuminance) {
    this.maxLuminance = maxLuminance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasteringDisplay masteringDisplay = (MasteringDisplay) o;
    return Objects.equals(this.tag, masteringDisplay.tag) &&
        Objects.equals(this.red, masteringDisplay.red) &&
        Objects.equals(this.green, masteringDisplay.green) &&
        Objects.equals(this.blue, masteringDisplay.blue) &&
        Objects.equals(this.whitePoint, masteringDisplay.whitePoint) &&
        Objects.equals(this.minLuminance, masteringDisplay.minLuminance) &&
        Objects.equals(this.maxLuminance, masteringDisplay.maxLuminance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, red, green, blue, whitePoint, minLuminance, maxLuminance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasteringDisplay {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    red: ").append(toIndentedString(red)).append("\n");
    sb.append("    green: ").append(toIndentedString(green)).append("\n");
    sb.append("    blue: ").append(toIndentedString(blue)).append("\n");
    sb.append("    whitePoint: ").append(toIndentedString(whitePoint)).append("\n");
    sb.append("    minLuminance: ").append(toIndentedString(minLuminance)).append("\n");
    sb.append("    maxLuminance: ").append(toIndentedString(maxLuminance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tag");
    openapiFields.add("red");
    openapiFields.add("green");
    openapiFields.add("blue");
    openapiFields.add("whitePoint");
    openapiFields.add("minLuminance");
    openapiFields.add("maxLuminance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MasteringDisplay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasteringDisplay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasteringDisplay is not found in the empty JSON string", MasteringDisplay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MasteringDisplay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MasteringDisplay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        TagEnum.validateJsonElement(jsonObj.get("tag"));
      }
      // validate the optional field `red`
      if (jsonObj.get("red") != null && !jsonObj.get("red").isJsonNull()) {
        MasteringDisplayPoint.validateJsonElement(jsonObj.get("red"));
      }
      // validate the optional field `green`
      if (jsonObj.get("green") != null && !jsonObj.get("green").isJsonNull()) {
        MasteringDisplayPoint.validateJsonElement(jsonObj.get("green"));
      }
      // validate the optional field `blue`
      if (jsonObj.get("blue") != null && !jsonObj.get("blue").isJsonNull()) {
        MasteringDisplayPoint.validateJsonElement(jsonObj.get("blue"));
      }
      // validate the optional field `whitePoint`
      if (jsonObj.get("whitePoint") != null && !jsonObj.get("whitePoint").isJsonNull()) {
        MasteringDisplayPoint.validateJsonElement(jsonObj.get("whitePoint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasteringDisplay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasteringDisplay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasteringDisplay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasteringDisplay.class));

       return (TypeAdapter<T>) new TypeAdapter<MasteringDisplay>() {
           @Override
           public void write(JsonWriter out, MasteringDisplay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasteringDisplay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MasteringDisplay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MasteringDisplay
   * @throws IOException if the JSON string is invalid with respect to MasteringDisplay
   */
  public static MasteringDisplay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasteringDisplay.class);
  }

  /**
   * Convert an instance of MasteringDisplay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

