/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.MasteringDisplayPoint;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the SMPTE ST 2086 metadata of a mastering display, describing the display&#39;s color volume and luminance characteristics.  This metadata defines the primary color chromaticities, white point, and luminance levels for High Dynamic Range (HDR) content mastering. If &#x60;tag&#x60; is specified, the individual chromaticity properties (&#x60;red&#x60;, &#x60;green&#x60;, &#x60;blue&#x60;, &#x60;whitePoint&#x60;) are ignored in favor of the preset values associated with that tag.  If &#x60;tag&#x60; is omitted, the properties &#x60;red&#x60;, &#x60;green&#x60;, &#x60;blue&#x60;, and &#x60;whitePoint&#x60; must each be defined explicitly. 
 */
@JsonPropertyOrder({
  MasteringDisplay.JSON_PROPERTY_TAG,
  MasteringDisplay.JSON_PROPERTY_RED,
  MasteringDisplay.JSON_PROPERTY_GREEN,
  MasteringDisplay.JSON_PROPERTY_BLUE,
  MasteringDisplay.JSON_PROPERTY_WHITE_POINT,
  MasteringDisplay.JSON_PROPERTY_MIN_LUMINANCE,
  MasteringDisplay.JSON_PROPERTY_MAX_LUMINANCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class MasteringDisplay {
  /**
   * Presets for primary color chromaticities and white point, enabling quick selection of standard chromaticity values. For instance:   - P3_D65     - red: x: 0.68, y: 0.32     - green: x: 0.265, y: 0.69     - blue: x: 0.15, y: 0.06     - whitePoint: x: 0.3127, y: 0.329   - BT2020     - red: x: 0.708, y: 0.292     - green: x: 0.17, y: 0.797     - blue: x: 0.131, y: 0.046     - whitePoint: x: 0.3127, y: 0.329 
   */
  public enum TagEnum {
    P3_D65(String.valueOf("P3_D65")),
    
    BT2020(String.valueOf("BT2020")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    TagEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TagEnum fromValue(String value) {
      for (TagEnum b : TagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_TAG = "tag";
  @javax.annotation.Nullable
  private TagEnum tag;

  public static final String JSON_PROPERTY_RED = "red";
  @javax.annotation.Nullable
  private MasteringDisplayPoint red;

  public static final String JSON_PROPERTY_GREEN = "green";
  @javax.annotation.Nullable
  private MasteringDisplayPoint green;

  public static final String JSON_PROPERTY_BLUE = "blue";
  @javax.annotation.Nullable
  private MasteringDisplayPoint blue;

  public static final String JSON_PROPERTY_WHITE_POINT = "whitePoint";
  @javax.annotation.Nullable
  private MasteringDisplayPoint whitePoint;

  public static final String JSON_PROPERTY_MIN_LUMINANCE = "minLuminance";
  @javax.annotation.Nullable
  private BigDecimal minLuminance = new BigDecimal("0.005");

  public static final String JSON_PROPERTY_MAX_LUMINANCE = "maxLuminance";
  @javax.annotation.Nullable
  private BigDecimal maxLuminance;

  public MasteringDisplay() {
  }

  public MasteringDisplay tag(@javax.annotation.Nullable TagEnum tag) {
    
    this.tag = tag;
    return this;
  }

  /**
   * Presets for primary color chromaticities and white point, enabling quick selection of standard chromaticity values. For instance:   - P3_D65     - red: x: 0.68, y: 0.32     - green: x: 0.265, y: 0.69     - blue: x: 0.15, y: 0.06     - whitePoint: x: 0.3127, y: 0.329   - BT2020     - red: x: 0.708, y: 0.292     - green: x: 0.17, y: 0.797     - blue: x: 0.131, y: 0.046     - whitePoint: x: 0.3127, y: 0.329 
   * @return tag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TagEnum getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(@javax.annotation.Nullable TagEnum tag) {
    this.tag = tag;
  }

  public MasteringDisplay red(@javax.annotation.Nullable MasteringDisplayPoint red) {
    
    this.red = red;
    return this;
  }

  /**
   * The chromaticity coordinates for the red primary color.
   * @return red
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MasteringDisplayPoint getRed() {
    return red;
  }


  @JsonProperty(JSON_PROPERTY_RED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRed(@javax.annotation.Nullable MasteringDisplayPoint red) {
    this.red = red;
  }

  public MasteringDisplay green(@javax.annotation.Nullable MasteringDisplayPoint green) {
    
    this.green = green;
    return this;
  }

  /**
   * The chromaticity coordinates for the green primary color.
   * @return green
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GREEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MasteringDisplayPoint getGreen() {
    return green;
  }


  @JsonProperty(JSON_PROPERTY_GREEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGreen(@javax.annotation.Nullable MasteringDisplayPoint green) {
    this.green = green;
  }

  public MasteringDisplay blue(@javax.annotation.Nullable MasteringDisplayPoint blue) {
    
    this.blue = blue;
    return this;
  }

  /**
   * The chromaticity coordinates for the blue primary color.
   * @return blue
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MasteringDisplayPoint getBlue() {
    return blue;
  }


  @JsonProperty(JSON_PROPERTY_BLUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlue(@javax.annotation.Nullable MasteringDisplayPoint blue) {
    this.blue = blue;
  }

  public MasteringDisplay whitePoint(@javax.annotation.Nullable MasteringDisplayPoint whitePoint) {
    
    this.whitePoint = whitePoint;
    return this;
  }

  /**
   * The chromaticity coordinates for the white point, representing the display’s reference white.
   * @return whitePoint
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WHITE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MasteringDisplayPoint getWhitePoint() {
    return whitePoint;
  }


  @JsonProperty(JSON_PROPERTY_WHITE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhitePoint(@javax.annotation.Nullable MasteringDisplayPoint whitePoint) {
    this.whitePoint = whitePoint;
  }

  public MasteringDisplay minLuminance(@javax.annotation.Nullable BigDecimal minLuminance) {
    
    this.minLuminance = minLuminance;
    return this;
  }

  /**
   * The minimum luminance level of the mastering display, measured in cd/m² (nits).  This defines the darkest level the display can achieve. 
   * minimum: 0.0
   * maximum: 10000.0
   * @return minLuminance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_LUMINANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinLuminance() {
    return minLuminance;
  }


  @JsonProperty(JSON_PROPERTY_MIN_LUMINANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinLuminance(@javax.annotation.Nullable BigDecimal minLuminance) {
    this.minLuminance = minLuminance;
  }

  public MasteringDisplay maxLuminance(@javax.annotation.Nullable BigDecimal maxLuminance) {
    
    this.maxLuminance = maxLuminance;
    return this;
  }

  /**
   * The maximum luminance level of the mastering display, measured in cd/m² (nits).  This defines the brightest level the display can achieve.  If omitted, it defaults to &#x60;maxCll&#x60;; if &#x60;maxCll&#x60; is also unspecified, it defaults to 1000. 
   * minimum: 0.0
   * maximum: 10000.0
   * @return maxLuminance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_LUMINANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaxLuminance() {
    return maxLuminance;
  }


  @JsonProperty(JSON_PROPERTY_MAX_LUMINANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxLuminance(@javax.annotation.Nullable BigDecimal maxLuminance) {
    this.maxLuminance = maxLuminance;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasteringDisplay masteringDisplay = (MasteringDisplay) o;
    return Objects.equals(this.tag, masteringDisplay.tag) &&
        Objects.equals(this.red, masteringDisplay.red) &&
        Objects.equals(this.green, masteringDisplay.green) &&
        Objects.equals(this.blue, masteringDisplay.blue) &&
        Objects.equals(this.whitePoint, masteringDisplay.whitePoint) &&
        Objects.equals(this.minLuminance, masteringDisplay.minLuminance) &&
        Objects.equals(this.maxLuminance, masteringDisplay.maxLuminance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, red, green, blue, whitePoint, minLuminance, maxLuminance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasteringDisplay {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    red: ").append(toIndentedString(red)).append("\n");
    sb.append("    green: ").append(toIndentedString(green)).append("\n");
    sb.append("    blue: ").append(toIndentedString(blue)).append("\n");
    sb.append("    whitePoint: ").append(toIndentedString(whitePoint)).append("\n");
    sb.append("    minLuminance: ").append(toIndentedString(minLuminance)).append("\n");
    sb.append("    maxLuminance: ").append(toIndentedString(maxLuminance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tag` to the URL query string
    if (getTag() != null) {
      try {
        joiner.add(String.format("%stag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTag()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `red` to the URL query string
    if (getRed() != null) {
      joiner.add(getRed().toUrlQueryString(prefix + "red" + suffix));
    }

    // add `green` to the URL query string
    if (getGreen() != null) {
      joiner.add(getGreen().toUrlQueryString(prefix + "green" + suffix));
    }

    // add `blue` to the URL query string
    if (getBlue() != null) {
      joiner.add(getBlue().toUrlQueryString(prefix + "blue" + suffix));
    }

    // add `whitePoint` to the URL query string
    if (getWhitePoint() != null) {
      joiner.add(getWhitePoint().toUrlQueryString(prefix + "whitePoint" + suffix));
    }

    // add `minLuminance` to the URL query string
    if (getMinLuminance() != null) {
      try {
        joiner.add(String.format("%sminLuminance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinLuminance()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `maxLuminance` to the URL query string
    if (getMaxLuminance() != null) {
      try {
        joiner.add(String.format("%smaxLuminance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxLuminance()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

