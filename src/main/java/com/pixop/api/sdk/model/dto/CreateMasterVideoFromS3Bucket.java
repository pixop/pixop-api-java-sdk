/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.S3BucketWithAccessKeys;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Defines the required fields for creating a master video by importing it from an Amazon S3 bucket.  This includes details about the S3 bucket and the access credentials used for the import process. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class CreateMasterVideoFromS3Bucket {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nullable
  private UUID projectId;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  @javax.annotation.Nullable
  private String fileName;

  public static final String SERIALIZED_NAME_OBJECT_KEY = "objectKey";
  @SerializedName(SERIALIZED_NAME_OBJECT_KEY)
  @javax.annotation.Nonnull
  private String objectKey;

  public static final String SERIALIZED_NAME_S3_BUCKET = "s3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  @javax.annotation.Nonnull
  private S3BucketWithAccessKeys s3Bucket;

  public CreateMasterVideoFromS3Bucket() {
  }

  public CreateMasterVideoFromS3Bucket name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the video. Used to easily identify specific videos within projects. The name must be between 1 and 255 characters long. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateMasterVideoFromS3Bucket projectId(@javax.annotation.Nullable UUID projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return projectId
   */
  @javax.annotation.Nullable
  public UUID getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nullable UUID projectId) {
    this.projectId = projectId;
  }


  public CreateMasterVideoFromS3Bucket fileName(@javax.annotation.Nullable String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of the file, including its extension. E.g., myvideo.mp4.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(@javax.annotation.Nullable String fileName) {
    this.fileName = fileName;
  }


  public CreateMasterVideoFromS3Bucket objectKey(@javax.annotation.Nonnull String objectKey) {
    this.objectKey = objectKey;
    return this;
  }

  /**
   * The object key of a video in an S3 bucket. For example, &#x60;src/myvideo.mp4&#x60;.
   * @return objectKey
   */
  @javax.annotation.Nonnull
  public String getObjectKey() {
    return objectKey;
  }

  public void setObjectKey(@javax.annotation.Nonnull String objectKey) {
    this.objectKey = objectKey;
  }


  public CreateMasterVideoFromS3Bucket s3Bucket(@javax.annotation.Nonnull S3BucketWithAccessKeys s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Contains details about the S3 bucket and access credentials required to import the master video. 
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  public S3BucketWithAccessKeys getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(@javax.annotation.Nonnull S3BucketWithAccessKeys s3Bucket) {
    this.s3Bucket = s3Bucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket = (CreateMasterVideoFromS3Bucket) o;
    return Objects.equals(this.name, createMasterVideoFromS3Bucket.name) &&
        Objects.equals(this.projectId, createMasterVideoFromS3Bucket.projectId) &&
        Objects.equals(this.fileName, createMasterVideoFromS3Bucket.fileName) &&
        Objects.equals(this.objectKey, createMasterVideoFromS3Bucket.objectKey) &&
        Objects.equals(this.s3Bucket, createMasterVideoFromS3Bucket.s3Bucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, projectId, fileName, objectKey, s3Bucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMasterVideoFromS3Bucket {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    objectKey: ").append(toIndentedString(objectKey)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("projectId");
    openapiFields.add("fileName");
    openapiFields.add("objectKey");
    openapiFields.add("s3Bucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("objectKey");
    openapiRequiredFields.add("s3Bucket");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMasterVideoFromS3Bucket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMasterVideoFromS3Bucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMasterVideoFromS3Bucket is not found in the empty JSON string", CreateMasterVideoFromS3Bucket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMasterVideoFromS3Bucket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMasterVideoFromS3Bucket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMasterVideoFromS3Bucket.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if (!jsonObj.get("objectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectKey").toString()));
      }
      // validate the required field `s3Bucket`
      S3BucketWithAccessKeys.validateJsonElement(jsonObj.get("s3Bucket"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMasterVideoFromS3Bucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMasterVideoFromS3Bucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMasterVideoFromS3Bucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMasterVideoFromS3Bucket.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMasterVideoFromS3Bucket>() {
           @Override
           public void write(JsonWriter out, CreateMasterVideoFromS3Bucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMasterVideoFromS3Bucket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMasterVideoFromS3Bucket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMasterVideoFromS3Bucket
   * @throws IOException if the JSON string is invalid with respect to CreateMasterVideoFromS3Bucket
   */
  public static CreateMasterVideoFromS3Bucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMasterVideoFromS3Bucket.class);
  }

  /**
   * Convert an instance of CreateMasterVideoFromS3Bucket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

