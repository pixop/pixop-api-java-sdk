/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.S3BucketWithAccessKeys;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Defines the required fields for creating a master video by importing it from an Amazon S3 bucket.  This includes details about the S3 bucket and the access credentials used for the import process. 
 */
@JsonPropertyOrder({
  CreateMasterVideoFromS3Bucket.JSON_PROPERTY_NAME,
  CreateMasterVideoFromS3Bucket.JSON_PROPERTY_DESCRIPTION,
  CreateMasterVideoFromS3Bucket.JSON_PROPERTY_PROJECT_ID,
  CreateMasterVideoFromS3Bucket.JSON_PROPERTY_FILE_NAME,
  CreateMasterVideoFromS3Bucket.JSON_PROPERTY_OBJECT_KEY,
  CreateMasterVideoFromS3Bucket.JSON_PROPERTY_S3_BUCKET
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class CreateMasterVideoFromS3Bucket {
  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  @javax.annotation.Nullable
  private UUID projectId;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  @javax.annotation.Nullable
  private String fileName;

  public static final String JSON_PROPERTY_OBJECT_KEY = "objectKey";
  @javax.annotation.Nonnull
  private String objectKey;

  public static final String JSON_PROPERTY_S3_BUCKET = "s3Bucket";
  @javax.annotation.Nonnull
  private S3BucketWithAccessKeys s3Bucket;

  public CreateMasterVideoFromS3Bucket() {
  }

  public CreateMasterVideoFromS3Bucket name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * The name of the video. Used to easily identify specific videos within projects. The name must be between 1 and 255 characters long. 
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  public CreateMasterVideoFromS3Bucket description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Optional description of the video. The description must be between 0 and 511 characters long.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public CreateMasterVideoFromS3Bucket projectId(@javax.annotation.Nullable UUID projectId) {
    
    this.projectId = projectId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return projectId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectId(@javax.annotation.Nullable UUID projectId) {
    this.projectId = projectId;
  }

  public CreateMasterVideoFromS3Bucket fileName(@javax.annotation.Nullable String fileName) {
    
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of the file, including its extension. E.g., myvideo.mp4.
   * @return fileName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileName(@javax.annotation.Nullable String fileName) {
    this.fileName = fileName;
  }

  public CreateMasterVideoFromS3Bucket objectKey(@javax.annotation.Nonnull String objectKey) {
    
    this.objectKey = objectKey;
    return this;
  }

  /**
   * The object key of a video in an S3 bucket. For example, &#x60;src/myvideo.mp4&#x60;.
   * @return objectKey
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObjectKey() {
    return objectKey;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObjectKey(@javax.annotation.Nonnull String objectKey) {
    this.objectKey = objectKey;
  }

  public CreateMasterVideoFromS3Bucket s3Bucket(@javax.annotation.Nonnull S3BucketWithAccessKeys s3Bucket) {
    
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Contains details about the S3 bucket and access credentials required to import the master video. 
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_S3_BUCKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public S3BucketWithAccessKeys getS3Bucket() {
    return s3Bucket;
  }


  @JsonProperty(JSON_PROPERTY_S3_BUCKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setS3Bucket(@javax.annotation.Nonnull S3BucketWithAccessKeys s3Bucket) {
    this.s3Bucket = s3Bucket;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket = (CreateMasterVideoFromS3Bucket) o;
    return Objects.equals(this.name, createMasterVideoFromS3Bucket.name) &&
        Objects.equals(this.description, createMasterVideoFromS3Bucket.description) &&
        Objects.equals(this.projectId, createMasterVideoFromS3Bucket.projectId) &&
        Objects.equals(this.fileName, createMasterVideoFromS3Bucket.fileName) &&
        Objects.equals(this.objectKey, createMasterVideoFromS3Bucket.objectKey) &&
        Objects.equals(this.s3Bucket, createMasterVideoFromS3Bucket.s3Bucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, projectId, fileName, objectKey, s3Bucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMasterVideoFromS3Bucket {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    objectKey: ").append(toIndentedString(objectKey)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `projectId` to the URL query string
    if (getProjectId() != null) {
      try {
        joiner.add(String.format("%sprojectId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProjectId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fileName` to the URL query string
    if (getFileName() != null) {
      try {
        joiner.add(String.format("%sfileName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `objectKey` to the URL query string
    if (getObjectKey() != null) {
      try {
        joiner.add(String.format("%sobjectKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getObjectKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `s3Bucket` to the URL query string
    if (getS3Bucket() != null) {
      joiner.add(getS3Bucket().toUrlQueryString(prefix + "s3Bucket" + suffix));
    }

    return joiner.toString();
  }

}

