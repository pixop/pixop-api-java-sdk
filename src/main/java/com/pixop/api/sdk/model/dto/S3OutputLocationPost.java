/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the required fields for creating a new S3 output location, including the bucket name, access keys, and a user-defined name.
 */
@JsonPropertyOrder({
  S3OutputLocationPost.JSON_PROPERTY_BUCKET,
  S3OutputLocationPost.JSON_PROPERTY_ACCESS_KEY,
  S3OutputLocationPost.JSON_PROPERTY_SECRET_ACCESS_KEY,
  S3OutputLocationPost.JSON_PROPERTY_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class S3OutputLocationPost {
  public static final String JSON_PROPERTY_BUCKET = "bucket";
  @javax.annotation.Nonnull
  private String bucket;

  public static final String JSON_PROPERTY_ACCESS_KEY = "accessKey";
  @javax.annotation.Nonnull
  private String accessKey;

  public static final String JSON_PROPERTY_SECRET_ACCESS_KEY = "secretAccessKey";
  @javax.annotation.Nonnull
  private String secretAccessKey;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public S3OutputLocationPost() {
  }

  public S3OutputLocationPost bucket(@javax.annotation.Nonnull String bucket) {
    
    this.bucket = bucket;
    return this;
  }

  /**
   * The name of the S3 bucket. Bucket names must comply with the rules for DNS-compliant names, with a length between 3 and 63 characters.
   * @return bucket
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUCKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBucket() {
    return bucket;
  }


  @JsonProperty(JSON_PROPERTY_BUCKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBucket(@javax.annotation.Nonnull String bucket) {
    this.bucket = bucket;
  }

  public S3OutputLocationPost accessKey(@javax.annotation.Nonnull String accessKey) {
    
    this.accessKey = accessKey;
    return this;
  }

  /**
   * The access key for authenticating with the S3 bucket. This key is part of the AWS credentials required to perform operations on the bucket.
   * @return accessKey
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCESS_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccessKey() {
    return accessKey;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccessKey(@javax.annotation.Nonnull String accessKey) {
    this.accessKey = accessKey;
  }

  public S3OutputLocationPost secretAccessKey(@javax.annotation.Nonnull String secretAccessKey) {
    
    this.secretAccessKey = secretAccessKey;
    return this;
  }

  /**
   * The secret access key for authenticating with the S3 bucket. This key is part of the AWS credentials and should be kept secure.
   * @return secretAccessKey
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SECRET_ACCESS_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSecretAccessKey() {
    return secretAccessKey;
  }


  @JsonProperty(JSON_PROPERTY_SECRET_ACCESS_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSecretAccessKey(@javax.annotation.Nonnull String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
  }

  public S3OutputLocationPost name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * A user-defined name to associate with the output location. Useful for organizing and identifying various output locations.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3OutputLocationPost s3OutputLocationPost = (S3OutputLocationPost) o;
    return Objects.equals(this.bucket, s3OutputLocationPost.bucket) &&
        Objects.equals(this.accessKey, s3OutputLocationPost.accessKey) &&
        Objects.equals(this.secretAccessKey, s3OutputLocationPost.secretAccessKey) &&
        Objects.equals(this.name, s3OutputLocationPost.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, accessKey, secretAccessKey, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3OutputLocationPost {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    secretAccessKey: ").append(toIndentedString(secretAccessKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bucket` to the URL query string
    if (getBucket() != null) {
      try {
        joiner.add(String.format("%sbucket%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBucket()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `accessKey` to the URL query string
    if (getAccessKey() != null) {
      try {
        joiner.add(String.format("%saccessKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAccessKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `secretAccessKey` to the URL query string
    if (getSecretAccessKey() != null) {
      try {
        joiner.add(String.format("%ssecretAccessKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecretAccessKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

