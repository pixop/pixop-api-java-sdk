/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.MasteringDisplay;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the colorimetry profile of video content, including color matrix, range, primaries, transfer characteristics, HDR format, and related static metadata.
 */
@JsonPropertyOrder({
  Colorimetry.JSON_PROPERTY_COLOR_SPACE,
  Colorimetry.JSON_PROPERTY_COLOR_PRIMARIES,
  Colorimetry.JSON_PROPERTY_TRANSFER_CHARACTERISTICS,
  Colorimetry.JSON_PROPERTY_COLOR_RANGE,
  Colorimetry.JSON_PROPERTY_HDR_FORMAT,
  Colorimetry.JSON_PROPERTY_MASTERING_DISPLAY,
  Colorimetry.JSON_PROPERTY_MAX_CLL,
  Colorimetry.JSON_PROPERTY_MAX_FALL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class Colorimetry {
  /**
   * The color space of the profile.
   */
  public enum ColorSpaceEnum {
    BT470_BG(String.valueOf("BT470BG")),
    
    FCC(String.valueOf("FCC")),
    
    SMPTE170_M(String.valueOf("SMPTE170M")),
    
    SMPTE240_M(String.valueOf("SMPTE240M")),
    
    BT709(String.valueOf("BT709")),
    
    BT2020_NC(String.valueOf("BT2020NC")),
    
    BT2020_C(String.valueOf("BT2020C")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    ColorSpaceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColorSpaceEnum fromValue(String value) {
      for (ColorSpaceEnum b : ColorSpaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_COLOR_SPACE = "colorSpace";
  @javax.annotation.Nullable
  private ColorSpaceEnum colorSpace;

  /**
   * The color primaries used in the profile.
   */
  public enum ColorPrimariesEnum {
    BT470_BG(String.valueOf("BT470BG")),
    
    BT470_M(String.valueOf("BT470M")),
    
    SMPTE170_M(String.valueOf("SMPTE170M")),
    
    SMPTE240_M(String.valueOf("SMPTE240M")),
    
    FILM(String.valueOf("FILM")),
    
    BT709(String.valueOf("BT709")),
    
    BT2020(String.valueOf("BT2020")),
    
    SMPTE428(String.valueOf("SMPTE428")),
    
    SMPTE431(String.valueOf("SMPTE431")),
    
    SMPTE432(String.valueOf("SMPTE432")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    ColorPrimariesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColorPrimariesEnum fromValue(String value) {
      for (ColorPrimariesEnum b : ColorPrimariesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_COLOR_PRIMARIES = "colorPrimaries";
  @javax.annotation.Nullable
  private ColorPrimariesEnum colorPrimaries;

  /**
   * The transfer characteristics (transfer curve) of the profile.
   */
  public enum TransferCharacteristicsEnum {
    BT470_BG(String.valueOf("BT470BG")),
    
    BT470_M(String.valueOf("BT470M")),
    
    SMPTE170_M(String.valueOf("SMPTE170M")),
    
    SMPTE240_M(String.valueOf("SMPTE240M")),
    
    BT709(String.valueOf("BT709")),
    
    BT2020_10(String.valueOf("BT2020_10")),
    
    BT2020_12(String.valueOf("BT2020_12")),
    
    LINEAR(String.valueOf("LINEAR")),
    
    SMPTE2084(String.valueOf("SMPTE2084")),
    
    ARIB_STD_B67(String.valueOf("ARIB_STD_B67")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    TransferCharacteristicsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransferCharacteristicsEnum fromValue(String value) {
      for (TransferCharacteristicsEnum b : TransferCharacteristicsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_TRANSFER_CHARACTERISTICS = "transferCharacteristics";
  @javax.annotation.Nullable
  private TransferCharacteristicsEnum transferCharacteristics;

  /**
   * The color range of the profile.
   */
  public enum ColorRangeEnum {
    LIMITED(String.valueOf("LIMITED")),
    
    FULL(String.valueOf("FULL")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    ColorRangeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColorRangeEnum fromValue(String value) {
      for (ColorRangeEnum b : ColorRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_COLOR_RANGE = "colorRange";
  @javax.annotation.Nullable
  private ColorRangeEnum colorRange;

  /**
   * The HDR format used in the profile. All HDR formats require:   - **BT2020NC** color space     - **BT2020** primaries     - **TV** range    Specific requirements for each HDR format:  - &#x60;HLG&#x60;:     - **Transfer Characteristic**: ARIB_STD_B67     - **Description**: Hybrid Log-Gamma, used in broadcast HDR workflows. Backward-compatible with SDR displays     - **Additional Requirements**: None    - &#x60;PQ10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: Perceptual Quantizer (PQ), suitable for HDR workflows without metadata     - **Additional Requirements**: 10-bit chroma subsampling    - &#x60;HDR10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: PQ10 with static metadata for mastering display and light levels     - **Additional Requirements**: HEVC encoding, 4:2:0 10-bit chroma subsampling 
   */
  public enum HdrFormatEnum {
    HLG(String.valueOf("HLG")),
    
    PQ10(String.valueOf("PQ10")),
    
    HDR10(String.valueOf("HDR10")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    HdrFormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HdrFormatEnum fromValue(String value) {
      for (HdrFormatEnum b : HdrFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_HDR_FORMAT = "hdrFormat";
  @javax.annotation.Nullable
  private HdrFormatEnum hdrFormat;

  public static final String JSON_PROPERTY_MASTERING_DISPLAY = "masteringDisplay";
  @javax.annotation.Nullable
  private MasteringDisplay masteringDisplay;

  public static final String JSON_PROPERTY_MAX_CLL = "maxCll";
  @javax.annotation.Nullable
  private BigDecimal maxCll;

  public static final String JSON_PROPERTY_MAX_FALL = "maxFall";
  @javax.annotation.Nullable
  private BigDecimal maxFall;

  public Colorimetry() {
  }

  public Colorimetry colorSpace(@javax.annotation.Nullable ColorSpaceEnum colorSpace) {
    
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * The color space of the profile.
   * @return colorSpace
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_SPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColorSpaceEnum getColorSpace() {
    return colorSpace;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_SPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorSpace(@javax.annotation.Nullable ColorSpaceEnum colorSpace) {
    this.colorSpace = colorSpace;
  }

  public Colorimetry colorPrimaries(@javax.annotation.Nullable ColorPrimariesEnum colorPrimaries) {
    
    this.colorPrimaries = colorPrimaries;
    return this;
  }

  /**
   * The color primaries used in the profile.
   * @return colorPrimaries
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_PRIMARIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColorPrimariesEnum getColorPrimaries() {
    return colorPrimaries;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_PRIMARIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorPrimaries(@javax.annotation.Nullable ColorPrimariesEnum colorPrimaries) {
    this.colorPrimaries = colorPrimaries;
  }

  public Colorimetry transferCharacteristics(@javax.annotation.Nullable TransferCharacteristicsEnum transferCharacteristics) {
    
    this.transferCharacteristics = transferCharacteristics;
    return this;
  }

  /**
   * The transfer characteristics (transfer curve) of the profile.
   * @return transferCharacteristics
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSFER_CHARACTERISTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransferCharacteristicsEnum getTransferCharacteristics() {
    return transferCharacteristics;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFER_CHARACTERISTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransferCharacteristics(@javax.annotation.Nullable TransferCharacteristicsEnum transferCharacteristics) {
    this.transferCharacteristics = transferCharacteristics;
  }

  public Colorimetry colorRange(@javax.annotation.Nullable ColorRangeEnum colorRange) {
    
    this.colorRange = colorRange;
    return this;
  }

  /**
   * The color range of the profile.
   * @return colorRange
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColorRangeEnum getColorRange() {
    return colorRange;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorRange(@javax.annotation.Nullable ColorRangeEnum colorRange) {
    this.colorRange = colorRange;
  }

  public Colorimetry hdrFormat(@javax.annotation.Nullable HdrFormatEnum hdrFormat) {
    
    this.hdrFormat = hdrFormat;
    return this;
  }

  /**
   * The HDR format used in the profile. All HDR formats require:   - **BT2020NC** color space     - **BT2020** primaries     - **TV** range    Specific requirements for each HDR format:  - &#x60;HLG&#x60;:     - **Transfer Characteristic**: ARIB_STD_B67     - **Description**: Hybrid Log-Gamma, used in broadcast HDR workflows. Backward-compatible with SDR displays     - **Additional Requirements**: None    - &#x60;PQ10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: Perceptual Quantizer (PQ), suitable for HDR workflows without metadata     - **Additional Requirements**: 10-bit chroma subsampling    - &#x60;HDR10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: PQ10 with static metadata for mastering display and light levels     - **Additional Requirements**: HEVC encoding, 4:2:0 10-bit chroma subsampling 
   * @return hdrFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HDR_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HdrFormatEnum getHdrFormat() {
    return hdrFormat;
  }


  @JsonProperty(JSON_PROPERTY_HDR_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHdrFormat(@javax.annotation.Nullable HdrFormatEnum hdrFormat) {
    this.hdrFormat = hdrFormat;
  }

  public Colorimetry masteringDisplay(@javax.annotation.Nullable MasteringDisplay masteringDisplay) {
    
    this.masteringDisplay = masteringDisplay;
    return this;
  }

  /**
   * Get masteringDisplay
   * @return masteringDisplay
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASTERING_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MasteringDisplay getMasteringDisplay() {
    return masteringDisplay;
  }


  @JsonProperty(JSON_PROPERTY_MASTERING_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasteringDisplay(@javax.annotation.Nullable MasteringDisplay masteringDisplay) {
    this.masteringDisplay = masteringDisplay;
  }

  public Colorimetry maxCll(@javax.annotation.Nullable BigDecimal maxCll) {
    
    this.maxCll = maxCll;
    return this;
  }

  /**
   * Maximum content light level (in nits). Used to determine the peak light level for all HDR content. SDR content is 100 nits by definition.
   * minimum: 0.0
   * maximum: 10000.0
   * @return maxCll
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_CLL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaxCll() {
    return maxCll;
  }


  @JsonProperty(JSON_PROPERTY_MAX_CLL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxCll(@javax.annotation.Nullable BigDecimal maxCll) {
    this.maxCll = maxCll;
  }

  public Colorimetry maxFall(@javax.annotation.Nullable BigDecimal maxFall) {
    
    this.maxFall = maxFall;
    return this;
  }

  /**
   * Maximum frame-average light level (in nits). Only used as HDR10 metadata.
   * minimum: 0.0
   * maximum: 10000.0
   * @return maxFall
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_FALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaxFall() {
    return maxFall;
  }


  @JsonProperty(JSON_PROPERTY_MAX_FALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxFall(@javax.annotation.Nullable BigDecimal maxFall) {
    this.maxFall = maxFall;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Colorimetry colorimetry = (Colorimetry) o;
    return Objects.equals(this.colorSpace, colorimetry.colorSpace) &&
        Objects.equals(this.colorPrimaries, colorimetry.colorPrimaries) &&
        Objects.equals(this.transferCharacteristics, colorimetry.transferCharacteristics) &&
        Objects.equals(this.colorRange, colorimetry.colorRange) &&
        Objects.equals(this.hdrFormat, colorimetry.hdrFormat) &&
        Objects.equals(this.masteringDisplay, colorimetry.masteringDisplay) &&
        Objects.equals(this.maxCll, colorimetry.maxCll) &&
        Objects.equals(this.maxFall, colorimetry.maxFall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorSpace, colorPrimaries, transferCharacteristics, colorRange, hdrFormat, masteringDisplay, maxCll, maxFall);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Colorimetry {\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    colorPrimaries: ").append(toIndentedString(colorPrimaries)).append("\n");
    sb.append("    transferCharacteristics: ").append(toIndentedString(transferCharacteristics)).append("\n");
    sb.append("    colorRange: ").append(toIndentedString(colorRange)).append("\n");
    sb.append("    hdrFormat: ").append(toIndentedString(hdrFormat)).append("\n");
    sb.append("    masteringDisplay: ").append(toIndentedString(masteringDisplay)).append("\n");
    sb.append("    maxCll: ").append(toIndentedString(maxCll)).append("\n");
    sb.append("    maxFall: ").append(toIndentedString(maxFall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `colorSpace` to the URL query string
    if (getColorSpace() != null) {
      try {
        joiner.add(String.format("%scolorSpace%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorSpace()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `colorPrimaries` to the URL query string
    if (getColorPrimaries() != null) {
      try {
        joiner.add(String.format("%scolorPrimaries%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorPrimaries()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `transferCharacteristics` to the URL query string
    if (getTransferCharacteristics() != null) {
      try {
        joiner.add(String.format("%stransferCharacteristics%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransferCharacteristics()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `colorRange` to the URL query string
    if (getColorRange() != null) {
      try {
        joiner.add(String.format("%scolorRange%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorRange()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hdrFormat` to the URL query string
    if (getHdrFormat() != null) {
      try {
        joiner.add(String.format("%shdrFormat%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHdrFormat()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `masteringDisplay` to the URL query string
    if (getMasteringDisplay() != null) {
      joiner.add(getMasteringDisplay().toUrlQueryString(prefix + "masteringDisplay" + suffix));
    }

    // add `maxCll` to the URL query string
    if (getMaxCll() != null) {
      try {
        joiner.add(String.format("%smaxCll%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxCll()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `maxFall` to the URL query string
    if (getMaxFall() != null) {
      try {
        joiner.add(String.format("%smaxFall%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxFall()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

