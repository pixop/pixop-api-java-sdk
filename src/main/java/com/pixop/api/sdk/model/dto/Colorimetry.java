/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.MasteringDisplay;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents the colorimetry profile of video content, including color matrix, range, primaries, transfer characteristics, HDR format, and related static metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class Colorimetry {
  /**
   * The color space of the profile.
   */
  @JsonAdapter(ColorSpaceEnum.Adapter.class)
  public enum ColorSpaceEnum {
    BT470_BG("BT470BG"),
    
    FCC("FCC"),
    
    SMPTE170_M("SMPTE170M"),
    
    SMPTE240_M("SMPTE240M"),
    
    BT709("BT709"),
    
    BT2020_NC("BT2020NC"),
    
    BT2020_C("BT2020C");

    private String value;

    ColorSpaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorSpaceEnum fromValue(String value) {
      for (ColorSpaceEnum b : ColorSpaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorSpaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorSpaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorSpaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorSpaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorSpaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR_SPACE = "colorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  @javax.annotation.Nullable
  private ColorSpaceEnum colorSpace;

  /**
   * The color primaries used in the profile.
   */
  @JsonAdapter(ColorPrimariesEnum.Adapter.class)
  public enum ColorPrimariesEnum {
    BT470_BG("BT470BG"),
    
    BT470_M("BT470M"),
    
    SMPTE170_M("SMPTE170M"),
    
    SMPTE240_M("SMPTE240M"),
    
    FILM("FILM"),
    
    BT709("BT709"),
    
    BT2020("BT2020"),
    
    SMPTE428("SMPTE428"),
    
    SMPTE431("SMPTE431"),
    
    SMPTE432("SMPTE432");

    private String value;

    ColorPrimariesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorPrimariesEnum fromValue(String value) {
      for (ColorPrimariesEnum b : ColorPrimariesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorPrimariesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorPrimariesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorPrimariesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorPrimariesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorPrimariesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR_PRIMARIES = "colorPrimaries";
  @SerializedName(SERIALIZED_NAME_COLOR_PRIMARIES)
  @javax.annotation.Nullable
  private ColorPrimariesEnum colorPrimaries;

  /**
   * The transfer characteristics (transfer curve) of the profile.
   */
  @JsonAdapter(TransferCharacteristicsEnum.Adapter.class)
  public enum TransferCharacteristicsEnum {
    BT470_BG("BT470BG"),
    
    BT470_M("BT470M"),
    
    SMPTE170_M("SMPTE170M"),
    
    SMPTE240_M("SMPTE240M"),
    
    BT709("BT709"),
    
    BT2020_10("BT2020_10"),
    
    BT2020_12("BT2020_12"),
    
    LINEAR("LINEAR"),
    
    SMPTE2084("SMPTE2084"),
    
    ARIB_STD_B67("ARIB_STD_B67");

    private String value;

    TransferCharacteristicsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferCharacteristicsEnum fromValue(String value) {
      for (TransferCharacteristicsEnum b : TransferCharacteristicsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransferCharacteristicsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferCharacteristicsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferCharacteristicsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransferCharacteristicsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransferCharacteristicsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFER_CHARACTERISTICS = "transferCharacteristics";
  @SerializedName(SERIALIZED_NAME_TRANSFER_CHARACTERISTICS)
  @javax.annotation.Nullable
  private TransferCharacteristicsEnum transferCharacteristics;

  /**
   * The color range of the profile.
   */
  @JsonAdapter(ColorRangeEnum.Adapter.class)
  public enum ColorRangeEnum {
    LIMITED("LIMITED"),
    
    FULL("FULL");

    private String value;

    ColorRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorRangeEnum fromValue(String value) {
      for (ColorRangeEnum b : ColorRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR_RANGE = "colorRange";
  @SerializedName(SERIALIZED_NAME_COLOR_RANGE)
  @javax.annotation.Nullable
  private ColorRangeEnum colorRange;

  /**
   * The HDR format used in the profile. All HDR formats require:   - **BT2020NC** color space     - **BT2020** primaries     - **TV** range    Specific requirements for each HDR format:  - &#x60;HLG&#x60;:     - **Transfer Characteristic**: ARIB_STD_B67     - **Description**: Hybrid Log-Gamma, used in broadcast HDR workflows. Backward-compatible with SDR displays     - **Additional Requirements**: None    - &#x60;PQ10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: Perceptual Quantizer (PQ), suitable for HDR workflows without metadata     - **Additional Requirements**: 10-bit chroma subsampling    - &#x60;HDR10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: PQ10 with static metadata for mastering display and light levels     - **Additional Requirements**: HEVC encoding, 4:2:0 10-bit chroma subsampling 
   */
  @JsonAdapter(HdrFormatEnum.Adapter.class)
  public enum HdrFormatEnum {
    HLG("HLG"),
    
    PQ10("PQ10"),
    
    HDR10("HDR10");

    private String value;

    HdrFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HdrFormatEnum fromValue(String value) {
      for (HdrFormatEnum b : HdrFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HdrFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HdrFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HdrFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HdrFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HdrFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HDR_FORMAT = "hdrFormat";
  @SerializedName(SERIALIZED_NAME_HDR_FORMAT)
  @javax.annotation.Nullable
  private HdrFormatEnum hdrFormat;

  public static final String SERIALIZED_NAME_MASTERING_DISPLAY = "masteringDisplay";
  @SerializedName(SERIALIZED_NAME_MASTERING_DISPLAY)
  @javax.annotation.Nullable
  private MasteringDisplay masteringDisplay;

  public static final String SERIALIZED_NAME_MAX_CLL = "maxCll";
  @SerializedName(SERIALIZED_NAME_MAX_CLL)
  @javax.annotation.Nullable
  private BigDecimal maxCll;

  public static final String SERIALIZED_NAME_MAX_FALL = "maxFall";
  @SerializedName(SERIALIZED_NAME_MAX_FALL)
  @javax.annotation.Nullable
  private BigDecimal maxFall;

  public Colorimetry() {
  }

  public Colorimetry colorSpace(@javax.annotation.Nullable ColorSpaceEnum colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * The color space of the profile.
   * @return colorSpace
   */
  @javax.annotation.Nullable
  public ColorSpaceEnum getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(@javax.annotation.Nullable ColorSpaceEnum colorSpace) {
    this.colorSpace = colorSpace;
  }


  public Colorimetry colorPrimaries(@javax.annotation.Nullable ColorPrimariesEnum colorPrimaries) {
    this.colorPrimaries = colorPrimaries;
    return this;
  }

  /**
   * The color primaries used in the profile.
   * @return colorPrimaries
   */
  @javax.annotation.Nullable
  public ColorPrimariesEnum getColorPrimaries() {
    return colorPrimaries;
  }

  public void setColorPrimaries(@javax.annotation.Nullable ColorPrimariesEnum colorPrimaries) {
    this.colorPrimaries = colorPrimaries;
  }


  public Colorimetry transferCharacteristics(@javax.annotation.Nullable TransferCharacteristicsEnum transferCharacteristics) {
    this.transferCharacteristics = transferCharacteristics;
    return this;
  }

  /**
   * The transfer characteristics (transfer curve) of the profile.
   * @return transferCharacteristics
   */
  @javax.annotation.Nullable
  public TransferCharacteristicsEnum getTransferCharacteristics() {
    return transferCharacteristics;
  }

  public void setTransferCharacteristics(@javax.annotation.Nullable TransferCharacteristicsEnum transferCharacteristics) {
    this.transferCharacteristics = transferCharacteristics;
  }


  public Colorimetry colorRange(@javax.annotation.Nullable ColorRangeEnum colorRange) {
    this.colorRange = colorRange;
    return this;
  }

  /**
   * The color range of the profile.
   * @return colorRange
   */
  @javax.annotation.Nullable
  public ColorRangeEnum getColorRange() {
    return colorRange;
  }

  public void setColorRange(@javax.annotation.Nullable ColorRangeEnum colorRange) {
    this.colorRange = colorRange;
  }


  public Colorimetry hdrFormat(@javax.annotation.Nullable HdrFormatEnum hdrFormat) {
    this.hdrFormat = hdrFormat;
    return this;
  }

  /**
   * The HDR format used in the profile. All HDR formats require:   - **BT2020NC** color space     - **BT2020** primaries     - **TV** range    Specific requirements for each HDR format:  - &#x60;HLG&#x60;:     - **Transfer Characteristic**: ARIB_STD_B67     - **Description**: Hybrid Log-Gamma, used in broadcast HDR workflows. Backward-compatible with SDR displays     - **Additional Requirements**: None    - &#x60;PQ10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: Perceptual Quantizer (PQ), suitable for HDR workflows without metadata     - **Additional Requirements**: 10-bit chroma subsampling    - &#x60;HDR10&#x60;:     - **Transfer Characteristic**: SMPTE2084     - **Description**: PQ10 with static metadata for mastering display and light levels     - **Additional Requirements**: HEVC encoding, 4:2:0 10-bit chroma subsampling 
   * @return hdrFormat
   */
  @javax.annotation.Nullable
  public HdrFormatEnum getHdrFormat() {
    return hdrFormat;
  }

  public void setHdrFormat(@javax.annotation.Nullable HdrFormatEnum hdrFormat) {
    this.hdrFormat = hdrFormat;
  }


  public Colorimetry masteringDisplay(@javax.annotation.Nullable MasteringDisplay masteringDisplay) {
    this.masteringDisplay = masteringDisplay;
    return this;
  }

  /**
   * Get masteringDisplay
   * @return masteringDisplay
   */
  @javax.annotation.Nullable
  public MasteringDisplay getMasteringDisplay() {
    return masteringDisplay;
  }

  public void setMasteringDisplay(@javax.annotation.Nullable MasteringDisplay masteringDisplay) {
    this.masteringDisplay = masteringDisplay;
  }


  public Colorimetry maxCll(@javax.annotation.Nullable BigDecimal maxCll) {
    this.maxCll = maxCll;
    return this;
  }

  /**
   * Maximum content light level (in nits). Used to determine the peak light level for all HDR content. SDR content is 100 nits by definition.
   * minimum: 0.0
   * maximum: 10000.0
   * @return maxCll
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxCll() {
    return maxCll;
  }

  public void setMaxCll(@javax.annotation.Nullable BigDecimal maxCll) {
    this.maxCll = maxCll;
  }


  public Colorimetry maxFall(@javax.annotation.Nullable BigDecimal maxFall) {
    this.maxFall = maxFall;
    return this;
  }

  /**
   * Maximum frame-average light level (in nits). Only used as HDR10 metadata.
   * minimum: 0.0
   * maximum: 10000.0
   * @return maxFall
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxFall() {
    return maxFall;
  }

  public void setMaxFall(@javax.annotation.Nullable BigDecimal maxFall) {
    this.maxFall = maxFall;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Colorimetry colorimetry = (Colorimetry) o;
    return Objects.equals(this.colorSpace, colorimetry.colorSpace) &&
        Objects.equals(this.colorPrimaries, colorimetry.colorPrimaries) &&
        Objects.equals(this.transferCharacteristics, colorimetry.transferCharacteristics) &&
        Objects.equals(this.colorRange, colorimetry.colorRange) &&
        Objects.equals(this.hdrFormat, colorimetry.hdrFormat) &&
        Objects.equals(this.masteringDisplay, colorimetry.masteringDisplay) &&
        Objects.equals(this.maxCll, colorimetry.maxCll) &&
        Objects.equals(this.maxFall, colorimetry.maxFall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorSpace, colorPrimaries, transferCharacteristics, colorRange, hdrFormat, masteringDisplay, maxCll, maxFall);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Colorimetry {\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    colorPrimaries: ").append(toIndentedString(colorPrimaries)).append("\n");
    sb.append("    transferCharacteristics: ").append(toIndentedString(transferCharacteristics)).append("\n");
    sb.append("    colorRange: ").append(toIndentedString(colorRange)).append("\n");
    sb.append("    hdrFormat: ").append(toIndentedString(hdrFormat)).append("\n");
    sb.append("    masteringDisplay: ").append(toIndentedString(masteringDisplay)).append("\n");
    sb.append("    maxCll: ").append(toIndentedString(maxCll)).append("\n");
    sb.append("    maxFall: ").append(toIndentedString(maxFall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorSpace");
    openapiFields.add("colorPrimaries");
    openapiFields.add("transferCharacteristics");
    openapiFields.add("colorRange");
    openapiFields.add("hdrFormat");
    openapiFields.add("masteringDisplay");
    openapiFields.add("maxCll");
    openapiFields.add("maxFall");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Colorimetry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Colorimetry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Colorimetry is not found in the empty JSON string", Colorimetry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Colorimetry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Colorimetry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorSpace") != null && !jsonObj.get("colorSpace").isJsonNull()) && !jsonObj.get("colorSpace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorSpace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorSpace").toString()));
      }
      // validate the optional field `colorSpace`
      if (jsonObj.get("colorSpace") != null && !jsonObj.get("colorSpace").isJsonNull()) {
        ColorSpaceEnum.validateJsonElement(jsonObj.get("colorSpace"));
      }
      if ((jsonObj.get("colorPrimaries") != null && !jsonObj.get("colorPrimaries").isJsonNull()) && !jsonObj.get("colorPrimaries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorPrimaries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorPrimaries").toString()));
      }
      // validate the optional field `colorPrimaries`
      if (jsonObj.get("colorPrimaries") != null && !jsonObj.get("colorPrimaries").isJsonNull()) {
        ColorPrimariesEnum.validateJsonElement(jsonObj.get("colorPrimaries"));
      }
      if ((jsonObj.get("transferCharacteristics") != null && !jsonObj.get("transferCharacteristics").isJsonNull()) && !jsonObj.get("transferCharacteristics").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferCharacteristics` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferCharacteristics").toString()));
      }
      // validate the optional field `transferCharacteristics`
      if (jsonObj.get("transferCharacteristics") != null && !jsonObj.get("transferCharacteristics").isJsonNull()) {
        TransferCharacteristicsEnum.validateJsonElement(jsonObj.get("transferCharacteristics"));
      }
      if ((jsonObj.get("colorRange") != null && !jsonObj.get("colorRange").isJsonNull()) && !jsonObj.get("colorRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorRange").toString()));
      }
      // validate the optional field `colorRange`
      if (jsonObj.get("colorRange") != null && !jsonObj.get("colorRange").isJsonNull()) {
        ColorRangeEnum.validateJsonElement(jsonObj.get("colorRange"));
      }
      if ((jsonObj.get("hdrFormat") != null && !jsonObj.get("hdrFormat").isJsonNull()) && !jsonObj.get("hdrFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hdrFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hdrFormat").toString()));
      }
      // validate the optional field `hdrFormat`
      if (jsonObj.get("hdrFormat") != null && !jsonObj.get("hdrFormat").isJsonNull()) {
        HdrFormatEnum.validateJsonElement(jsonObj.get("hdrFormat"));
      }
      // validate the optional field `masteringDisplay`
      if (jsonObj.get("masteringDisplay") != null && !jsonObj.get("masteringDisplay").isJsonNull()) {
        MasteringDisplay.validateJsonElement(jsonObj.get("masteringDisplay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Colorimetry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Colorimetry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Colorimetry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Colorimetry.class));

       return (TypeAdapter<T>) new TypeAdapter<Colorimetry>() {
           @Override
           public void write(JsonWriter out, Colorimetry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Colorimetry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Colorimetry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Colorimetry
   * @throws IOException if the JSON string is invalid with respect to Colorimetry
   */
  public static Colorimetry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Colorimetry.class);
  }

  /**
   * Convert an instance of Colorimetry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

