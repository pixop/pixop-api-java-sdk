/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Flags providing status and metadata about a video.
 */
@JsonPropertyOrder({
  VideoFlags.JSON_PROPERTY_IS_MASTER,
  VideoFlags.JSON_PROPERTY_IS_PROCESSING,
  VideoFlags.JSON_PROPERTY_IS_PROCESSED,
  VideoFlags.JSON_PROPERTY_IS_INGESTING,
  VideoFlags.JSON_PROPERTY_IS_INGESTED,
  VideoFlags.JSON_PROPERTY_IS_CLIP,
  VideoFlags.JSON_PROPERTY_IS_SAMPLE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoFlags {
  public static final String JSON_PROPERTY_IS_MASTER = "isMaster";
  @javax.annotation.Nonnull
  private Boolean isMaster = false;

  public static final String JSON_PROPERTY_IS_PROCESSING = "isProcessing";
  @javax.annotation.Nonnull
  private Boolean isProcessing = false;

  public static final String JSON_PROPERTY_IS_PROCESSED = "isProcessed";
  @javax.annotation.Nonnull
  private Boolean isProcessed = false;

  public static final String JSON_PROPERTY_IS_INGESTING = "isIngesting";
  @javax.annotation.Nonnull
  private Boolean isIngesting = false;

  public static final String JSON_PROPERTY_IS_INGESTED = "isIngested";
  @javax.annotation.Nonnull
  private Boolean isIngested = false;

  public static final String JSON_PROPERTY_IS_CLIP = "isClip";
  @javax.annotation.Nonnull
  private Boolean isClip = false;

  public static final String JSON_PROPERTY_IS_SAMPLE = "isSample";
  @javax.annotation.Nonnull
  private Boolean isSample = false;

  public VideoFlags() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public VideoFlags(
    @JsonProperty(JSON_PROPERTY_IS_MASTER) Boolean isMaster, 
    @JsonProperty(JSON_PROPERTY_IS_PROCESSING) Boolean isProcessing, 
    @JsonProperty(JSON_PROPERTY_IS_PROCESSED) Boolean isProcessed, 
    @JsonProperty(JSON_PROPERTY_IS_INGESTING) Boolean isIngesting, 
    @JsonProperty(JSON_PROPERTY_IS_INGESTED) Boolean isIngested, 
    @JsonProperty(JSON_PROPERTY_IS_CLIP) Boolean isClip, 
    @JsonProperty(JSON_PROPERTY_IS_SAMPLE) Boolean isSample
  ) {
    this();
    this.isMaster = isMaster;
    this.isProcessing = isProcessing;
    this.isProcessed = isProcessed;
    this.isIngesting = isIngesting;
    this.isIngested = isIngested;
    this.isClip = isClip;
    this.isSample = isSample;
  }

  /**
   * Indicates whether this video is a master video.
   * @return isMaster
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_MASTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsMaster() {
    return isMaster;
  }



  /**
   * Indicates whether this video is currently being processed.
   * @return isProcessing
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_PROCESSING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsProcessing() {
    return isProcessing;
  }



  /**
   * Indicates whether this video is a successfully processed video.
   * @return isProcessed
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_PROCESSED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsProcessed() {
    return isProcessed;
  }



  /**
   * Indicates whether this video is currently being ingested.
   * @return isIngesting
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_INGESTING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsIngesting() {
    return isIngesting;
  }



  /**
   * Indicates whether this video has been ingested.
   * @return isIngested
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_INGESTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsIngested() {
    return isIngested;
  }



  /**
   * Indicates whether this video is a clip.
   * @return isClip
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_CLIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsClip() {
    return isClip;
  }



  /**
   * Indicates whether this video is a sample video.
   * @return isSample
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_SAMPLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsSample() {
    return isSample;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoFlags videoFlags = (VideoFlags) o;
    return Objects.equals(this.isMaster, videoFlags.isMaster) &&
        Objects.equals(this.isProcessing, videoFlags.isProcessing) &&
        Objects.equals(this.isProcessed, videoFlags.isProcessed) &&
        Objects.equals(this.isIngesting, videoFlags.isIngesting) &&
        Objects.equals(this.isIngested, videoFlags.isIngested) &&
        Objects.equals(this.isClip, videoFlags.isClip) &&
        Objects.equals(this.isSample, videoFlags.isSample);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isMaster, isProcessing, isProcessed, isIngesting, isIngested, isClip, isSample);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoFlags {\n");
    sb.append("    isMaster: ").append(toIndentedString(isMaster)).append("\n");
    sb.append("    isProcessing: ").append(toIndentedString(isProcessing)).append("\n");
    sb.append("    isProcessed: ").append(toIndentedString(isProcessed)).append("\n");
    sb.append("    isIngesting: ").append(toIndentedString(isIngesting)).append("\n");
    sb.append("    isIngested: ").append(toIndentedString(isIngested)).append("\n");
    sb.append("    isClip: ").append(toIndentedString(isClip)).append("\n");
    sb.append("    isSample: ").append(toIndentedString(isSample)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `isMaster` to the URL query string
    if (getIsMaster() != null) {
      try {
        joiner.add(String.format("%sisMaster%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsMaster()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isProcessing` to the URL query string
    if (getIsProcessing() != null) {
      try {
        joiner.add(String.format("%sisProcessing%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsProcessing()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isProcessed` to the URL query string
    if (getIsProcessed() != null) {
      try {
        joiner.add(String.format("%sisProcessed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsProcessed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isIngesting` to the URL query string
    if (getIsIngesting() != null) {
      try {
        joiner.add(String.format("%sisIngesting%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsIngesting()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isIngested` to the URL query string
    if (getIsIngested() != null) {
      try {
        joiner.add(String.format("%sisIngested%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsIngested()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isClip` to the URL query string
    if (getIsClip() != null) {
      try {
        joiner.add(String.format("%sisClip%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsClip()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isSample` to the URL query string
    if (getIsSample() != null) {
      try {
        joiner.add(String.format("%sisSample%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsSample()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

