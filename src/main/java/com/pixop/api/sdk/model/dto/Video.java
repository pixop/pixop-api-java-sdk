/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.MasterVideo;
import com.pixop.api.sdk.model.dto.VideoFlags;
import com.pixop.api.sdk.model.dto.VideoIngestion;
import com.pixop.api.sdk.model.dto.VideoOutput;
import com.pixop.api.sdk.model.dto.VideoProcessing;
import com.pixop.api.sdk.model.dto.VideoProcessingJobAppraisal;
import com.pixop.api.sdk.model.dto.VideoUpload;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Video
 */
@JsonPropertyOrder({
  Video.JSON_PROPERTY_ID,
  Video.JSON_PROPERTY_CREATED_AT,
  Video.JSON_PROPERTY_UPDATED_AT,
  Video.JSON_PROPERTY_USER_ID,
  Video.JSON_PROPERTY_NAME,
  Video.JSON_PROPERTY_TEAM_ID,
  Video.JSON_PROPERTY_UPLOAD,
  Video.JSON_PROPERTY_INGESTION,
  Video.JSON_PROPERTY_PROCESSING,
  Video.JSON_PROPERTY_PROJECT_ID,
  Video.JSON_PROPERTY_MASTER_VIDEO,
  Video.JSON_PROPERTY_PROCESSING_JOB_APPRAISAL,
  Video.JSON_PROPERTY_FLAGS,
  Video.JSON_PROPERTY_CLIP_ID,
  Video.JSON_PROPERTY_OUTPUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class Video {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_TEAM_ID = "teamId";
  @javax.annotation.Nonnull
  private UUID teamId;

  public static final String JSON_PROPERTY_UPLOAD = "upload";
  @javax.annotation.Nullable
  private VideoUpload upload;

  public static final String JSON_PROPERTY_INGESTION = "ingestion";
  @javax.annotation.Nullable
  private VideoIngestion ingestion;

  public static final String JSON_PROPERTY_PROCESSING = "processing";
  @javax.annotation.Nullable
  private VideoProcessing processing;

  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  @javax.annotation.Nonnull
  private UUID projectId;

  public static final String JSON_PROPERTY_MASTER_VIDEO = "masterVideo";
  @javax.annotation.Nullable
  private MasterVideo masterVideo;

  public static final String JSON_PROPERTY_PROCESSING_JOB_APPRAISAL = "processingJobAppraisal";
  @javax.annotation.Nullable
  private VideoProcessingJobAppraisal processingJobAppraisal;

  public static final String JSON_PROPERTY_FLAGS = "flags";
  @javax.annotation.Nonnull
  private VideoFlags flags;

  public static final String JSON_PROPERTY_CLIP_ID = "clipId";
  @javax.annotation.Nullable
  private UUID clipId;

  public static final String JSON_PROPERTY_OUTPUT = "output";
  @javax.annotation.Nullable
  private VideoOutput output;

  public Video() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public Video(
    @JsonProperty(JSON_PROPERTY_CREATED_AT) OffsetDateTime createdAt, 
    @JsonProperty(JSON_PROPERTY_UPDATED_AT) OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  public Video id(@javax.annotation.Nonnull UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }

  /**
   * Date and time when the object was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Date and time when the object was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public Video userId(@javax.annotation.Nonnull UUID userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return userId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }

  public Video name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * The name of the video. Used to easily identify specific videos within projects. The name must be between 1 and 255 characters long. 
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  public Video teamId(@javax.annotation.Nonnull UUID teamId) {
    
    this.teamId = teamId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return teamId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getTeamId() {
    return teamId;
  }


  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTeamId(@javax.annotation.Nonnull UUID teamId) {
    this.teamId = teamId;
  }

  public Video upload(@javax.annotation.Nullable VideoUpload upload) {
    
    this.upload = upload;
    return this;
  }

  /**
   * Metadata about the video upload (only applicable for master videos).
   * @return upload
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoUpload getUpload() {
    return upload;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpload(@javax.annotation.Nullable VideoUpload upload) {
    this.upload = upload;
  }

  public Video ingestion(@javax.annotation.Nullable VideoIngestion ingestion) {
    
    this.ingestion = ingestion;
    return this;
  }

  /**
   * Details about the ingestion process for the video.
   * @return ingestion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INGESTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoIngestion getIngestion() {
    return ingestion;
  }


  @JsonProperty(JSON_PROPERTY_INGESTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIngestion(@javax.annotation.Nullable VideoIngestion ingestion) {
    this.ingestion = ingestion;
  }

  public Video processing(@javax.annotation.Nullable VideoProcessing processing) {
    
    this.processing = processing;
    return this;
  }

  /**
   * Get processing
   * @return processing
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessing getProcessing() {
    return processing;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessing(@javax.annotation.Nullable VideoProcessing processing) {
    this.processing = processing;
  }

  public Video projectId(@javax.annotation.Nonnull UUID projectId) {
    
    this.projectId = projectId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return projectId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProjectId(@javax.annotation.Nonnull UUID projectId) {
    this.projectId = projectId;
  }

  public Video masterVideo(@javax.annotation.Nullable MasterVideo masterVideo) {
    
    this.masterVideo = masterVideo;
    return this;
  }

  /**
   * Get masterVideo
   * @return masterVideo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASTER_VIDEO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MasterVideo getMasterVideo() {
    return masterVideo;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_VIDEO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterVideo(@javax.annotation.Nullable MasterVideo masterVideo) {
    this.masterVideo = masterVideo;
  }

  public Video processingJobAppraisal(@javax.annotation.Nullable VideoProcessingJobAppraisal processingJobAppraisal) {
    
    this.processingJobAppraisal = processingJobAppraisal;
    return this;
  }

  /**
   * Get processingJobAppraisal
   * @return processingJobAppraisal
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSING_JOB_APPRAISAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingJobAppraisal getProcessingJobAppraisal() {
    return processingJobAppraisal;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_JOB_APPRAISAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingJobAppraisal(@javax.annotation.Nullable VideoProcessingJobAppraisal processingJobAppraisal) {
    this.processingJobAppraisal = processingJobAppraisal;
  }

  public Video flags(@javax.annotation.Nonnull VideoFlags flags) {
    
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FLAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public VideoFlags getFlags() {
    return flags;
  }


  @JsonProperty(JSON_PROPERTY_FLAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlags(@javax.annotation.Nonnull VideoFlags flags) {
    this.flags = flags;
  }

  public Video clipId(@javax.annotation.Nullable UUID clipId) {
    
    this.clipId = clipId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return clipId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getClipId() {
    return clipId;
  }


  @JsonProperty(JSON_PROPERTY_CLIP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClipId(@javax.annotation.Nullable UUID clipId) {
    this.clipId = clipId;
  }

  public Video output(@javax.annotation.Nullable VideoOutput output) {
    
    this.output = output;
    return this;
  }

  /**
   * Details about the most recent output operation.
   * @return output
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoOutput getOutput() {
    return output;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutput(@javax.annotation.Nullable VideoOutput output) {
    this.output = output;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Video video = (Video) o;
    return Objects.equals(this.id, video.id) &&
        Objects.equals(this.createdAt, video.createdAt) &&
        Objects.equals(this.updatedAt, video.updatedAt) &&
        Objects.equals(this.userId, video.userId) &&
        Objects.equals(this.name, video.name) &&
        Objects.equals(this.teamId, video.teamId) &&
        Objects.equals(this.upload, video.upload) &&
        Objects.equals(this.ingestion, video.ingestion) &&
        Objects.equals(this.processing, video.processing) &&
        Objects.equals(this.projectId, video.projectId) &&
        Objects.equals(this.masterVideo, video.masterVideo) &&
        Objects.equals(this.processingJobAppraisal, video.processingJobAppraisal) &&
        Objects.equals(this.flags, video.flags) &&
        Objects.equals(this.clipId, video.clipId) &&
        Objects.equals(this.output, video.output);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, updatedAt, userId, name, teamId, upload, ingestion, processing, projectId, masterVideo, processingJobAppraisal, flags, clipId, output);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Video {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    ingestion: ").append(toIndentedString(ingestion)).append("\n");
    sb.append("    processing: ").append(toIndentedString(processing)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    masterVideo: ").append(toIndentedString(masterVideo)).append("\n");
    sb.append("    processingJobAppraisal: ").append(toIndentedString(processingJobAppraisal)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    clipId: ").append(toIndentedString(clipId)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      try {
        joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userId` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `teamId` to the URL query string
    if (getTeamId() != null) {
      try {
        joiner.add(String.format("%steamId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTeamId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `upload` to the URL query string
    if (getUpload() != null) {
      joiner.add(getUpload().toUrlQueryString(prefix + "upload" + suffix));
    }

    // add `ingestion` to the URL query string
    if (getIngestion() != null) {
      joiner.add(getIngestion().toUrlQueryString(prefix + "ingestion" + suffix));
    }

    // add `processing` to the URL query string
    if (getProcessing() != null) {
      joiner.add(getProcessing().toUrlQueryString(prefix + "processing" + suffix));
    }

    // add `projectId` to the URL query string
    if (getProjectId() != null) {
      try {
        joiner.add(String.format("%sprojectId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProjectId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `masterVideo` to the URL query string
    if (getMasterVideo() != null) {
      joiner.add(getMasterVideo().toUrlQueryString(prefix + "masterVideo" + suffix));
    }

    // add `processingJobAppraisal` to the URL query string
    if (getProcessingJobAppraisal() != null) {
      joiner.add(getProcessingJobAppraisal().toUrlQueryString(prefix + "processingJobAppraisal" + suffix));
    }

    // add `flags` to the URL query string
    if (getFlags() != null) {
      joiner.add(getFlags().toUrlQueryString(prefix + "flags" + suffix));
    }

    // add `clipId` to the URL query string
    if (getClipId() != null) {
      try {
        joiner.add(String.format("%sclipId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClipId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `output` to the URL query string
    if (getOutput() != null) {
      joiner.add(getOutput().toUrlQueryString(prefix + "output" + suffix));
    }

    return joiner.toString();
  }

}

