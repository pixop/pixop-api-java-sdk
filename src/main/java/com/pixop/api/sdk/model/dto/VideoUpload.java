/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.VideoFile;
import com.pixop.api.sdk.model.dto.VideoUploadState;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Metadata and details about the upload process of a master video.
 */
@JsonPropertyOrder({
  VideoUpload.JSON_PROPERTY_FILE,
  VideoUpload.JSON_PROPERTY_UPLOAD_STATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoUpload {
  public static final String JSON_PROPERTY_FILE = "file";
  @javax.annotation.Nullable
  private VideoFile _file;

  public static final String JSON_PROPERTY_UPLOAD_STATE = "uploadState";
  @javax.annotation.Nullable
  private VideoUploadState uploadState;

  public VideoUpload() {
  }

  public VideoUpload _file(@javax.annotation.Nullable VideoFile _file) {
    
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoFile getFile() {
    return _file;
  }


  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFile(@javax.annotation.Nullable VideoFile _file) {
    this._file = _file;
  }

  public VideoUpload uploadState(@javax.annotation.Nullable VideoUploadState uploadState) {
    
    this.uploadState = uploadState;
    return this;
  }

  /**
   * Get uploadState
   * @return uploadState
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoUploadState getUploadState() {
    return uploadState;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadState(@javax.annotation.Nullable VideoUploadState uploadState) {
    this.uploadState = uploadState;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoUpload videoUpload = (VideoUpload) o;
    return Objects.equals(this._file, videoUpload._file) &&
        Objects.equals(this.uploadState, videoUpload.uploadState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_file, uploadState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoUpload {\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    uploadState: ").append(toIndentedString(uploadState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `file` to the URL query string
    if (getFile() != null) {
      joiner.add(getFile().toUrlQueryString(prefix + "file" + suffix));
    }

    // add `uploadState` to the URL query string
    if (getUploadState() != null) {
      joiner.add(getUploadState().toUrlQueryString(prefix + "uploadState" + suffix));
    }

    return joiner.toString();
  }

}

