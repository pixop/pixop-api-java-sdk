/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents the frame rate of a video, expressed in frames per second (FPS).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class FrameRate {
  public static final String SERIALIZED_NAME_FRAME_RATE = "frameRate";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE)
  @javax.annotation.Nullable
  private BigDecimal frameRate;

  public static final String SERIALIZED_NAME_RATIONAL = "rational";
  @SerializedName(SERIALIZED_NAME_RATIONAL)
  @javax.annotation.Nullable
  private String rational;

  public FrameRate() {
  }

  public FrameRate frameRate(@javax.annotation.Nullable BigDecimal frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  /**
   * The frame rate expressed as a decimal number with three decimal points of precision. Common values include 30, 29.97, 25, and 23.976.
   * @return frameRate
   */
  @javax.annotation.Nullable
  public BigDecimal getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(@javax.annotation.Nullable BigDecimal frameRate) {
    this.frameRate = frameRate;
  }


  public FrameRate rational(@javax.annotation.Nullable String rational) {
    this.rational = rational;
    return this;
  }

  /**
   * The frame rate expressed as a rational number. For example, 30000:1001 represents 29.97 FPS.
   * @return rational
   */
  @javax.annotation.Nullable
  public String getRational() {
    return rational;
  }

  public void setRational(@javax.annotation.Nullable String rational) {
    this.rational = rational;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrameRate frameRate = (FrameRate) o;
    return Objects.equals(this.frameRate, frameRate.frameRate) &&
        Objects.equals(this.rational, frameRate.rational);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frameRate, rational);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrameRate {\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    rational: ").append(toIndentedString(rational)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frameRate");
    openapiFields.add("rational");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FrameRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FrameRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FrameRate is not found in the empty JSON string", FrameRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FrameRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FrameRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("rational") != null && !jsonObj.get("rational").isJsonNull()) && !jsonObj.get("rational").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rational` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rational").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FrameRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FrameRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FrameRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FrameRate.class));

       return (TypeAdapter<T>) new TypeAdapter<FrameRate>() {
           @Override
           public void write(JsonWriter out, FrameRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FrameRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FrameRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FrameRate
   * @throws IOException if the JSON string is invalid with respect to FrameRate
   */
  public static FrameRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FrameRate.class);
  }

  /**
   * Convert an instance of FrameRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

