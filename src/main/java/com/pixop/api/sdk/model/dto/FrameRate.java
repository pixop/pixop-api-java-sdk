/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the frame rate of a video, expressed in frames per second (FPS).
 */
@JsonPropertyOrder({
  FrameRate.JSON_PROPERTY_FRAME_RATE,
  FrameRate.JSON_PROPERTY_RATIONAL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class FrameRate {
  public static final String JSON_PROPERTY_FRAME_RATE = "frameRate";
  @javax.annotation.Nullable
  private BigDecimal frameRate;

  public static final String JSON_PROPERTY_RATIONAL = "rational";
  @javax.annotation.Nullable
  private String rational;

  public FrameRate() {
  }

  public FrameRate frameRate(@javax.annotation.Nullable BigDecimal frameRate) {
    
    this.frameRate = frameRate;
    return this;
  }

  /**
   * The frame rate expressed as a decimal number with three decimal points of precision. Common values include 30, 29.97, 25, and 23.976.
   * @return frameRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFrameRate() {
    return frameRate;
  }


  @JsonProperty(JSON_PROPERTY_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrameRate(@javax.annotation.Nullable BigDecimal frameRate) {
    this.frameRate = frameRate;
  }

  public FrameRate rational(@javax.annotation.Nullable String rational) {
    
    this.rational = rational;
    return this;
  }

  /**
   * The frame rate expressed as a rational number. For example, 30000:1001 represents 29.97 FPS.
   * @return rational
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RATIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRational() {
    return rational;
  }


  @JsonProperty(JSON_PROPERTY_RATIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRational(@javax.annotation.Nullable String rational) {
    this.rational = rational;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrameRate frameRate = (FrameRate) o;
    return Objects.equals(this.frameRate, frameRate.frameRate) &&
        Objects.equals(this.rational, frameRate.rational);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frameRate, rational);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrameRate {\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    rational: ").append(toIndentedString(rational)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `frameRate` to the URL query string
    if (getFrameRate() != null) {
      try {
        joiner.add(String.format("%sframeRate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFrameRate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rational` to the URL query string
    if (getRational() != null) {
      try {
        joiner.add(String.format("%srational%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRational()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

