/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.Video;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * An appraisal for processing a video.  An appraisal can be created before processing a video to estimate the cost and duration of the processing.  Appraisals are temporary and deleted after 15 minutes. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingAppraisal {
  public static final String SERIALIZED_NAME_APPRAISAL_ID = "appraisalId";
  @SerializedName(SERIALIZED_NAME_APPRAISAL_ID)
  @javax.annotation.Nullable
  private UUID appraisalId;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  @javax.annotation.Nullable
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  @javax.annotation.Nullable
  private Video video;

  public VideoProcessingAppraisal() {
  }

  public VideoProcessingAppraisal(
     OffsetDateTime expiresAt, 
     Video video
  ) {
    this();
    this.expiresAt = expiresAt;
    this.video = video;
  }

  public VideoProcessingAppraisal appraisalId(@javax.annotation.Nullable UUID appraisalId) {
    this.appraisalId = appraisalId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return appraisalId
   */
  @javax.annotation.Nullable
  public UUID getAppraisalId() {
    return appraisalId;
  }

  public void setAppraisalId(@javax.annotation.Nullable UUID appraisalId) {
    this.appraisalId = appraisalId;
  }


  /**
   * The date and time when this appraisal expires.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }



  /**
   * Information about the video that will be created if accepting the appraisal, including the estimations and the processing cost in the &#x60;jobAppraisal&#x60; field.
   * @return video
   */
  @javax.annotation.Nullable
  public Video getVideo() {
    return video;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingAppraisal videoProcessingAppraisal = (VideoProcessingAppraisal) o;
    return Objects.equals(this.appraisalId, videoProcessingAppraisal.appraisalId) &&
        Objects.equals(this.expiresAt, videoProcessingAppraisal.expiresAt) &&
        Objects.equals(this.video, videoProcessingAppraisal.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appraisalId, expiresAt, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingAppraisal {\n");
    sb.append("    appraisalId: ").append(toIndentedString(appraisalId)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appraisalId");
    openapiFields.add("expiresAt");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingAppraisal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingAppraisal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingAppraisal is not found in the empty JSON string", VideoProcessingAppraisal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingAppraisal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingAppraisal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appraisalId") != null && !jsonObj.get("appraisalId").isJsonNull()) && !jsonObj.get("appraisalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appraisalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appraisalId").toString()));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        Video.validateJsonElement(jsonObj.get("video"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingAppraisal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingAppraisal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingAppraisal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingAppraisal.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingAppraisal>() {
           @Override
           public void write(JsonWriter out, VideoProcessingAppraisal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingAppraisal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingAppraisal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingAppraisal
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingAppraisal
   */
  public static VideoProcessingAppraisal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingAppraisal.class);
  }

  /**
   * Convert an instance of VideoProcessingAppraisal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

