/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.Video;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * An appraisal for processing a video.  An appraisal can be created before processing a video to estimate the cost and duration of the processing.  Appraisals are temporary and deleted after 15 minutes. 
 */
@JsonPropertyOrder({
  VideoProcessingAppraisal.JSON_PROPERTY_APPRAISAL_ID,
  VideoProcessingAppraisal.JSON_PROPERTY_EXPIRES_AT,
  VideoProcessingAppraisal.JSON_PROPERTY_VIDEO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingAppraisal {
  public static final String JSON_PROPERTY_APPRAISAL_ID = "appraisalId";
  @javax.annotation.Nonnull
  private UUID appraisalId;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @javax.annotation.Nonnull
  private OffsetDateTime expiresAt;

  public static final String JSON_PROPERTY_VIDEO = "video";
  @javax.annotation.Nonnull
  private Video video;

  public VideoProcessingAppraisal() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public VideoProcessingAppraisal(
    @JsonProperty(JSON_PROPERTY_EXPIRES_AT) OffsetDateTime expiresAt, 
    @JsonProperty(JSON_PROPERTY_VIDEO) Video video
  ) {
    this();
    this.expiresAt = expiresAt;
    this.video = video;
  }

  public VideoProcessingAppraisal appraisalId(@javax.annotation.Nonnull UUID appraisalId) {
    
    this.appraisalId = appraisalId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return appraisalId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_APPRAISAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getAppraisalId() {
    return appraisalId;
  }


  @JsonProperty(JSON_PROPERTY_APPRAISAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAppraisalId(@javax.annotation.Nonnull UUID appraisalId) {
    this.appraisalId = appraisalId;
  }

  /**
   * The date and time when this appraisal expires.
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }



  /**
   * Information about the video that will be created if accepting the appraisal, including the estimations and the processing cost in the &#x60;jobAppraisal&#x60; field.
   * @return video
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VIDEO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Video getVideo() {
    return video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingAppraisal videoProcessingAppraisal = (VideoProcessingAppraisal) o;
    return Objects.equals(this.appraisalId, videoProcessingAppraisal.appraisalId) &&
        Objects.equals(this.expiresAt, videoProcessingAppraisal.expiresAt) &&
        Objects.equals(this.video, videoProcessingAppraisal.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appraisalId, expiresAt, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingAppraisal {\n");
    sb.append("    appraisalId: ").append(toIndentedString(appraisalId)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `appraisalId` to the URL query string
    if (getAppraisalId() != null) {
      try {
        joiner.add(String.format("%sappraisalId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAppraisalId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      try {
        joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `video` to the URL query string
    if (getVideo() != null) {
      joiner.add(getVideo().toUrlQueryString(prefix + "video" + suffix));
    }

    return joiner.toString();
  }

}

