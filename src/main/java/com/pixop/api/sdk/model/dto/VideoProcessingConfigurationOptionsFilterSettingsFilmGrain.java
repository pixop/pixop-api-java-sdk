/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Defines the settings for the Pixop Film Grain filter when &#x60;filters.postProcessor&#x60; is set to &#x60;FILMGRAIN&#x60;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptionsFilterSettingsFilmGrain {
  /**
   * Specifies the size of the film grain.
   */
  @JsonAdapter(GrainSizeEnum.Adapter.class)
  public enum GrainSizeEnum {
    SUPER_FINE("SUPER_FINE"),
    
    FINE("FINE"),
    
    MEDIUM("MEDIUM"),
    
    COARSE("COARSE"),
    
    VERY_COARSE("VERY_COARSE");

    private String value;

    GrainSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrainSizeEnum fromValue(String value) {
      for (GrainSizeEnum b : GrainSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrainSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrainSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrainSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrainSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrainSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRAIN_SIZE = "grainSize";
  @SerializedName(SERIALIZED_NAME_GRAIN_SIZE)
  @javax.annotation.Nonnull
  private GrainSizeEnum grainSize;

  public static final String SERIALIZED_NAME_GRAIN_STRENGTH = "grainStrength";
  @SerializedName(SERIALIZED_NAME_GRAIN_STRENGTH)
  @javax.annotation.Nonnull
  private Integer grainStrength;

  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain grainSize(@javax.annotation.Nonnull GrainSizeEnum grainSize) {
    this.grainSize = grainSize;
    return this;
  }

  /**
   * Specifies the size of the film grain.
   * @return grainSize
   */
  @javax.annotation.Nonnull
  public GrainSizeEnum getGrainSize() {
    return grainSize;
  }

  public void setGrainSize(@javax.annotation.Nonnull GrainSizeEnum grainSize) {
    this.grainSize = grainSize;
  }


  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain grainStrength(@javax.annotation.Nonnull Integer grainStrength) {
    this.grainStrength = grainStrength;
    return this;
  }

  /**
   * Strength of the film grain effect, where 0 is invisible and 50 is strong.
   * minimum: 0
   * maximum: 50
   * @return grainStrength
   */
  @javax.annotation.Nonnull
  public Integer getGrainStrength() {
    return grainStrength;
  }

  public void setGrainStrength(@javax.annotation.Nonnull Integer grainStrength) {
    this.grainStrength = grainStrength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsFilmGrain videoProcessingConfigurationOptionsFilterSettingsFilmGrain = (VideoProcessingConfigurationOptionsFilterSettingsFilmGrain) o;
    return Objects.equals(this.grainSize, videoProcessingConfigurationOptionsFilterSettingsFilmGrain.grainSize) &&
        Objects.equals(this.grainStrength, videoProcessingConfigurationOptionsFilterSettingsFilmGrain.grainStrength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grainSize, grainStrength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsFilmGrain {\n");
    sb.append("    grainSize: ").append(toIndentedString(grainSize)).append("\n");
    sb.append("    grainStrength: ").append(toIndentedString(grainStrength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("grainSize");
    openapiFields.add("grainStrength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("grainSize");
    openapiRequiredFields.add("grainStrength");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptionsFilterSettingsFilmGrain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptionsFilterSettingsFilmGrain is not found in the empty JSON string", VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptionsFilterSettingsFilmGrain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("grainSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grainSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grainSize").toString()));
      }
      // validate the required field `grainSize`
      GrainSizeEnum.validateJsonElement(jsonObj.get("grainSize"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptionsFilterSettingsFilmGrain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptionsFilterSettingsFilmGrain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptionsFilterSettingsFilmGrain>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptionsFilterSettingsFilmGrain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptionsFilterSettingsFilmGrain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptionsFilterSettingsFilmGrain
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptionsFilterSettingsFilmGrain
   */
  public static VideoProcessingConfigurationOptionsFilterSettingsFilmGrain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptionsFilterSettingsFilmGrain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

