/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Defines the settings for the Pixop Film Grain filter when &#x60;filters.postProcessor&#x60; is set to &#x60;FILMGRAIN&#x60;. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.JSON_PROPERTY_GRAIN_SIZE,
  VideoProcessingConfigurationOptionsFilterSettingsFilmGrain.JSON_PROPERTY_GRAIN_STRENGTH
})
@JsonTypeName("VideoProcessingConfigurationOptions_filterSettings_filmGrain")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsFilterSettingsFilmGrain {
  /**
   * Specifies the size of the film grain.
   */
  public enum GrainSizeEnum {
    SUPER_FINE(String.valueOf("SUPER_FINE")),
    
    FINE(String.valueOf("FINE")),
    
    MEDIUM(String.valueOf("MEDIUM")),
    
    COARSE(String.valueOf("COARSE")),
    
    VERY_COARSE(String.valueOf("VERY_COARSE")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    GrainSizeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GrainSizeEnum fromValue(String value) {
      for (GrainSizeEnum b : GrainSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_GRAIN_SIZE = "grainSize";
  @javax.annotation.Nonnull
  private GrainSizeEnum grainSize;

  public static final String JSON_PROPERTY_GRAIN_STRENGTH = "grainStrength";
  @javax.annotation.Nonnull
  private Integer grainStrength;

  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain grainSize(@javax.annotation.Nonnull GrainSizeEnum grainSize) {
    
    this.grainSize = grainSize;
    return this;
  }

  /**
   * Specifies the size of the film grain.
   * @return grainSize
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GRAIN_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GrainSizeEnum getGrainSize() {
    return grainSize;
  }


  @JsonProperty(JSON_PROPERTY_GRAIN_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGrainSize(@javax.annotation.Nonnull GrainSizeEnum grainSize) {
    this.grainSize = grainSize;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFilmGrain grainStrength(@javax.annotation.Nonnull Integer grainStrength) {
    
    this.grainStrength = grainStrength;
    return this;
  }

  /**
   * Strength of the film grain effect, where 0 is invisible and 50 is strong.
   * minimum: 0
   * maximum: 50
   * @return grainStrength
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GRAIN_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getGrainStrength() {
    return grainStrength;
  }


  @JsonProperty(JSON_PROPERTY_GRAIN_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGrainStrength(@javax.annotation.Nonnull Integer grainStrength) {
    this.grainStrength = grainStrength;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsFilmGrain videoProcessingConfigurationOptionsFilterSettingsFilmGrain = (VideoProcessingConfigurationOptionsFilterSettingsFilmGrain) o;
    return Objects.equals(this.grainSize, videoProcessingConfigurationOptionsFilterSettingsFilmGrain.grainSize) &&
        Objects.equals(this.grainStrength, videoProcessingConfigurationOptionsFilterSettingsFilmGrain.grainStrength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grainSize, grainStrength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsFilmGrain {\n");
    sb.append("    grainSize: ").append(toIndentedString(grainSize)).append("\n");
    sb.append("    grainStrength: ").append(toIndentedString(grainStrength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `grainSize` to the URL query string
    if (getGrainSize() != null) {
      try {
        joiner.add(String.format("%sgrainSize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGrainSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `grainStrength` to the URL query string
    if (getGrainStrength() != null) {
      try {
        joiner.add(String.format("%sgrainStrength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGrainStrength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

