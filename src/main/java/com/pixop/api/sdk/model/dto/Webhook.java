/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.WebhookEventType;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Webhook
 */
@JsonPropertyOrder({
  Webhook.JSON_PROPERTY_ID,
  Webhook.JSON_PROPERTY_CREATED_AT,
  Webhook.JSON_PROPERTY_UPDATED_AT,
  Webhook.JSON_PROPERTY_TEAM_ID,
  Webhook.JSON_PROPERTY_ACTIVE,
  Webhook.JSON_PROPERTY_NAME,
  Webhook.JSON_PROPERTY_DESCRIPTION,
  Webhook.JSON_PROPERTY_URL,
  Webhook.JSON_PROPERTY_RATE_LIMIT_PER_SECOND,
  Webhook.JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES,
  Webhook.JSON_PROPERTY_EVENT_TYPES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class Webhook {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_TEAM_ID = "teamId";
  @javax.annotation.Nonnull
  private UUID teamId;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  @javax.annotation.Nonnull
  private Boolean active;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nonnull
  private String url;

  public static final String JSON_PROPERTY_RATE_LIMIT_PER_SECOND = "rateLimitPerSecond";
  @javax.annotation.Nonnull
  private Integer rateLimitPerSecond = 10;

  public static final String JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES = "maxTotalRetryDelayMinutes";
  @javax.annotation.Nonnull
  private Integer maxTotalRetryDelayMinutes = 180;

  public static final String JSON_PROPERTY_EVENT_TYPES = "eventTypes";
  @javax.annotation.Nonnull
  private List<WebhookEventType> eventTypes = new ArrayList<>();

  public Webhook() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public Webhook(
    @JsonProperty(JSON_PROPERTY_CREATED_AT) OffsetDateTime createdAt, 
    @JsonProperty(JSON_PROPERTY_UPDATED_AT) OffsetDateTime updatedAt, 
    @JsonProperty(JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES) Integer maxTotalRetryDelayMinutes
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.maxTotalRetryDelayMinutes = maxTotalRetryDelayMinutes;
  }

  public Webhook id(@javax.annotation.Nonnull UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }

  /**
   * Date and time when the object was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Date and time when the object was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public Webhook teamId(@javax.annotation.Nonnull UUID teamId) {
    
    this.teamId = teamId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return teamId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getTeamId() {
    return teamId;
  }


  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTeamId(@javax.annotation.Nonnull UUID teamId) {
    this.teamId = teamId;
  }

  public Webhook active(@javax.annotation.Nonnull Boolean active) {
    
    this.active = active;
    return this;
  }

  /**
   * Indicates whether the webhook is currently active and eligible to receive events.   Inactive webhooks will not receive any event notifications. 
   * @return active
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(@javax.annotation.Nonnull Boolean active) {
    this.active = active;
  }

  public Webhook name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * A user-defined name to help identify and organize the webhook.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  public Webhook description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * A user-defined description providing context about the webhook’s purpose or usage.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public Webhook url(@javax.annotation.Nonnull String url) {
    
    this.url = url;
    return this;
  }

  /**
   * A URL that must use HTTPS and point to a publicly reachable address. Only port 443 is allowed for HTTPS URLs. The following addresses are not allowed: - Loopback (e.g., 127.x.x.x, ::1) - Site-local (RFC1918) addresses (e.g., 10.x.x.x, 192.168.x.x, 172.16–31.x.x, IPv6 unique-local) - Link-local addresses (e.g., 169.254.x.x, fe80::/10) - Multicast addresses (e.g., 224.0.0.0–239.255.255.255, ff00::/8)  The server will parse the URL, resolve its host, and reject any internal or non-public address. 
   * @return url
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }

  public Webhook rateLimitPerSecond(@javax.annotation.Nonnull Integer rateLimitPerSecond) {
    
    this.rateLimitPerSecond = rateLimitPerSecond;
    return this;
  }

  /**
   * The maximum number of requests per second that Pixop will send to the webhook URL.   This rate limit is enforced to avoid overwhelming the receiving system. 
   * minimum: 1
   * maximum: 1000
   * @return rateLimitPerSecond
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RATE_LIMIT_PER_SECOND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRateLimitPerSecond() {
    return rateLimitPerSecond;
  }


  @JsonProperty(JSON_PROPERTY_RATE_LIMIT_PER_SECOND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRateLimitPerSecond(@javax.annotation.Nonnull Integer rateLimitPerSecond) {
    this.rateLimitPerSecond = rateLimitPerSecond;
  }

  /**
   * The maximum total duration, in minutes, over which retry attempts will be made for a failed webhook event.   Once this threshold is reached, no further retries will be performed. 
   * minimum: 0
   * maximum: 1440
   * @return maxTotalRetryDelayMinutes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_TOTAL_RETRY_DELAY_MINUTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxTotalRetryDelayMinutes() {
    return maxTotalRetryDelayMinutes;
  }



  public Webhook eventTypes(@javax.annotation.Nonnull List<WebhookEventType> eventTypes) {
    
    this.eventTypes = eventTypes;
    return this;
  }

  public Webhook addEventTypesItem(WebhookEventType eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

  /**
   * A list of event types the webhook is subscribed to.   The webhook will receive notifications for all specified event types. Each event type corresponds to a specific stage or outcome in the processing pipeline. - &#x60;video_in.started&#x60;: Input video copy operation has started - &#x60;video_in.done&#x60;: Input video copy operation completed - &#x60;video_in.failed&#x60;: Input video copy operation failed - &#x60;video_in_ingestion.started&#x60;: Ingestion of input video has started - &#x60;video_in_ingestion.done&#x60;: Ingestion of input video completed - &#x60;video_in_ingestion.failed&#x60;: Ingestion of input video failed - &#x60;clip_processing.started&#x60;: Video clip processing has started - &#x60;clip_processing.done&#x60;: Video clip processing completed - &#x60;clip_processing.failed&#x60;: Video clip processing failed - &#x60;clip_ingestion.started&#x60;: Ingestion of video clip has started - &#x60;clip_ingestion.done&#x60;: Ingestion of video clip completed - &#x60;clip_ingestion.failed&#x60;: Ingestion of video clip failed - &#x60;video_processing.started&#x60;: Video processing has started - &#x60;video_processing.done&#x60;: Video processing completed - &#x60;video_processing.failed&#x60;: Video processing failed - &#x60;video_processing_ingestion.started&#x60;: Ingestion of processed video has started - &#x60;video_processing_ingestion.done&#x60;: Ingestion of processed video completed - &#x60;video_processing_ingestion.failed&#x60;: Ingestion of processed video failed - &#x60;video_out.started&#x60;: Output video copy operation has started - &#x60;video_out.done&#x60;: Output video copy operation completed - &#x60;video_out.failed&#x60;: Output video copy operation failed - &#x60;video.deleted&#x60;: Video has been deleted 
   * @return eventTypes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<WebhookEventType> getEventTypes() {
    return eventTypes;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventTypes(@javax.annotation.Nonnull List<WebhookEventType> eventTypes) {
    this.eventTypes = eventTypes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhook webhook = (Webhook) o;
    return Objects.equals(this.id, webhook.id) &&
        Objects.equals(this.createdAt, webhook.createdAt) &&
        Objects.equals(this.updatedAt, webhook.updatedAt) &&
        Objects.equals(this.teamId, webhook.teamId) &&
        Objects.equals(this.active, webhook.active) &&
        Objects.equals(this.name, webhook.name) &&
        Objects.equals(this.description, webhook.description) &&
        Objects.equals(this.url, webhook.url) &&
        Objects.equals(this.rateLimitPerSecond, webhook.rateLimitPerSecond) &&
        Objects.equals(this.maxTotalRetryDelayMinutes, webhook.maxTotalRetryDelayMinutes) &&
        Objects.equals(this.eventTypes, webhook.eventTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, updatedAt, teamId, active, name, description, url, rateLimitPerSecond, maxTotalRetryDelayMinutes, eventTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhook {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    rateLimitPerSecond: ").append(toIndentedString(rateLimitPerSecond)).append("\n");
    sb.append("    maxTotalRetryDelayMinutes: ").append(toIndentedString(maxTotalRetryDelayMinutes)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      try {
        joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `teamId` to the URL query string
    if (getTeamId() != null) {
      try {
        joiner.add(String.format("%steamId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTeamId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `active` to the URL query string
    if (getActive() != null) {
      try {
        joiner.add(String.format("%sactive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActive()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `url` to the URL query string
    if (getUrl() != null) {
      try {
        joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rateLimitPerSecond` to the URL query string
    if (getRateLimitPerSecond() != null) {
      try {
        joiner.add(String.format("%srateLimitPerSecond%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRateLimitPerSecond()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `maxTotalRetryDelayMinutes` to the URL query string
    if (getMaxTotalRetryDelayMinutes() != null) {
      try {
        joiner.add(String.format("%smaxTotalRetryDelayMinutes%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTotalRetryDelayMinutes()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `eventTypes` to the URL query string
    if (getEventTypes() != null) {
      for (int i = 0; i < getEventTypes().size(); i++) {
        if (getEventTypes().get(i) != null) {
          try {
            joiner.add(String.format("%seventTypes%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getEventTypes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    return joiner.toString();
  }

}

