/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.WebhookEndpointResponse;
import com.pixop.api.sdk.model.dto.WebhookEventPayload;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * WebhookEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class WebhookEvent {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  @javax.annotation.Nonnull
  private UUID teamId;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  @javax.annotation.Nonnull
  private WebhookEventPayload payload;

  public static final String SERIALIZED_NAME_NEXT_ATTEMPT_EARLIEST_AT = "nextAttemptEarliestAt";
  @SerializedName(SERIALIZED_NAME_NEXT_ATTEMPT_EARLIEST_AT)
  @javax.annotation.Nullable
  private OffsetDateTime nextAttemptEarliestAt;

  public static final String SERIALIZED_NAME_SUCCESSFUL = "successful";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL)
  @javax.annotation.Nullable
  private Boolean successful;

  public static final String SERIALIZED_NAME_RESPONSES = "responses";
  @SerializedName(SERIALIZED_NAME_RESPONSES)
  @javax.annotation.Nonnull
  private List<WebhookEndpointResponse> responses = new ArrayList<>();

  public WebhookEvent() {
  }

  public WebhookEvent(
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     WebhookEventPayload payload, 
     OffsetDateTime nextAttemptEarliestAt, 
     Boolean successful
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.payload = payload;
    this.nextAttemptEarliestAt = nextAttemptEarliestAt;
    this.successful = successful;
  }

  public WebhookEvent id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  /**
   * Date and time when the object was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Date and time when the object was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public WebhookEvent teamId(@javax.annotation.Nonnull UUID teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return teamId
   */
  @javax.annotation.Nonnull
  public UUID getTeamId() {
    return teamId;
  }

  public void setTeamId(@javax.annotation.Nonnull UUID teamId) {
    this.teamId = teamId;
  }


  /**
   * Get payload
   * @return payload
   */
  @javax.annotation.Nonnull
  public WebhookEventPayload getPayload() {
    return payload;
  }



  /**
   * The earliest possible date and time at which the webhook delivery may be attempted.   This applies to both the initial delivery and any subsequent retries.   Due to internal scheduling and rate limiting, the actual attempt may occur shortly after this time. 
   * @return nextAttemptEarliestAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextAttemptEarliestAt() {
    return nextAttemptEarliestAt;
  }



  /**
   * Indicates whether the event was successfully delivered to the webhook endpoint.
   * @return successful
   */
  @javax.annotation.Nullable
  public Boolean getSuccessful() {
    return successful;
  }



  public WebhookEvent responses(@javax.annotation.Nonnull List<WebhookEndpointResponse> responses) {
    this.responses = responses;
    return this;
  }

  public WebhookEvent addResponsesItem(WebhookEndpointResponse responsesItem) {
    if (this.responses == null) {
      this.responses = new ArrayList<>();
    }
    this.responses.add(responsesItem);
    return this;
  }

  /**
   * One or more responses received from the webhook endpoint.   Multiple entries may exist if the event has been retried. 
   * @return responses
   */
  @javax.annotation.Nonnull
  public List<WebhookEndpointResponse> getResponses() {
    return responses;
  }

  public void setResponses(@javax.annotation.Nonnull List<WebhookEndpointResponse> responses) {
    this.responses = responses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEvent webhookEvent = (WebhookEvent) o;
    return Objects.equals(this.id, webhookEvent.id) &&
        Objects.equals(this.createdAt, webhookEvent.createdAt) &&
        Objects.equals(this.updatedAt, webhookEvent.updatedAt) &&
        Objects.equals(this.teamId, webhookEvent.teamId) &&
        Objects.equals(this.payload, webhookEvent.payload) &&
        Objects.equals(this.nextAttemptEarliestAt, webhookEvent.nextAttemptEarliestAt) &&
        Objects.equals(this.successful, webhookEvent.successful) &&
        Objects.equals(this.responses, webhookEvent.responses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, updatedAt, teamId, payload, nextAttemptEarliestAt, successful, responses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    nextAttemptEarliestAt: ").append(toIndentedString(nextAttemptEarliestAt)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    responses: ").append(toIndentedString(responses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("teamId");
    openapiFields.add("payload");
    openapiFields.add("nextAttemptEarliestAt");
    openapiFields.add("successful");
    openapiFields.add("responses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("teamId");
    openapiRequiredFields.add("payload");
    openapiRequiredFields.add("responses");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEvent is not found in the empty JSON string", WebhookEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("teamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamId").toString()));
      }
      // validate the required field `payload`
      WebhookEventPayload.validateJsonElement(jsonObj.get("payload"));
      // ensure the json data is an array
      if (!jsonObj.get("responses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responses` to be an array in the JSON string but got `%s`", jsonObj.get("responses").toString()));
      }

      JsonArray jsonArrayresponses = jsonObj.getAsJsonArray("responses");
      // validate the required field `responses` (array)
      for (int i = 0; i < jsonArrayresponses.size(); i++) {
        WebhookEndpointResponse.validateJsonElement(jsonArrayresponses.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEvent>() {
           @Override
           public void write(JsonWriter out, WebhookEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookEvent
   * @throws IOException if the JSON string is invalid with respect to WebhookEvent
   */
  public static WebhookEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEvent.class);
  }

  /**
   * Convert an instance of WebhookEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

