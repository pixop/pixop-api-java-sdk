/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.Colorimetry;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Defines the color space conversion applied to the output video, including optional inverse tone-mapping operations to align the output colorimetry with the desired specifications.  This ensures the processed video meets the target display requirements and matches the desired output dynamic range, color space, and colorimetry.  The conversion process typically involves:   - Adjusting the output color primaries, transfer characteristics, and matrix coefficients to match the specified target color space.   - Optionally applying inverse tone mapping to expand the dynamic range values as required for High Dynamic Range (HDR) outputs.  This is critical for workflows targeting specific output formats or transitioning between SDR and HDR standards. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion {
  /**
   * Defines the mapping mode used to determine the output colorimetry, leveraging input colorimetry as a reference where applicable.   If the color matrix, range, primaries, or transfer characteristics are missing, they will be inferred based on metadata and resolution as described below:  - &#x60;STRICT_USER&#x60;: Explicitly use the user-provided specification. Validation will fail if the specification is incomplete. - &#x60;INPUT_PRIORITY&#x60;: Prioritize the resolved input colorimetry. Fill any missing properties with source metadata or user-provided data, then infer from resolution and frame rate. - &#x60;SOURCE_PRIORITY&#x60;: Prioritize metadata from the source file. Fill any missing properties with resolved input colorimetry or user-provided data, then infer from resolution and frame rate. - &#x60;USER_PRIORITY&#x60;: Prioritize user-provided colorimetry. Fill any missing properties with resolved input colorimetry or source metadata, then infer from resolution and frame rate. - &#x60;RESOLUTION_ONLY&#x60;: Infer colorimetry entirely based on resolution and frame rate, ignoring input and user-provided metadata.  Resolution-based inference rules: - **SD (NTSC)**:     - Resolution ≤ 720×576     - Frame rate: ~30 fps or ~60 fps     - Colorimetry: Rec. 601 (SMPTE 170M)  - **SD (PAL)**:     - Resolution ≤ 720×576     - Frame rate: non-NTSC     - Colorimetry: Rec. 601 (BT.470BG)  - **HD**:     - Resolution &gt; 720×576 and ≤ 1920×1080     - Frame rate: any     - Colorimetry: Rec. 709  - **UHD**:     - Resolution &gt; 1920×1080     - Frame rate: any     - Colorimetry: Rec. 2020 
   */
  @JsonAdapter(MappingModeEnum.Adapter.class)
  public enum MappingModeEnum {
    STRICT_USER("STRICT_USER"),
    
    INPUT_PRIORITY("INPUT_PRIORITY"),
    
    SOURCE_PRIORITY("SOURCE_PRIORITY"),
    
    USER_PRIORITY("USER_PRIORITY"),
    
    RESOLUTION_ONLY("RESOLUTION_ONLY");

    private String value;

    MappingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MappingModeEnum fromValue(String value) {
      for (MappingModeEnum b : MappingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MappingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MappingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MappingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MappingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MappingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAPPING_MODE = "mappingMode";
  @SerializedName(SERIALIZED_NAME_MAPPING_MODE)
  @javax.annotation.Nonnull
  private MappingModeEnum mappingMode;

  public static final String SERIALIZED_NAME_COLOR_PROFILE = "colorProfile";
  @SerializedName(SERIALIZED_NAME_COLOR_PROFILE)
  @javax.annotation.Nullable
  private Colorimetry colorProfile;

  public static final String SERIALIZED_NAME_METADATA_ONLY = "metadataOnly";
  @SerializedName(SERIALIZED_NAME_METADATA_ONLY)
  @javax.annotation.Nullable
  private Boolean metadataOnly = false;

  public static final String SERIALIZED_NAME_INVERSE_TONE_MAPPER = "inverseToneMapper";
  @SerializedName(SERIALIZED_NAME_INVERSE_TONE_MAPPER)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper inverseToneMapper;

  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion() {
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion mappingMode(@javax.annotation.Nonnull MappingModeEnum mappingMode) {
    this.mappingMode = mappingMode;
    return this;
  }

  /**
   * Defines the mapping mode used to determine the output colorimetry, leveraging input colorimetry as a reference where applicable.   If the color matrix, range, primaries, or transfer characteristics are missing, they will be inferred based on metadata and resolution as described below:  - &#x60;STRICT_USER&#x60;: Explicitly use the user-provided specification. Validation will fail if the specification is incomplete. - &#x60;INPUT_PRIORITY&#x60;: Prioritize the resolved input colorimetry. Fill any missing properties with source metadata or user-provided data, then infer from resolution and frame rate. - &#x60;SOURCE_PRIORITY&#x60;: Prioritize metadata from the source file. Fill any missing properties with resolved input colorimetry or user-provided data, then infer from resolution and frame rate. - &#x60;USER_PRIORITY&#x60;: Prioritize user-provided colorimetry. Fill any missing properties with resolved input colorimetry or source metadata, then infer from resolution and frame rate. - &#x60;RESOLUTION_ONLY&#x60;: Infer colorimetry entirely based on resolution and frame rate, ignoring input and user-provided metadata.  Resolution-based inference rules: - **SD (NTSC)**:     - Resolution ≤ 720×576     - Frame rate: ~30 fps or ~60 fps     - Colorimetry: Rec. 601 (SMPTE 170M)  - **SD (PAL)**:     - Resolution ≤ 720×576     - Frame rate: non-NTSC     - Colorimetry: Rec. 601 (BT.470BG)  - **HD**:     - Resolution &gt; 720×576 and ≤ 1920×1080     - Frame rate: any     - Colorimetry: Rec. 709  - **UHD**:     - Resolution &gt; 1920×1080     - Frame rate: any     - Colorimetry: Rec. 2020 
   * @return mappingMode
   */
  @javax.annotation.Nonnull
  public MappingModeEnum getMappingMode() {
    return mappingMode;
  }

  public void setMappingMode(@javax.annotation.Nonnull MappingModeEnum mappingMode) {
    this.mappingMode = mappingMode;
  }


  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion colorProfile(@javax.annotation.Nullable Colorimetry colorProfile) {
    this.colorProfile = colorProfile;
    return this;
  }

  /**
   * Get colorProfile
   * @return colorProfile
   */
  @javax.annotation.Nullable
  public Colorimetry getColorProfile() {
    return colorProfile;
  }

  public void setColorProfile(@javax.annotation.Nullable Colorimetry colorProfile) {
    this.colorProfile = colorProfile;
  }


  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion metadataOnly(@javax.annotation.Nullable Boolean metadataOnly) {
    this.metadataOnly = metadataOnly;
    return this;
  }

  /**
   * If set to &#x60;true&#x60;, the output colorimetry is determined based on the specified mapping mode, but no actual color space conversion is performed. Instead, the determined colorimetry is applied only to the metadata of the output file.
   * @return metadataOnly
   */
  @javax.annotation.Nullable
  public Boolean getMetadataOnly() {
    return metadataOnly;
  }

  public void setMetadataOnly(@javax.annotation.Nullable Boolean metadataOnly) {
    this.metadataOnly = metadataOnly;
  }


  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion inverseToneMapper(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper inverseToneMapper) {
    this.inverseToneMapper = inverseToneMapper;
    return this;
  }

  /**
   * Get inverseToneMapper
   * @return inverseToneMapper
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper getInverseToneMapper() {
    return inverseToneMapper;
  }

  public void setInverseToneMapper(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper inverseToneMapper) {
    this.inverseToneMapper = inverseToneMapper;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion = (VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion) o;
    return Objects.equals(this.mappingMode, videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.mappingMode) &&
        Objects.equals(this.colorProfile, videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.colorProfile) &&
        Objects.equals(this.metadataOnly, videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.metadataOnly) &&
        Objects.equals(this.inverseToneMapper, videoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.inverseToneMapper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mappingMode, colorProfile, metadataOnly, inverseToneMapper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion {\n");
    sb.append("    mappingMode: ").append(toIndentedString(mappingMode)).append("\n");
    sb.append("    colorProfile: ").append(toIndentedString(colorProfile)).append("\n");
    sb.append("    metadataOnly: ").append(toIndentedString(metadataOnly)).append("\n");
    sb.append("    inverseToneMapper: ").append(toIndentedString(inverseToneMapper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mappingMode");
    openapiFields.add("colorProfile");
    openapiFields.add("metadataOnly");
    openapiFields.add("inverseToneMapper");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mappingMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion is not found in the empty JSON string", VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("mappingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mappingMode").toString()));
      }
      // validate the required field `mappingMode`
      MappingModeEnum.validateJsonElement(jsonObj.get("mappingMode"));
      // validate the optional field `colorProfile`
      if (jsonObj.get("colorProfile") != null && !jsonObj.get("colorProfile").isJsonNull()) {
        Colorimetry.validateJsonElement(jsonObj.get("colorProfile"));
      }
      // validate the optional field `inverseToneMapper`
      if (jsonObj.get("inverseToneMapper") != null && !jsonObj.get("inverseToneMapper").isJsonNull()) {
        VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversionInverseToneMapper.validateJsonElement(jsonObj.get("inverseToneMapper"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion
   */
  public static VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptionsProcessingSettingsOutputColorSpaceConversion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

