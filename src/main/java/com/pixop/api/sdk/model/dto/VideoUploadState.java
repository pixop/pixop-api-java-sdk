/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.OperationStatus;
import com.pixop.api.sdk.model.dto.VideoUploadStateError;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents the current state of a master video upload process.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoUploadState {
  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPLOAD_STATUS = "uploadStatus";
  @SerializedName(SERIALIZED_NAME_UPLOAD_STATUS)
  @javax.annotation.Nullable
  private OperationStatus uploadStatus;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENTAGE = "progressPercentage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENTAGE)
  @javax.annotation.Nullable
  private Integer progressPercentage;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private VideoUploadStateError error;

  public VideoUploadState() {
  }

  public VideoUploadState(
     OffsetDateTime updatedAt, 
     OperationStatus uploadStatus
  ) {
    this();
    this.updatedAt = updatedAt;
    this.uploadStatus = uploadStatus;
  }

  /**
   * The date and time of the most recent update to the upload state.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  /**
   * The current status of the upload operation.
   * @return uploadStatus
   */
  @javax.annotation.Nullable
  public OperationStatus getUploadStatus() {
    return uploadStatus;
  }



  public VideoUploadState progressPercentage(@javax.annotation.Nullable Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
    return this;
  }

  /**
   * A percentage value represented as an integer. Commonly used to denote progress or completion levels. E.g., 0, 50, 100.
   * minimum: 0
   * maximum: 100
   * @return progressPercentage
   */
  @javax.annotation.Nullable
  public Integer getProgressPercentage() {
    return progressPercentage;
  }

  public void setProgressPercentage(@javax.annotation.Nullable Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
  }


  public VideoUploadState error(@javax.annotation.Nullable VideoUploadStateError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public VideoUploadStateError getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable VideoUploadStateError error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoUploadState videoUploadState = (VideoUploadState) o;
    return Objects.equals(this.updatedAt, videoUploadState.updatedAt) &&
        Objects.equals(this.uploadStatus, videoUploadState.uploadStatus) &&
        Objects.equals(this.progressPercentage, videoUploadState.progressPercentage) &&
        Objects.equals(this.error, videoUploadState.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updatedAt, uploadStatus, progressPercentage, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoUploadState {\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    uploadStatus: ").append(toIndentedString(uploadStatus)).append("\n");
    sb.append("    progressPercentage: ").append(toIndentedString(progressPercentage)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("updatedAt");
    openapiFields.add("uploadStatus");
    openapiFields.add("progressPercentage");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoUploadState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoUploadState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoUploadState is not found in the empty JSON string", VideoUploadState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoUploadState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoUploadState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `uploadStatus`
      if (jsonObj.get("uploadStatus") != null && !jsonObj.get("uploadStatus").isJsonNull()) {
        OperationStatus.validateJsonElement(jsonObj.get("uploadStatus"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        VideoUploadStateError.validateJsonElement(jsonObj.get("error"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoUploadState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoUploadState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoUploadState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoUploadState.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoUploadState>() {
           @Override
           public void write(JsonWriter out, VideoUploadState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoUploadState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoUploadState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoUploadState
   * @throws IOException if the JSON string is invalid with respect to VideoUploadState
   */
  public static VideoUploadState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoUploadState.class);
  }

  /**
   * Convert an instance of VideoUploadState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

