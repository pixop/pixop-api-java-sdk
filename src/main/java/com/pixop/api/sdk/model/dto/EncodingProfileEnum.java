/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The encoding profile used in the video encoding process, controlling the media container, codec, chroma subsampling, and bitrate.  If &#x60;encodingProfile&#x60; is set, &#x60;encodingConfiguration&#x60; should not be specified.  Available profiles:  **Apple ProRes** - &#x60;PRORES_422_LT&#x60;: Apple ProRes 422 (LT) - &#x60;PRORES_422_STANDARD&#x60;: Apple ProRes 422 (Standard) - &#x60;PRORES_422_PROXY&#x60;: Apple ProRes 422 (Proxy) - &#x60;PRORES_422_HQ&#x60;: Apple ProRes 422 (HQ) - &#x60;PRORES_4444_STANDARD&#x60;: Apple ProRes 4444 (Standard) - &#x60;PRORES_4444_XQ&#x60;: Apple ProRes 4444 (XQ)  **Avid DNxHD** - &#x60;DNXHD_36_LB&#x60;: Avid DNxHD 36 (Low Bandwidth) - &#x60;DNXHD_45_LB&#x60;: Avid DNxHD 45 (Low Bandwidth) - &#x60;DNXHD_75_LB&#x60;: Avid DNxHD 75 (Low Bandwidth) - &#x60;DNXHD_90_LB&#x60;: Avid DNxHD 90 (Low Bandwidth) - &#x60;DNXHD_115_SQ&#x60;: Avid DNxHD 115 (Standard Quality) - &#x60;DNXHD_120_SQ&#x60;: Avid DNxHD 120 (Standard Quality) - &#x60;DNXHD_145_SQ&#x60;: Avid DNxHD 145 (Standard Quality) - &#x60;DNXHD_240_SQ&#x60;: Avid DNxHD 240 (Standard Quality) - &#x60;DNXHD_290_SQ&#x60;: Avid DNxHD 290 (Standard Quality) - &#x60;DNXHD_175_HQ&#x60;: Avid DNxHD 175 (High Quality) - &#x60;DNXHD_185_HQ&#x60;: Avid DNxHD 185 (High Quality) - &#x60;DNXHD_220_HQ&#x60;: Avid DNxHD 220 (High Quality) - &#x60;DNXHD_365_HQ&#x60;: Avid DNxHD 365 (High Quality) - &#x60;DNXHD_440_HQ&#x60;: Avid DNxHD 440 (High Quality) - &#x60;DNXHD_175X_HQX&#x60;: Avid DNxHD 175X (High Quality Extended) - &#x60;DNXHD_185X_HQX&#x60;: Avid DNxHD 185X (High Quality Extended) - &#x60;DNXHD_220X_HQX&#x60;: Avid DNxHD 220X (High Quality Extended) - &#x60;DNXHD_365X_HQX&#x60;: Avid DNxHD 365X (High Quality Extended) - &#x60;DNXHD_440X_HQX&#x60;: Avid DNxHD 440X (High Quality Extended) - &#x60;DNXHD_350X_444&#x60;: Avid DNxHD 350X (4:4:4) - &#x60;DNXHD_390X_444&#x60;: Avid DNxHD 390X (4:4:4) - &#x60;DNXHD_440X_444&#x60;: Avid DNxHD 440X (4:4:4) - &#x60;DNXHD_730X_444&#x60;: Avid DNxHD 730X (4:4:4) - &#x60;DNXHD_880X_444&#x60;: Avid DNxHD 880X (4:4:4)  **Avid DNxHR** - &#x60;DNXHR_LB&#x60;: Avid DNxHR LB (Low Bandwidth) - &#x60;DNXHR_SQ&#x60;: Avid DNxHR SQ (Standard Quality) - &#x60;DNXHR_HQ&#x60;: Avid DNxHR HQ (High Quality) - &#x60;DNXHR_HQX&#x60;: Avid DNxHR HQX (High Quality Extended) - &#x60;DNXHR_444&#x60;: Avid DNxHR 444 (4:4:4) 
 */
@JsonAdapter(EncodingProfileEnum.Adapter.class)
public enum EncodingProfileEnum {
  
  PRORES_422_LT("PRORES_422_LT"),
  
  PRORES_422_STANDARD("PRORES_422_STANDARD"),
  
  PRORES_422_PROXY("PRORES_422_PROXY"),
  
  PRORES_422_HQ("PRORES_422_HQ"),
  
  PRORES_4444_STANDARD("PRORES_4444_STANDARD"),
  
  PRORES_4444_XQ("PRORES_4444_XQ"),
  
  DNXHD_36_LB("DNXHD_36_LB"),
  
  DNXHD_45_LB("DNXHD_45_LB"),
  
  DNXHD_75_LB("DNXHD_75_LB"),
  
  DNXHD_90_LB("DNXHD_90_LB"),
  
  DNXHD_115_SQ("DNXHD_115_SQ"),
  
  DNXHD_120_SQ("DNXHD_120_SQ"),
  
  DNXHD_145_SQ("DNXHD_145_SQ"),
  
  DNXHD_240_SQ("DNXHD_240_SQ"),
  
  DNXHD_290_SQ("DNXHD_290_SQ"),
  
  DNXHD_175_HQ("DNXHD_175_HQ"),
  
  DNXHD_185_HQ("DNXHD_185_HQ"),
  
  DNXHD_220_HQ("DNXHD_220_HQ"),
  
  DNXHD_365_HQ("DNXHD_365_HQ"),
  
  DNXHD_440_HQ("DNXHD_440_HQ"),
  
  DNXHD_175_X_HQX("DNXHD_175X_HQX"),
  
  DNXHD_185_X_HQX("DNXHD_185X_HQX"),
  
  DNXHD_220_X_HQX("DNXHD_220X_HQX"),
  
  DNXHD_365_X_HQX("DNXHD_365X_HQX"),
  
  DNXHD_440_X_HQX("DNXHD_440X_HQX"),
  
  DNXHD_350_X_444("DNXHD_350X_444"),
  
  DNXHD_390_X_444("DNXHD_390X_444"),
  
  DNXHD_440_X_444("DNXHD_440X_444"),
  
  DNXHD_730_X_444("DNXHD_730X_444"),
  
  DNXHD_880_X_444("DNXHD_880X_444"),
  
  DNXHR_LB("DNXHR_LB"),
  
  DNXHR_SQ("DNXHR_SQ"),
  
  DNXHR_HQ("DNXHR_HQ"),
  
  DNXHR_HQX("DNXHR_HQX"),
  
  DNXHR_444("DNXHR_444");

  private String value;

  EncodingProfileEnum(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EncodingProfileEnum fromValue(String value) {
    for (EncodingProfileEnum b : EncodingProfileEnum.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EncodingProfileEnum> {
    @Override
    public void write(final JsonWriter jsonWriter, final EncodingProfileEnum enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EncodingProfileEnum read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EncodingProfileEnum.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EncodingProfileEnum.fromValue(value);
  }
}

