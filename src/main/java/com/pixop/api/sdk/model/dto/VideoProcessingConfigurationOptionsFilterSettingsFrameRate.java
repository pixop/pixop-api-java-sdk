/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Defines how to adjust the frame rate of the video when &#x60;filters.frameRateConverter&#x60; is used.  Settings can include direct frame rate values or predefined tags for standard rates. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsFilterSettingsFrameRate.JSON_PROPERTY_TAG,
  VideoProcessingConfigurationOptionsFilterSettingsFrameRate.JSON_PROPERTY_FPS
})
@JsonTypeName("VideoProcessingConfigurationOptions_filterSettings_frameRate")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsFilterSettingsFrameRate {
  /**
   * Specifies frame rate settings using tags for common video standards.  If &#x60;tag&#x60; is used, the &#x60;fps&#x60; field is ignored.  Available tags and their corresponding frame rates: - &#x60;FILM_NTSC&#x60;: Film with NTSC compatibility — 23.976 fps - &#x60;FILM&#x60;: Film — 24 fps - &#x60;VIDEO_PAL&#x60;: PAL video — 25 fps - &#x60;VIDEO_NTSC&#x60;: NTSC video — 29.97 fps - &#x60;VIDEO_HD&#x60;: HD video — 30 fps - &#x60;VIDEO_PAL_FAST&#x60;: PAL video — 50 fps - &#x60;VIDEO_NTSC_FAST&#x60;: HD video with NTSC compatibility — 59.94 fps - &#x60;VIDEO_HD_FAST&#x60;: HD video — 60 fps - &#x60;VIDEO_PAL_UHD&#x60;: PAL UHD video — 100 fps - &#x60;VIDEO_NTSC_UHD&#x60;: UHD video with NTSC compatibility — 119.88 fps - &#x60;VIDEO_UHD_FAST&#x60;: UHD video — 120 fps 
   */
  public enum TagEnum {
    FILM_NTSC(String.valueOf("FILM_NTSC")),
    
    FILM(String.valueOf("FILM")),
    
    VIDEO_PAL(String.valueOf("VIDEO_PAL")),
    
    VIDEO_NTSC(String.valueOf("VIDEO_NTSC")),
    
    VIDEO_HD(String.valueOf("VIDEO_HD")),
    
    VIDEO_PAL_FAST(String.valueOf("VIDEO_PAL_FAST")),
    
    VIDEO_NTSC_FAST(String.valueOf("VIDEO_NTSC_FAST")),
    
    VIDEO_HD_FAST(String.valueOf("VIDEO_HD_FAST")),
    
    VIDEO_PAL_UHD(String.valueOf("VIDEO_PAL_UHD")),
    
    VIDEO_NTSC_UHD(String.valueOf("VIDEO_NTSC_UHD")),
    
    VIDEO_UHD_FAST(String.valueOf("VIDEO_UHD_FAST")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    TagEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TagEnum fromValue(String value) {
      for (TagEnum b : TagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_TAG = "tag";
  @javax.annotation.Nullable
  private TagEnum tag;

  public static final String JSON_PROPERTY_FPS = "fps";
  @javax.annotation.Nullable
  private BigDecimal fps;

  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate tag(@javax.annotation.Nullable TagEnum tag) {
    
    this.tag = tag;
    return this;
  }

  /**
   * Specifies frame rate settings using tags for common video standards.  If &#x60;tag&#x60; is used, the &#x60;fps&#x60; field is ignored.  Available tags and their corresponding frame rates: - &#x60;FILM_NTSC&#x60;: Film with NTSC compatibility — 23.976 fps - &#x60;FILM&#x60;: Film — 24 fps - &#x60;VIDEO_PAL&#x60;: PAL video — 25 fps - &#x60;VIDEO_NTSC&#x60;: NTSC video — 29.97 fps - &#x60;VIDEO_HD&#x60;: HD video — 30 fps - &#x60;VIDEO_PAL_FAST&#x60;: PAL video — 50 fps - &#x60;VIDEO_NTSC_FAST&#x60;: HD video with NTSC compatibility — 59.94 fps - &#x60;VIDEO_HD_FAST&#x60;: HD video — 60 fps - &#x60;VIDEO_PAL_UHD&#x60;: PAL UHD video — 100 fps - &#x60;VIDEO_NTSC_UHD&#x60;: UHD video with NTSC compatibility — 119.88 fps - &#x60;VIDEO_UHD_FAST&#x60;: UHD video — 120 fps 
   * @return tag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TagEnum getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(@javax.annotation.Nullable TagEnum tag) {
    this.tag = tag;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate fps(@javax.annotation.Nullable BigDecimal fps) {
    
    this.fps = fps;
    return this;
  }

  /**
   * Specifies the output frame rate in frames per second (fps).
   * minimum: 0.001
   * maximum: 999
   * @return fps
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFps() {
    return fps;
  }


  @JsonProperty(JSON_PROPERTY_FPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFps(@javax.annotation.Nullable BigDecimal fps) {
    this.fps = fps;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsFrameRate videoProcessingConfigurationOptionsFilterSettingsFrameRate = (VideoProcessingConfigurationOptionsFilterSettingsFrameRate) o;
    return Objects.equals(this.tag, videoProcessingConfigurationOptionsFilterSettingsFrameRate.tag) &&
        Objects.equals(this.fps, videoProcessingConfigurationOptionsFilterSettingsFrameRate.fps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, fps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsFrameRate {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    fps: ").append(toIndentedString(fps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tag` to the URL query string
    if (getTag() != null) {
      try {
        joiner.add(String.format("%stag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTag()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fps` to the URL query string
    if (getFps() != null) {
      try {
        joiner.add(String.format("%sfps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

