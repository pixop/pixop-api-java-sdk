/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Defines how to adjust the frame rate of the video when &#x60;filters.frameRateConverter&#x60; is used.  Settings can include direct frame rate values or predefined tags for standard rates. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptionsFilterSettingsFrameRate {
  /**
   * Specifies frame rate settings using tags for common video standards.  If &#x60;tag&#x60; is used, the &#x60;fps&#x60; field is ignored.  Available tags and their corresponding frame rates: - &#x60;FILM_NTSC&#x60;: Film with NTSC compatibility — 23.976 fps - &#x60;FILM&#x60;: Film — 24 fps - &#x60;VIDEO_PAL&#x60;: PAL video — 25 fps - &#x60;VIDEO_NTSC&#x60;: NTSC video — 29.97 fps - &#x60;VIDEO_HD&#x60;: HD video — 30 fps - &#x60;VIDEO_PAL_FAST&#x60;: PAL video — 50 fps - &#x60;VIDEO_NTSC_FAST&#x60;: HD video with NTSC compatibility — 59.94 fps - &#x60;VIDEO_HD_FAST&#x60;: HD video — 60 fps - &#x60;VIDEO_PAL_UHD&#x60;: PAL UHD video — 100 fps - &#x60;VIDEO_NTSC_UHD&#x60;: UHD video with NTSC compatibility — 119.88 fps - &#x60;VIDEO_UHD_FAST&#x60;: UHD video — 120 fps 
   */
  @JsonAdapter(TagEnum.Adapter.class)
  public enum TagEnum {
    FILM_NTSC("FILM_NTSC"),
    
    FILM("FILM"),
    
    VIDEO_PAL("VIDEO_PAL"),
    
    VIDEO_NTSC("VIDEO_NTSC"),
    
    VIDEO_HD("VIDEO_HD"),
    
    VIDEO_PAL_FAST("VIDEO_PAL_FAST"),
    
    VIDEO_NTSC_FAST("VIDEO_NTSC_FAST"),
    
    VIDEO_HD_FAST("VIDEO_HD_FAST"),
    
    VIDEO_PAL_UHD("VIDEO_PAL_UHD"),
    
    VIDEO_NTSC_UHD("VIDEO_NTSC_UHD"),
    
    VIDEO_UHD_FAST("VIDEO_UHD_FAST");

    private String value;

    TagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TagEnum fromValue(String value) {
      for (TagEnum b : TagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TagEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TagEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private TagEnum tag;

  public static final String SERIALIZED_NAME_FPS = "fps";
  @SerializedName(SERIALIZED_NAME_FPS)
  @javax.annotation.Nullable
  private BigDecimal fps;

  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate tag(@javax.annotation.Nullable TagEnum tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Specifies frame rate settings using tags for common video standards.  If &#x60;tag&#x60; is used, the &#x60;fps&#x60; field is ignored.  Available tags and their corresponding frame rates: - &#x60;FILM_NTSC&#x60;: Film with NTSC compatibility — 23.976 fps - &#x60;FILM&#x60;: Film — 24 fps - &#x60;VIDEO_PAL&#x60;: PAL video — 25 fps - &#x60;VIDEO_NTSC&#x60;: NTSC video — 29.97 fps - &#x60;VIDEO_HD&#x60;: HD video — 30 fps - &#x60;VIDEO_PAL_FAST&#x60;: PAL video — 50 fps - &#x60;VIDEO_NTSC_FAST&#x60;: HD video with NTSC compatibility — 59.94 fps - &#x60;VIDEO_HD_FAST&#x60;: HD video — 60 fps - &#x60;VIDEO_PAL_UHD&#x60;: PAL UHD video — 100 fps - &#x60;VIDEO_NTSC_UHD&#x60;: UHD video with NTSC compatibility — 119.88 fps - &#x60;VIDEO_UHD_FAST&#x60;: UHD video — 120 fps 
   * @return tag
   */
  @javax.annotation.Nullable
  public TagEnum getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable TagEnum tag) {
    this.tag = tag;
  }


  public VideoProcessingConfigurationOptionsFilterSettingsFrameRate fps(@javax.annotation.Nullable BigDecimal fps) {
    this.fps = fps;
    return this;
  }

  /**
   * Specifies the output frame rate in frames per second (fps).
   * minimum: 0.001
   * maximum: 999
   * @return fps
   */
  @javax.annotation.Nullable
  public BigDecimal getFps() {
    return fps;
  }

  public void setFps(@javax.annotation.Nullable BigDecimal fps) {
    this.fps = fps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsFrameRate videoProcessingConfigurationOptionsFilterSettingsFrameRate = (VideoProcessingConfigurationOptionsFilterSettingsFrameRate) o;
    return Objects.equals(this.tag, videoProcessingConfigurationOptionsFilterSettingsFrameRate.tag) &&
        Objects.equals(this.fps, videoProcessingConfigurationOptionsFilterSettingsFrameRate.fps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, fps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsFrameRate {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    fps: ").append(toIndentedString(fps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tag");
    openapiFields.add("fps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptionsFilterSettingsFrameRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptionsFilterSettingsFrameRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptionsFilterSettingsFrameRate is not found in the empty JSON string", VideoProcessingConfigurationOptionsFilterSettingsFrameRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptionsFilterSettingsFrameRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptionsFilterSettingsFrameRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        TagEnum.validateJsonElement(jsonObj.get("tag"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptionsFilterSettingsFrameRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptionsFilterSettingsFrameRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptionsFilterSettingsFrameRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptionsFilterSettingsFrameRate.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptionsFilterSettingsFrameRate>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptionsFilterSettingsFrameRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptionsFilterSettingsFrameRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptionsFilterSettingsFrameRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptionsFilterSettingsFrameRate
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptionsFilterSettingsFrameRate
   */
  public static VideoProcessingConfigurationOptionsFilterSettingsFrameRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptionsFilterSettingsFrameRate.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptionsFilterSettingsFrameRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

