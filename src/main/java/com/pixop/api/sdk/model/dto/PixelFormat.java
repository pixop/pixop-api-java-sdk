/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.BitDepthEnum;
import com.pixop.api.sdk.model.dto.ChromaSubsamplingYUV;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * The pixel format of the video. If not explicitly specified, the output video will inherit the pixel format of the source video. The pixel format defines the chroma subsampling, bit depth, and format name for encoding and processing. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class PixelFormat {
  public static final String SERIALIZED_NAME_YUV = "yuv";
  @SerializedName(SERIALIZED_NAME_YUV)
  @javax.annotation.Nullable
  private ChromaSubsamplingYUV yuv = ChromaSubsamplingYUV._4_2_0;

  public static final String SERIALIZED_NAME_BIT_DEPTH = "bitDepth";
  @SerializedName(SERIALIZED_NAME_BIT_DEPTH)
  @javax.annotation.Nullable
  private BitDepthEnum bitDepth = BitDepthEnum.NUMBER_8;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public PixelFormat() {
  }

  public PixelFormat(
     String name
  ) {
    this();
    this.name = name;
  }

  public PixelFormat yuv(@javax.annotation.Nullable ChromaSubsamplingYUV yuv) {
    this.yuv = yuv;
    return this;
  }

  /**
   * Get yuv
   * @return yuv
   */
  @javax.annotation.Nullable
  public ChromaSubsamplingYUV getYuv() {
    return yuv;
  }

  public void setYuv(@javax.annotation.Nullable ChromaSubsamplingYUV yuv) {
    this.yuv = yuv;
  }


  public PixelFormat bitDepth(@javax.annotation.Nullable BitDepthEnum bitDepth) {
    this.bitDepth = bitDepth;
    return this;
  }

  /**
   * Get bitDepth
   * @return bitDepth
   */
  @javax.annotation.Nullable
  public BitDepthEnum getBitDepth() {
    return bitDepth;
  }

  public void setBitDepth(@javax.annotation.Nullable BitDepthEnum bitDepth) {
    this.bitDepth = bitDepth;
  }


  /**
   * The name of the pixel format used in the video. Examples include yuv420p, yuv422p, and yuv444p. The pixel format is closely related to chroma subsampling and determines how color information is stored. 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PixelFormat pixelFormat = (PixelFormat) o;
    return Objects.equals(this.yuv, pixelFormat.yuv) &&
        Objects.equals(this.bitDepth, pixelFormat.bitDepth) &&
        Objects.equals(this.name, pixelFormat.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(yuv, bitDepth, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PixelFormat {\n");
    sb.append("    yuv: ").append(toIndentedString(yuv)).append("\n");
    sb.append("    bitDepth: ").append(toIndentedString(bitDepth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("yuv");
    openapiFields.add("bitDepth");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PixelFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PixelFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PixelFormat is not found in the empty JSON string", PixelFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PixelFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PixelFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `yuv`
      if (jsonObj.get("yuv") != null && !jsonObj.get("yuv").isJsonNull()) {
        ChromaSubsamplingYUV.validateJsonElement(jsonObj.get("yuv"));
      }
      // validate the optional field `bitDepth`
      if (jsonObj.get("bitDepth") != null && !jsonObj.get("bitDepth").isJsonNull()) {
        BitDepthEnum.validateJsonElement(jsonObj.get("bitDepth"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PixelFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PixelFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PixelFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PixelFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<PixelFormat>() {
           @Override
           public void write(JsonWriter out, PixelFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PixelFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PixelFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PixelFormat
   * @throws IOException if the JSON string is invalid with respect to PixelFormat
   */
  public static PixelFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PixelFormat.class);
  }

  /**
   * Convert an instance of PixelFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

