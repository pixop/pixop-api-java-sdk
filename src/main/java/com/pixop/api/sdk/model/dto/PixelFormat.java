/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.BitDepthEnum;
import com.pixop.api.sdk.model.dto.ChromaSubsamplingYUV;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The pixel format of the video. If not explicitly specified, the output video will inherit the pixel format of the source video. The pixel format defines the chroma subsampling, bit depth, and format name for encoding and processing. 
 */
@JsonPropertyOrder({
  PixelFormat.JSON_PROPERTY_YUV,
  PixelFormat.JSON_PROPERTY_BIT_DEPTH,
  PixelFormat.JSON_PROPERTY_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class PixelFormat {
  public static final String JSON_PROPERTY_YUV = "yuv";
  @javax.annotation.Nullable
  private ChromaSubsamplingYUV yuv = ChromaSubsamplingYUV._4_2_0;

  public static final String JSON_PROPERTY_BIT_DEPTH = "bitDepth";
  @javax.annotation.Nullable
  private BitDepthEnum bitDepth = BitDepthEnum.NUMBER_8;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public PixelFormat() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public PixelFormat(
    @JsonProperty(JSON_PROPERTY_NAME) String name
  ) {
    this();
    this.name = name;
  }

  public PixelFormat yuv(@javax.annotation.Nullable ChromaSubsamplingYUV yuv) {
    
    this.yuv = yuv;
    return this;
  }

  /**
   * Get yuv
   * @return yuv
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_YUV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChromaSubsamplingYUV getYuv() {
    return yuv;
  }


  @JsonProperty(JSON_PROPERTY_YUV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setYuv(@javax.annotation.Nullable ChromaSubsamplingYUV yuv) {
    this.yuv = yuv;
  }

  public PixelFormat bitDepth(@javax.annotation.Nullable BitDepthEnum bitDepth) {
    
    this.bitDepth = bitDepth;
    return this;
  }

  /**
   * Get bitDepth
   * @return bitDepth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIT_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BitDepthEnum getBitDepth() {
    return bitDepth;
  }


  @JsonProperty(JSON_PROPERTY_BIT_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBitDepth(@javax.annotation.Nullable BitDepthEnum bitDepth) {
    this.bitDepth = bitDepth;
  }

  /**
   * The name of the pixel format used in the video. Examples include yuv420p, yuv422p, and yuv444p. The pixel format is closely related to chroma subsampling and determines how color information is stored. 
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PixelFormat pixelFormat = (PixelFormat) o;
    return Objects.equals(this.yuv, pixelFormat.yuv) &&
        Objects.equals(this.bitDepth, pixelFormat.bitDepth) &&
        Objects.equals(this.name, pixelFormat.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(yuv, bitDepth, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PixelFormat {\n");
    sb.append("    yuv: ").append(toIndentedString(yuv)).append("\n");
    sb.append("    bitDepth: ").append(toIndentedString(bitDepth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `yuv` to the URL query string
    if (getYuv() != null) {
      try {
        joiner.add(String.format("%syuv%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getYuv()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `bitDepth` to the URL query string
    if (getBitDepth() != null) {
      try {
        joiner.add(String.format("%sbitDepth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBitDepth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

