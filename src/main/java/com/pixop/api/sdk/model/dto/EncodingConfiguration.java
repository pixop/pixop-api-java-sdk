/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.CodecEnum;
import com.pixop.api.sdk.model.dto.PixelFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Configuration options for encoding a video, allowing detailed control over the encoding process.  Should not be used in conjunction with &#x60;encodingProfile&#x60;. 
 */
@JsonPropertyOrder({
  EncodingConfiguration.JSON_PROPERTY_CODEC,
  EncodingConfiguration.JSON_PROPERTY_PIXEL_FORMAT,
  EncodingConfiguration.JSON_PROPERTY_BITRATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class EncodingConfiguration {
  public static final String JSON_PROPERTY_CODEC = "codec";
  @javax.annotation.Nullable
  private CodecEnum codec;

  public static final String JSON_PROPERTY_PIXEL_FORMAT = "pixelFormat";
  @javax.annotation.Nullable
  private PixelFormat pixelFormat;

  public static final String JSON_PROPERTY_BITRATE = "bitrate";
  @javax.annotation.Nullable
  private Long bitrate;

  public EncodingConfiguration() {
  }

  public EncodingConfiguration codec(@javax.annotation.Nullable CodecEnum codec) {
    
    this.codec = codec;
    return this;
  }

  /**
   * The codec used for video encoding.
   * @return codec
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CodecEnum getCodec() {
    return codec;
  }


  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodec(@javax.annotation.Nullable CodecEnum codec) {
    this.codec = codec;
  }

  public EncodingConfiguration pixelFormat(@javax.annotation.Nullable PixelFormat pixelFormat) {
    
    this.pixelFormat = pixelFormat;
    return this;
  }

  /**
   * The pixel format for the encoded video.
   * @return pixelFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PIXEL_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PixelFormat getPixelFormat() {
    return pixelFormat;
  }


  @JsonProperty(JSON_PROPERTY_PIXEL_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPixelFormat(@javax.annotation.Nullable PixelFormat pixelFormat) {
    this.pixelFormat = pixelFormat;
  }

  public EncodingConfiguration bitrate(@javax.annotation.Nullable Long bitrate) {
    
    this.bitrate = bitrate;
    return this;
  }

  /**
   * The target bitrate for video encoding, measured in bits per second. For example, 1,000,000 bps corresponds to a bitrate of 1 Mbps. If unspecified, an appropriate value is automatically computed based on the source video and target resolution.
   * minimum: 10000
   * @return bitrate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getBitrate() {
    return bitrate;
  }


  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBitrate(@javax.annotation.Nullable Long bitrate) {
    this.bitrate = bitrate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncodingConfiguration encodingConfiguration = (EncodingConfiguration) o;
    return Objects.equals(this.codec, encodingConfiguration.codec) &&
        Objects.equals(this.pixelFormat, encodingConfiguration.pixelFormat) &&
        Objects.equals(this.bitrate, encodingConfiguration.bitrate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codec, pixelFormat, bitrate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncodingConfiguration {\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    pixelFormat: ").append(toIndentedString(pixelFormat)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `codec` to the URL query string
    if (getCodec() != null) {
      try {
        joiner.add(String.format("%scodec%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCodec()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `pixelFormat` to the URL query string
    if (getPixelFormat() != null) {
      joiner.add(getPixelFormat().toUrlQueryString(prefix + "pixelFormat" + suffix));
    }

    // add `bitrate` to the URL query string
    if (getBitrate() != null) {
      try {
        joiner.add(String.format("%sbitrate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBitrate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

