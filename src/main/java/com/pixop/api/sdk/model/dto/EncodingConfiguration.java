/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.CodecEnum;
import com.pixop.api.sdk.model.dto.PixelFormat;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Configuration options for encoding a video, allowing detailed control over the encoding process.  Should not be used in conjunction with &#x60;encodingProfile&#x60;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class EncodingConfiguration {
  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  @javax.annotation.Nullable
  private CodecEnum codec;

  public static final String SERIALIZED_NAME_PIXEL_FORMAT = "pixelFormat";
  @SerializedName(SERIALIZED_NAME_PIXEL_FORMAT)
  @javax.annotation.Nullable
  private PixelFormat pixelFormat;

  public static final String SERIALIZED_NAME_BITRATE = "bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  @javax.annotation.Nullable
  private Long bitrate;

  public EncodingConfiguration() {
  }

  public EncodingConfiguration codec(@javax.annotation.Nullable CodecEnum codec) {
    this.codec = codec;
    return this;
  }

  /**
   * The codec used for video encoding.
   * @return codec
   */
  @javax.annotation.Nullable
  public CodecEnum getCodec() {
    return codec;
  }

  public void setCodec(@javax.annotation.Nullable CodecEnum codec) {
    this.codec = codec;
  }


  public EncodingConfiguration pixelFormat(@javax.annotation.Nullable PixelFormat pixelFormat) {
    this.pixelFormat = pixelFormat;
    return this;
  }

  /**
   * The pixel format for the encoded video.
   * @return pixelFormat
   */
  @javax.annotation.Nullable
  public PixelFormat getPixelFormat() {
    return pixelFormat;
  }

  public void setPixelFormat(@javax.annotation.Nullable PixelFormat pixelFormat) {
    this.pixelFormat = pixelFormat;
  }


  public EncodingConfiguration bitrate(@javax.annotation.Nullable Long bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * The target bitrate for video encoding, measured in bits per second. For example, 1,000,000 bps corresponds to a bitrate of 1 Mbps. If unspecified, an appropriate value is automatically computed based on the source video and target resolution.
   * minimum: 10000
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Long getBitrate() {
    return bitrate;
  }

  public void setBitrate(@javax.annotation.Nullable Long bitrate) {
    this.bitrate = bitrate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncodingConfiguration encodingConfiguration = (EncodingConfiguration) o;
    return Objects.equals(this.codec, encodingConfiguration.codec) &&
        Objects.equals(this.pixelFormat, encodingConfiguration.pixelFormat) &&
        Objects.equals(this.bitrate, encodingConfiguration.bitrate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codec, pixelFormat, bitrate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncodingConfiguration {\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    pixelFormat: ").append(toIndentedString(pixelFormat)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codec");
    openapiFields.add("pixelFormat");
    openapiFields.add("bitrate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncodingConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncodingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncodingConfiguration is not found in the empty JSON string", EncodingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncodingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncodingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `codec`
      if (jsonObj.get("codec") != null && !jsonObj.get("codec").isJsonNull()) {
        CodecEnum.validateJsonElement(jsonObj.get("codec"));
      }
      // validate the optional field `pixelFormat`
      if (jsonObj.get("pixelFormat") != null && !jsonObj.get("pixelFormat").isJsonNull()) {
        PixelFormat.validateJsonElement(jsonObj.get("pixelFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncodingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncodingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncodingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncodingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<EncodingConfiguration>() {
           @Override
           public void write(JsonWriter out, EncodingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncodingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncodingConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncodingConfiguration
   * @throws IOException if the JSON string is invalid with respect to EncodingConfiguration
   */
  public static EncodingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncodingConfiguration.class);
  }

  /**
   * Convert an instance of EncodingConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

