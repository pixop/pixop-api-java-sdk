/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.EncodingConfiguration;
import com.pixop.api.sdk.model.dto.EncodingProfileEnum;
import com.pixop.api.sdk.model.dto.MediaContainerEnum;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettings;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilters;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettings;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Configuration parameters for video processing. This schema allows the specification of encoding profiles, encoding configurations, and filter options.   If an &#x60;encodingProfile&#x60; is specified, the &#x60;encodingConfiguration&#x60; is ignored.   Selecting specific encoding or filtering options is optional. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptions {
  public static final String SERIALIZED_NAME_ENCODING_PROFILE = "encodingProfile";
  @SerializedName(SERIALIZED_NAME_ENCODING_PROFILE)
  @javax.annotation.Nullable
  private EncodingProfileEnum encodingProfile;

  public static final String SERIALIZED_NAME_ENCODING_CONFIGURATION = "encodingConfiguration";
  @SerializedName(SERIALIZED_NAME_ENCODING_CONFIGURATION)
  @javax.annotation.Nullable
  private EncodingConfiguration encodingConfiguration;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  @javax.annotation.Nullable
  private MediaContainerEnum container;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilters filters;

  public static final String SERIALIZED_NAME_FILTER_SETTINGS = "filterSettings";
  @SerializedName(SERIALIZED_NAME_FILTER_SETTINGS)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettings filterSettings;

  public static final String SERIALIZED_NAME_PROCESSING_SETTINGS = "processingSettings";
  @SerializedName(SERIALIZED_NAME_PROCESSING_SETTINGS)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettings processingSettings;

  public VideoProcessingConfigurationOptions() {
  }

  public VideoProcessingConfigurationOptions encodingProfile(@javax.annotation.Nullable EncodingProfileEnum encodingProfile) {
    this.encodingProfile = encodingProfile;
    return this;
  }

  /**
   * Get encodingProfile
   * @return encodingProfile
   */
  @javax.annotation.Nullable
  public EncodingProfileEnum getEncodingProfile() {
    return encodingProfile;
  }

  public void setEncodingProfile(@javax.annotation.Nullable EncodingProfileEnum encodingProfile) {
    this.encodingProfile = encodingProfile;
  }


  public VideoProcessingConfigurationOptions encodingConfiguration(@javax.annotation.Nullable EncodingConfiguration encodingConfiguration) {
    this.encodingConfiguration = encodingConfiguration;
    return this;
  }

  /**
   * Get encodingConfiguration
   * @return encodingConfiguration
   */
  @javax.annotation.Nullable
  public EncodingConfiguration getEncodingConfiguration() {
    return encodingConfiguration;
  }

  public void setEncodingConfiguration(@javax.annotation.Nullable EncodingConfiguration encodingConfiguration) {
    this.encodingConfiguration = encodingConfiguration;
  }


  public VideoProcessingConfigurationOptions container(@javax.annotation.Nullable MediaContainerEnum container) {
    this.container = container;
    return this;
  }

  /**
   * The media container format for the video. Some containers only support specific codecs. Specifying an unsupported codec for a container will result in a &#x60;400 Bad Request&#x60; response.  Supported codecs by container: - &#x60;MOV&#x60;: &#x60;H264&#x60;, &#x60;PRORES&#x60;, &#x60;DNXHD&#x60;, &#x60;HEVC&#x60;, &#x60;MPEG2&#x60;, &#x60;FFV1&#x60; - &#x60;MXF&#x60;: &#x60;H264&#x60;, &#x60;XDCAM&#x60;, &#x60;MPEG2&#x60;, &#x60;DNXHD&#x60; - &#x60;MP4&#x60;: &#x60;H264&#x60;, &#x60;HEVC&#x60; - &#x60;MPEGTS&#x60;: &#x60;H264&#x60;, &#x60;HEVC&#x60;, &#x60;MPEG2&#x60; 
   * @return container
   */
  @javax.annotation.Nullable
  public MediaContainerEnum getContainer() {
    return container;
  }

  public void setContainer(@javax.annotation.Nullable MediaContainerEnum container) {
    this.container = container;
  }


  public VideoProcessingConfigurationOptions filters(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilters getFilters() {
    return filters;
  }

  public void setFilters(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilters filters) {
    this.filters = filters;
  }


  public VideoProcessingConfigurationOptions filterSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
    return this;
  }

  /**
   * Get filterSettings
   * @return filterSettings
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsFilterSettings getFilterSettings() {
    return filterSettings;
  }

  public void setFilterSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
  }


  public VideoProcessingConfigurationOptions processingSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettings processingSettings) {
    this.processingSettings = processingSettings;
    return this;
  }

  /**
   * Get processingSettings
   * @return processingSettings
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsProcessingSettings getProcessingSettings() {
    return processingSettings;
  }

  public void setProcessingSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettings processingSettings) {
    this.processingSettings = processingSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptions videoProcessingConfigurationOptions = (VideoProcessingConfigurationOptions) o;
    return Objects.equals(this.encodingProfile, videoProcessingConfigurationOptions.encodingProfile) &&
        Objects.equals(this.encodingConfiguration, videoProcessingConfigurationOptions.encodingConfiguration) &&
        Objects.equals(this.container, videoProcessingConfigurationOptions.container) &&
        Objects.equals(this.filters, videoProcessingConfigurationOptions.filters) &&
        Objects.equals(this.filterSettings, videoProcessingConfigurationOptions.filterSettings) &&
        Objects.equals(this.processingSettings, videoProcessingConfigurationOptions.processingSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodingProfile, encodingConfiguration, container, filters, filterSettings, processingSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptions {\n");
    sb.append("    encodingProfile: ").append(toIndentedString(encodingProfile)).append("\n");
    sb.append("    encodingConfiguration: ").append(toIndentedString(encodingConfiguration)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    filterSettings: ").append(toIndentedString(filterSettings)).append("\n");
    sb.append("    processingSettings: ").append(toIndentedString(processingSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encodingProfile");
    openapiFields.add("encodingConfiguration");
    openapiFields.add("container");
    openapiFields.add("filters");
    openapiFields.add("filterSettings");
    openapiFields.add("processingSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptions is not found in the empty JSON string", VideoProcessingConfigurationOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `encodingProfile`
      if (jsonObj.get("encodingProfile") != null && !jsonObj.get("encodingProfile").isJsonNull()) {
        EncodingProfileEnum.validateJsonElement(jsonObj.get("encodingProfile"));
      }
      // validate the optional field `encodingConfiguration`
      if (jsonObj.get("encodingConfiguration") != null && !jsonObj.get("encodingConfiguration").isJsonNull()) {
        EncodingConfiguration.validateJsonElement(jsonObj.get("encodingConfiguration"));
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        MediaContainerEnum.validateJsonElement(jsonObj.get("container"));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilters.validateJsonElement(jsonObj.get("filters"));
      }
      // validate the optional field `filterSettings`
      if (jsonObj.get("filterSettings") != null && !jsonObj.get("filterSettings").isJsonNull()) {
        VideoProcessingConfigurationOptionsFilterSettings.validateJsonElement(jsonObj.get("filterSettings"));
      }
      // validate the optional field `processingSettings`
      if (jsonObj.get("processingSettings") != null && !jsonObj.get("processingSettings").isJsonNull()) {
        VideoProcessingConfigurationOptionsProcessingSettings.validateJsonElement(jsonObj.get("processingSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptions>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptions
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptions
   */
  public static VideoProcessingConfigurationOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptions.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

