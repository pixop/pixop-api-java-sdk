/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.EncodingConfiguration;
import com.pixop.api.sdk.model.dto.EncodingProfileEnum;
import com.pixop.api.sdk.model.dto.MediaContainerEnum;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilterSettings;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsFilters;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettings;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Configuration parameters for video processing. This schema allows the specification of encoding profiles, encoding configurations, and filter options.   If an &#x60;encodingProfile&#x60; is specified, the &#x60;encodingConfiguration&#x60; is ignored.   Selecting specific encoding or filtering options is optional. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptions.JSON_PROPERTY_ENCODING_PROFILE,
  VideoProcessingConfigurationOptions.JSON_PROPERTY_ENCODING_CONFIGURATION,
  VideoProcessingConfigurationOptions.JSON_PROPERTY_CONTAINER,
  VideoProcessingConfigurationOptions.JSON_PROPERTY_FILTERS,
  VideoProcessingConfigurationOptions.JSON_PROPERTY_FILTER_SETTINGS,
  VideoProcessingConfigurationOptions.JSON_PROPERTY_PROCESSING_SETTINGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptions {
  public static final String JSON_PROPERTY_ENCODING_PROFILE = "encodingProfile";
  @javax.annotation.Nullable
  private EncodingProfileEnum encodingProfile;

  public static final String JSON_PROPERTY_ENCODING_CONFIGURATION = "encodingConfiguration";
  @javax.annotation.Nullable
  private EncodingConfiguration encodingConfiguration;

  public static final String JSON_PROPERTY_CONTAINER = "container";
  @javax.annotation.Nullable
  private MediaContainerEnum container;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilters filters;

  public static final String JSON_PROPERTY_FILTER_SETTINGS = "filterSettings";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsFilterSettings filterSettings;

  public static final String JSON_PROPERTY_PROCESSING_SETTINGS = "processingSettings";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettings processingSettings;

  public VideoProcessingConfigurationOptions() {
  }

  public VideoProcessingConfigurationOptions encodingProfile(@javax.annotation.Nullable EncodingProfileEnum encodingProfile) {
    
    this.encodingProfile = encodingProfile;
    return this;
  }

  /**
   * Get encodingProfile
   * @return encodingProfile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCODING_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EncodingProfileEnum getEncodingProfile() {
    return encodingProfile;
  }


  @JsonProperty(JSON_PROPERTY_ENCODING_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncodingProfile(@javax.annotation.Nullable EncodingProfileEnum encodingProfile) {
    this.encodingProfile = encodingProfile;
  }

  public VideoProcessingConfigurationOptions encodingConfiguration(@javax.annotation.Nullable EncodingConfiguration encodingConfiguration) {
    
    this.encodingConfiguration = encodingConfiguration;
    return this;
  }

  /**
   * Get encodingConfiguration
   * @return encodingConfiguration
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCODING_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EncodingConfiguration getEncodingConfiguration() {
    return encodingConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_ENCODING_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncodingConfiguration(@javax.annotation.Nullable EncodingConfiguration encodingConfiguration) {
    this.encodingConfiguration = encodingConfiguration;
  }

  public VideoProcessingConfigurationOptions container(@javax.annotation.Nullable MediaContainerEnum container) {
    
    this.container = container;
    return this;
  }

  /**
   * The media container format for the video. Some containers only support specific codecs. Specifying an unsupported codec for a container will result in a &#x60;400 Bad Request&#x60; response.  Supported codecs by container: - &#x60;MOV&#x60;: &#x60;H264&#x60;, &#x60;PRORES&#x60;, &#x60;DNXHD&#x60;, &#x60;HEVC&#x60;, &#x60;MPEG2&#x60;, &#x60;FFV1&#x60; - &#x60;MXF&#x60;: &#x60;H264&#x60;, &#x60;XDCAM&#x60;, &#x60;MPEG2&#x60;, &#x60;DNXHD&#x60; - &#x60;MP4&#x60;: &#x60;H264&#x60;, &#x60;HEVC&#x60; - &#x60;MPEGTS&#x60;: &#x60;H264&#x60;, &#x60;HEVC&#x60;, &#x60;MPEG2&#x60; 
   * @return container
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MediaContainerEnum getContainer() {
    return container;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainer(@javax.annotation.Nullable MediaContainerEnum container) {
    this.container = container;
  }

  public VideoProcessingConfigurationOptions filters(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilters filters) {
    
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilters getFilters() {
    return filters;
  }


  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilters filters) {
    this.filters = filters;
  }

  public VideoProcessingConfigurationOptions filterSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettings filterSettings) {
    
    this.filterSettings = filterSettings;
    return this;
  }

  /**
   * Get filterSettings
   * @return filterSettings
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsFilterSettings getFilterSettings() {
    return filterSettings;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
  }

  public VideoProcessingConfigurationOptions processingSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettings processingSettings) {
    
    this.processingSettings = processingSettings;
    return this;
  }

  /**
   * Get processingSettings
   * @return processingSettings
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSING_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsProcessingSettings getProcessingSettings() {
    return processingSettings;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingSettings(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettings processingSettings) {
    this.processingSettings = processingSettings;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptions videoProcessingConfigurationOptions = (VideoProcessingConfigurationOptions) o;
    return Objects.equals(this.encodingProfile, videoProcessingConfigurationOptions.encodingProfile) &&
        Objects.equals(this.encodingConfiguration, videoProcessingConfigurationOptions.encodingConfiguration) &&
        Objects.equals(this.container, videoProcessingConfigurationOptions.container) &&
        Objects.equals(this.filters, videoProcessingConfigurationOptions.filters) &&
        Objects.equals(this.filterSettings, videoProcessingConfigurationOptions.filterSettings) &&
        Objects.equals(this.processingSettings, videoProcessingConfigurationOptions.processingSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodingProfile, encodingConfiguration, container, filters, filterSettings, processingSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptions {\n");
    sb.append("    encodingProfile: ").append(toIndentedString(encodingProfile)).append("\n");
    sb.append("    encodingConfiguration: ").append(toIndentedString(encodingConfiguration)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    filterSettings: ").append(toIndentedString(filterSettings)).append("\n");
    sb.append("    processingSettings: ").append(toIndentedString(processingSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `encodingProfile` to the URL query string
    if (getEncodingProfile() != null) {
      try {
        joiner.add(String.format("%sencodingProfile%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEncodingProfile()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `encodingConfiguration` to the URL query string
    if (getEncodingConfiguration() != null) {
      joiner.add(getEncodingConfiguration().toUrlQueryString(prefix + "encodingConfiguration" + suffix));
    }

    // add `container` to the URL query string
    if (getContainer() != null) {
      try {
        joiner.add(String.format("%scontainer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContainer()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `filters` to the URL query string
    if (getFilters() != null) {
      joiner.add(getFilters().toUrlQueryString(prefix + "filters" + suffix));
    }

    // add `filterSettings` to the URL query string
    if (getFilterSettings() != null) {
      joiner.add(getFilterSettings().toUrlQueryString(prefix + "filterSettings" + suffix));
    }

    // add `processingSettings` to the URL query string
    if (getProcessingSettings() != null) {
      joiner.add(getProcessingSettings().toUrlQueryString(prefix + "processingSettings" + suffix));
    }

    return joiner.toString();
  }

}

