/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.Team;
import com.pixop.api.sdk.model.dto.User;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents account details for an API key.
 */
@JsonPropertyOrder({
  Account.JSON_PROPERTY_USER,
  Account.JSON_PROPERTY_DEFAULT_TEAM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class Account {
  public static final String JSON_PROPERTY_USER = "user";
  @javax.annotation.Nonnull
  private User user;

  public static final String JSON_PROPERTY_DEFAULT_TEAM = "defaultTeam";
  @javax.annotation.Nonnull
  private Team defaultTeam;

  public Account() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public Account(
    @JsonProperty(JSON_PROPERTY_USER) User user, 
    @JsonProperty(JSON_PROPERTY_DEFAULT_TEAM) Team defaultTeam
  ) {
    this();
    this.user = user;
    this.defaultTeam = defaultTeam;
  }

  /**
   * The user associated with the API key.
   * @return user
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public User getUser() {
    return user;
  }



  /**
   * The default team for the API key. This team is automatically used when no team is explicitly selected in API requests. The default team is the eldest apiEnabled team that the user has access to. If the user gains access to an older apiEnabled team, the default team will update accordingly. 
   * @return defaultTeam
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEFAULT_TEAM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Team getDefaultTeam() {
    return defaultTeam;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.user, account.user) &&
        Objects.equals(this.defaultTeam, account.defaultTeam);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, defaultTeam);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    defaultTeam: ").append(toIndentedString(defaultTeam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `user` to the URL query string
    if (getUser() != null) {
      joiner.add(getUser().toUrlQueryString(prefix + "user" + suffix));
    }

    // add `defaultTeam` to the URL query string
    if (getDefaultTeam() != null) {
      joiner.add(getDefaultTeam().toUrlQueryString(prefix + "defaultTeam" + suffix));
    }

    return joiner.toString();
  }

}

