/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.WebhookEventData;
import com.pixop.api.sdk.model.dto.WebhookEventType;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the payload of a webhook event, including metadata about the event, its type, and any associated data.
 */
@JsonPropertyOrder({
  WebhookEventPayload.JSON_PROPERTY_ID,
  WebhookEventPayload.JSON_PROPERTY_WEBHOOK_ID,
  WebhookEventPayload.JSON_PROPERTY_EVENT_TYPE,
  WebhookEventPayload.JSON_PROPERTY_OCCURRED_AT,
  WebhookEventPayload.JSON_PROPERTY_TEST,
  WebhookEventPayload.JSON_PROPERTY_ATTEMPT_COUNT,
  WebhookEventPayload.JSON_PROPERTY_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class WebhookEventPayload {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_WEBHOOK_ID = "webhookId";
  @javax.annotation.Nonnull
  private UUID webhookId;

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  @javax.annotation.Nonnull
  private WebhookEventType eventType;

  public static final String JSON_PROPERTY_OCCURRED_AT = "occurredAt";
  @javax.annotation.Nonnull
  private OffsetDateTime occurredAt;

  public static final String JSON_PROPERTY_TEST = "test";
  @javax.annotation.Nonnull
  private Boolean test;

  public static final String JSON_PROPERTY_ATTEMPT_COUNT = "attemptCount";
  @javax.annotation.Nonnull
  private Integer attemptCount;

  public static final String JSON_PROPERTY_DATA = "data";
  @javax.annotation.Nullable
  private WebhookEventData data;

  public WebhookEventPayload() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public WebhookEventPayload(
    @JsonProperty(JSON_PROPERTY_EVENT_TYPE) WebhookEventType eventType, 
    @JsonProperty(JSON_PROPERTY_OCCURRED_AT) OffsetDateTime occurredAt, 
    @JsonProperty(JSON_PROPERTY_TEST) Boolean test, 
    @JsonProperty(JSON_PROPERTY_ATTEMPT_COUNT) Integer attemptCount, 
    @JsonProperty(JSON_PROPERTY_DATA) WebhookEventData data
  ) {
    this();
    this.eventType = eventType;
    this.occurredAt = occurredAt;
    this.test = test;
    this.attemptCount = attemptCount;
    this.data = data;
  }

  public WebhookEventPayload id(@javax.annotation.Nonnull UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }

  public WebhookEventPayload webhookId(@javax.annotation.Nonnull UUID webhookId) {
    
    this.webhookId = webhookId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return webhookId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WEBHOOK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getWebhookId() {
    return webhookId;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWebhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public WebhookEventType getEventType() {
    return eventType;
  }



  /**
   * The date and time indicating when the event occurred.
   * @return occurredAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OCCURRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }



  /**
   * Whether the event was a test event.
   * @return test
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTest() {
    return test;
  }



  /**
   * The number of delivery attempts that have been made for this webhook event.
   * @return attemptCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ATTEMPT_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAttemptCount() {
    return attemptCount;
  }



  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WebhookEventData getData() {
    return data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEventPayload webhookEventPayload = (WebhookEventPayload) o;
    return Objects.equals(this.id, webhookEventPayload.id) &&
        Objects.equals(this.webhookId, webhookEventPayload.webhookId) &&
        Objects.equals(this.eventType, webhookEventPayload.eventType) &&
        Objects.equals(this.occurredAt, webhookEventPayload.occurredAt) &&
        Objects.equals(this.test, webhookEventPayload.test) &&
        Objects.equals(this.attemptCount, webhookEventPayload.attemptCount) &&
        Objects.equals(this.data, webhookEventPayload.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, webhookId, eventType, occurredAt, test, attemptCount, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEventPayload {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    attemptCount: ").append(toIndentedString(attemptCount)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `webhookId` to the URL query string
    if (getWebhookId() != null) {
      try {
        joiner.add(String.format("%swebhookId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWebhookId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `eventType` to the URL query string
    if (getEventType() != null) {
      try {
        joiner.add(String.format("%seventType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEventType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `occurredAt` to the URL query string
    if (getOccurredAt() != null) {
      try {
        joiner.add(String.format("%soccurredAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOccurredAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `test` to the URL query string
    if (getTest() != null) {
      try {
        joiner.add(String.format("%stest%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTest()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `attemptCount` to the URL query string
    if (getAttemptCount() != null) {
      try {
        joiner.add(String.format("%sattemptCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAttemptCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `data` to the URL query string
    if (getData() != null) {
      joiner.add(getData().toUrlQueryString(prefix + "data" + suffix));
    }

    return joiner.toString();
  }

}

