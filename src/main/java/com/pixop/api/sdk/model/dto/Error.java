/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.ErrorCodeEnum;
import com.pixop.api.sdk.model.dto.ValidationError;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents an error response returned by the API. Provides details such as the error code, status, and any associated validation errors. 
 */
@JsonPropertyOrder({
  Error.JSON_PROPERTY_TIMESTAMP,
  Error.JSON_PROPERTY_REQUEST_ID,
  Error.JSON_PROPERTY_REQUEST_PATH,
  Error.JSON_PROPERTY_ERROR_CODE,
  Error.JSON_PROPERTY_ERROR_CODE_ENUM,
  Error.JSON_PROPERTY_MESSAGE,
  Error.JSON_PROPERTY_STATUS_CODE,
  Error.JSON_PROPERTY_VALIDATION_ERRORS,
  Error.JSON_PROPERTY_ERROR_DETAILS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class Error {
  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  @javax.annotation.Nonnull
  private OffsetDateTime timestamp;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  @javax.annotation.Nonnull
  private UUID requestId;

  public static final String JSON_PROPERTY_REQUEST_PATH = "requestPath";
  @javax.annotation.Nonnull
  private String requestPath;

  public static final String JSON_PROPERTY_ERROR_CODE = "errorCode";
  @javax.annotation.Nonnull
  private String errorCode;

  public static final String JSON_PROPERTY_ERROR_CODE_ENUM = "errorCodeEnum";
  @javax.annotation.Nullable
  private ErrorCodeEnum errorCodeEnum;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  @javax.annotation.Nonnull
  private String message;

  public static final String JSON_PROPERTY_STATUS_CODE = "statusCode";
  @javax.annotation.Nonnull
  private Integer statusCode;

  public static final String JSON_PROPERTY_VALIDATION_ERRORS = "validationErrors";
  @javax.annotation.Nullable
  private List<ValidationError> validationErrors;

  public static final String JSON_PROPERTY_ERROR_DETAILS = "errorDetails";
  @javax.annotation.Nullable
  private Object errorDetails = null;

  public Error() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public Error(
    @JsonProperty(JSON_PROPERTY_TIMESTAMP) OffsetDateTime timestamp, 
    @JsonProperty(JSON_PROPERTY_REQUEST_ID) UUID requestId, 
    @JsonProperty(JSON_PROPERTY_REQUEST_PATH) String requestPath, 
    @JsonProperty(JSON_PROPERTY_ERROR_CODE) String errorCode, 
    @JsonProperty(JSON_PROPERTY_ERROR_CODE_ENUM) ErrorCodeEnum errorCodeEnum, 
    @JsonProperty(JSON_PROPERTY_MESSAGE) String message, 
    @JsonProperty(JSON_PROPERTY_STATUS_CODE) Integer statusCode
  ) {
    this();
    this.timestamp = timestamp;
    this.requestId = requestId;
    this.requestPath = requestPath;
    this.errorCode = errorCode;
    this.errorCodeEnum = errorCodeEnum;
    this.message = message;
    this.statusCode = statusCode;
  }

  /**
   * The date and time indicating when the error occurred.
   * @return timestamp
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }



  /**
   * The unique identifier for the request that caused the error.
   * @return requestId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getRequestId() {
    return requestId;
  }



  /**
   * The API path that was accessed when the error occurred.
   * @return requestPath
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUEST_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRequestPath() {
    return requestPath;
  }



  /**
   * A code representing the specific error.
   * @return errorCode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getErrorCode() {
    return errorCode;
  }



  /**
   * If present, the &#x60;errorCode&#x60; corresponds to one of Pixopâ€™s documented error codes.
   * @return errorCodeEnum
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_CODE_ENUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ErrorCodeEnum getErrorCodeEnum() {
    return errorCodeEnum;
  }



  /**
   * A human-readable message explaining the error.
   * @return message
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }



  /**
   * The HTTP status code associated with the error.
   * @return statusCode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStatusCode() {
    return statusCode;
  }



  public Error validationErrors(@javax.annotation.Nullable List<ValidationError> validationErrors) {
    
    this.validationErrors = validationErrors;
    return this;
  }

  public Error addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * A list of validation errors, if any.
   * @return validationErrors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALIDATION_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATION_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidationErrors(@javax.annotation.Nullable List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }

  public Error errorDetails(@javax.annotation.Nullable Object errorDetails) {
    
    this.errorDetails = errorDetails;
    return this;
  }

  /**
   * Get errorDetails
   * @return errorDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getErrorDetails() {
    return errorDetails;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorDetails(@javax.annotation.Nullable Object errorDetails) {
    this.errorDetails = errorDetails;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error error = (Error) o;
    return Objects.equals(this.timestamp, error.timestamp) &&
        Objects.equals(this.requestId, error.requestId) &&
        Objects.equals(this.requestPath, error.requestPath) &&
        Objects.equals(this.errorCode, error.errorCode) &&
        Objects.equals(this.errorCodeEnum, error.errorCodeEnum) &&
        Objects.equals(this.message, error.message) &&
        Objects.equals(this.statusCode, error.statusCode) &&
        Objects.equals(this.validationErrors, error.validationErrors) &&
        Objects.equals(this.errorDetails, error.errorDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, requestId, requestPath, errorCode, errorCodeEnum, message, statusCode, validationErrors, errorDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestPath: ").append(toIndentedString(requestPath)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorCodeEnum: ").append(toIndentedString(errorCodeEnum)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      try {
        joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimestamp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `requestId` to the URL query string
    if (getRequestId() != null) {
      try {
        joiner.add(String.format("%srequestId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `requestPath` to the URL query string
    if (getRequestPath() != null) {
      try {
        joiner.add(String.format("%srequestPath%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestPath()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `errorCode` to the URL query string
    if (getErrorCode() != null) {
      try {
        joiner.add(String.format("%serrorCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `errorCodeEnum` to the URL query string
    if (getErrorCodeEnum() != null) {
      try {
        joiner.add(String.format("%serrorCodeEnum%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorCodeEnum()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `message` to the URL query string
    if (getMessage() != null) {
      try {
        joiner.add(String.format("%smessage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMessage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `statusCode` to the URL query string
    if (getStatusCode() != null) {
      try {
        joiner.add(String.format("%sstatusCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatusCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `validationErrors` to the URL query string
    if (getValidationErrors() != null) {
      for (int i = 0; i < getValidationErrors().size(); i++) {
        if (getValidationErrors().get(i) != null) {
          joiner.add(getValidationErrors().get(i).toUrlQueryString(String.format("%svalidationErrors%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `errorDetails` to the URL query string
    if (getErrorDetails() != null) {
      try {
        joiner.add(String.format("%serrorDetails%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorDetails()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

