/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The estimation of the processing cost, including file size, storage cost, and compute time.
 */
@JsonPropertyOrder({
  ProcessingEstimation.JSON_PROPERTY_FILE_SIZE,
  ProcessingEstimation.JSON_PROPERTY_STORAGE_COST_USD,
  ProcessingEstimation.JSON_PROPERTY_DOWNLOAD_COST_USD,
  ProcessingEstimation.JSON_PROPERTY_TOTAL_COMPUTE_TIME_SECONDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class ProcessingEstimation {
  public static final String JSON_PROPERTY_FILE_SIZE = "fileSize";
  @javax.annotation.Nonnull
  private Long fileSize;

  public static final String JSON_PROPERTY_STORAGE_COST_USD = "storageCostUsd";
  @javax.annotation.Nonnull
  private BigDecimal storageCostUsd;

  public static final String JSON_PROPERTY_DOWNLOAD_COST_USD = "downloadCostUsd";
  @javax.annotation.Nonnull
  private BigDecimal downloadCostUsd;

  public static final String JSON_PROPERTY_TOTAL_COMPUTE_TIME_SECONDS = "totalComputeTimeSeconds";
  @javax.annotation.Nonnull
  private Integer totalComputeTimeSeconds;

  public ProcessingEstimation() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public ProcessingEstimation(
    @JsonProperty(JSON_PROPERTY_FILE_SIZE) Long fileSize, 
    @JsonProperty(JSON_PROPERTY_TOTAL_COMPUTE_TIME_SECONDS) Integer totalComputeTimeSeconds
  ) {
    this();
    this.fileSize = fileSize;
    this.totalComputeTimeSeconds = totalComputeTimeSeconds;
  }

  /**
   * The estimated size of the processed file in bytes. For example, 606323 bytes.
   * @return fileSize
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getFileSize() {
    return fileSize;
  }



  public ProcessingEstimation storageCostUsd(@javax.annotation.Nonnull BigDecimal storageCostUsd) {
    
    this.storageCostUsd = storageCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return storageCostUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STORAGE_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getStorageCostUsd() {
    return storageCostUsd;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStorageCostUsd(@javax.annotation.Nonnull BigDecimal storageCostUsd) {
    this.storageCostUsd = storageCostUsd;
  }

  public ProcessingEstimation downloadCostUsd(@javax.annotation.Nonnull BigDecimal downloadCostUsd) {
    
    this.downloadCostUsd = downloadCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return downloadCostUsd
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getDownloadCostUsd() {
    return downloadCostUsd;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_COST_USD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDownloadCostUsd(@javax.annotation.Nonnull BigDecimal downloadCostUsd) {
    this.downloadCostUsd = downloadCostUsd;
  }

  /**
   * The estimated total compute time in seconds. For example, 38 seconds.
   * @return totalComputeTimeSeconds
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_COMPUTE_TIME_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalComputeTimeSeconds() {
    return totalComputeTimeSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingEstimation processingEstimation = (ProcessingEstimation) o;
    return Objects.equals(this.fileSize, processingEstimation.fileSize) &&
        Objects.equals(this.storageCostUsd, processingEstimation.storageCostUsd) &&
        Objects.equals(this.downloadCostUsd, processingEstimation.downloadCostUsd) &&
        Objects.equals(this.totalComputeTimeSeconds, processingEstimation.totalComputeTimeSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSize, storageCostUsd, downloadCostUsd, totalComputeTimeSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingEstimation {\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    storageCostUsd: ").append(toIndentedString(storageCostUsd)).append("\n");
    sb.append("    downloadCostUsd: ").append(toIndentedString(downloadCostUsd)).append("\n");
    sb.append("    totalComputeTimeSeconds: ").append(toIndentedString(totalComputeTimeSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fileSize` to the URL query string
    if (getFileSize() != null) {
      try {
        joiner.add(String.format("%sfileSize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `storageCostUsd` to the URL query string
    if (getStorageCostUsd() != null) {
      try {
        joiner.add(String.format("%sstorageCostUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStorageCostUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `downloadCostUsd` to the URL query string
    if (getDownloadCostUsd() != null) {
      try {
        joiner.add(String.format("%sdownloadCostUsd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDownloadCostUsd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `totalComputeTimeSeconds` to the URL query string
    if (getTotalComputeTimeSeconds() != null) {
      try {
        joiner.add(String.format("%stotalComputeTimeSeconds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalComputeTimeSeconds()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

