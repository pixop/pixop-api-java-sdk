/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * The estimation of the processing cost, including file size, storage cost, and compute time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-06T09:15:25.070713506Z[UTC]", comments = "Generator version: 7.12.0")
public class ProcessingEstimation {
  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  @javax.annotation.Nullable
  private Long fileSize;

  public static final String SERIALIZED_NAME_STORAGE_COST_USD = "storageCostUsd";
  @SerializedName(SERIALIZED_NAME_STORAGE_COST_USD)
  @javax.annotation.Nullable
  private BigDecimal storageCostUsd;

  public static final String SERIALIZED_NAME_DOWNLOAD_COST_USD = "downloadCostUsd";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_COST_USD)
  @javax.annotation.Nullable
  private BigDecimal downloadCostUsd;

  public static final String SERIALIZED_NAME_TOTAL_COMPUTE_TIME_SECONDS = "totalComputeTimeSeconds";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMPUTE_TIME_SECONDS)
  @javax.annotation.Nullable
  private Integer totalComputeTimeSeconds;

  public ProcessingEstimation() {
  }

  public ProcessingEstimation(
     Long fileSize, 
     Integer totalComputeTimeSeconds
  ) {
    this();
    this.fileSize = fileSize;
    this.totalComputeTimeSeconds = totalComputeTimeSeconds;
  }

  /**
   * The estimated size of the processed file in bytes. For example, 606323 bytes.
   * @return fileSize
   */
  @javax.annotation.Nullable
  public Long getFileSize() {
    return fileSize;
  }



  public ProcessingEstimation storageCostUsd(@javax.annotation.Nullable BigDecimal storageCostUsd) {
    this.storageCostUsd = storageCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return storageCostUsd
   */
  @javax.annotation.Nullable
  public BigDecimal getStorageCostUsd() {
    return storageCostUsd;
  }

  public void setStorageCostUsd(@javax.annotation.Nullable BigDecimal storageCostUsd) {
    this.storageCostUsd = storageCostUsd;
  }


  public ProcessingEstimation downloadCostUsd(@javax.annotation.Nullable BigDecimal downloadCostUsd) {
    this.downloadCostUsd = downloadCostUsd;
    return this;
  }

  /**
   * Represents an amount of money with up to three decimal places, e.g., 1.341 USD.
   * @return downloadCostUsd
   */
  @javax.annotation.Nullable
  public BigDecimal getDownloadCostUsd() {
    return downloadCostUsd;
  }

  public void setDownloadCostUsd(@javax.annotation.Nullable BigDecimal downloadCostUsd) {
    this.downloadCostUsd = downloadCostUsd;
  }


  /**
   * The estimated total compute time in seconds. For example, 38 seconds.
   * @return totalComputeTimeSeconds
   */
  @javax.annotation.Nullable
  public Integer getTotalComputeTimeSeconds() {
    return totalComputeTimeSeconds;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingEstimation processingEstimation = (ProcessingEstimation) o;
    return Objects.equals(this.fileSize, processingEstimation.fileSize) &&
        Objects.equals(this.storageCostUsd, processingEstimation.storageCostUsd) &&
        Objects.equals(this.downloadCostUsd, processingEstimation.downloadCostUsd) &&
        Objects.equals(this.totalComputeTimeSeconds, processingEstimation.totalComputeTimeSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSize, storageCostUsd, downloadCostUsd, totalComputeTimeSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingEstimation {\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    storageCostUsd: ").append(toIndentedString(storageCostUsd)).append("\n");
    sb.append("    downloadCostUsd: ").append(toIndentedString(downloadCostUsd)).append("\n");
    sb.append("    totalComputeTimeSeconds: ").append(toIndentedString(totalComputeTimeSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileSize");
    openapiFields.add("storageCostUsd");
    openapiFields.add("downloadCostUsd");
    openapiFields.add("totalComputeTimeSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProcessingEstimation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProcessingEstimation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessingEstimation is not found in the empty JSON string", ProcessingEstimation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProcessingEstimation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProcessingEstimation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessingEstimation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessingEstimation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessingEstimation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessingEstimation.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessingEstimation>() {
           @Override
           public void write(JsonWriter out, ProcessingEstimation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessingEstimation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProcessingEstimation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProcessingEstimation
   * @throws IOException if the JSON string is invalid with respect to ProcessingEstimation
   */
  public static ProcessingEstimation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessingEstimation.class);
  }

  /**
   * Convert an instance of ProcessingEstimation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

