/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Specifies settings for the face enhancement augmenter when &#x60;filters.augmenter&#x60; is set to &#x60;FACEFORWARD&#x60;.
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsFilterSettingsFaceForward.JSON_PROPERTY_COLOR_BOOST,
  VideoProcessingConfigurationOptionsFilterSettingsFaceForward.JSON_PROPERTY_AUTO_WHITE_BALANCE,
  VideoProcessingConfigurationOptionsFilterSettingsFaceForward.JSON_PROPERTY_RELIGHT_INTENSITY,
  VideoProcessingConfigurationOptionsFilterSettingsFaceForward.JSON_PROPERTY_BACKGROUND_BLUR
})
@JsonTypeName("VideoProcessingConfigurationOptions_filterSettings_faceForward")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsFilterSettingsFaceForward {
  public static final String JSON_PROPERTY_COLOR_BOOST = "colorBoost";
  @javax.annotation.Nonnull
  private Integer colorBoost;

  public static final String JSON_PROPERTY_AUTO_WHITE_BALANCE = "autoWhiteBalance";
  @javax.annotation.Nonnull
  private Boolean autoWhiteBalance;

  public static final String JSON_PROPERTY_RELIGHT_INTENSITY = "relightIntensity";
  @javax.annotation.Nonnull
  private Integer relightIntensity;

  public static final String JSON_PROPERTY_BACKGROUND_BLUR = "backgroundBlur";
  @javax.annotation.Nonnull
  private Integer backgroundBlur;

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward colorBoost(@javax.annotation.Nonnull Integer colorBoost) {
    
    this.colorBoost = colorBoost;
    return this;
  }

  /**
   * Boosts color saturation in the video.
   * minimum: 0
   * maximum: 30
   * @return colorBoost
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COLOR_BOOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getColorBoost() {
    return colorBoost;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_BOOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setColorBoost(@javax.annotation.Nonnull Integer colorBoost) {
    this.colorBoost = colorBoost;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward autoWhiteBalance(@javax.annotation.Nonnull Boolean autoWhiteBalance) {
    
    this.autoWhiteBalance = autoWhiteBalance;
    return this;
  }

  /**
   * Enables or disables automatic white balance adjustment.
   * @return autoWhiteBalance
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_WHITE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAutoWhiteBalance() {
    return autoWhiteBalance;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_WHITE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoWhiteBalance(@javax.annotation.Nonnull Boolean autoWhiteBalance) {
    this.autoWhiteBalance = autoWhiteBalance;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward relightIntensity(@javax.annotation.Nonnull Integer relightIntensity) {
    
    this.relightIntensity = relightIntensity;
    return this;
  }

  /**
   * Intensity of face relighting, expressed as a percentage.
   * minimum: 0
   * maximum: 200
   * @return relightIntensity
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RELIGHT_INTENSITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRelightIntensity() {
    return relightIntensity;
  }


  @JsonProperty(JSON_PROPERTY_RELIGHT_INTENSITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRelightIntensity(@javax.annotation.Nonnull Integer relightIntensity) {
    this.relightIntensity = relightIntensity;
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward backgroundBlur(@javax.annotation.Nonnull Integer backgroundBlur) {
    
    this.backgroundBlur = backgroundBlur;
    return this;
  }

  /**
   * Level of background blur applied. Set to 0 to disable background blurring.
   * minimum: 0
   * maximum: 20
   * @return backgroundBlur
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BACKGROUND_BLUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBackgroundBlur() {
    return backgroundBlur;
  }


  @JsonProperty(JSON_PROPERTY_BACKGROUND_BLUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBackgroundBlur(@javax.annotation.Nonnull Integer backgroundBlur) {
    this.backgroundBlur = backgroundBlur;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsFaceForward videoProcessingConfigurationOptionsFilterSettingsFaceForward = (VideoProcessingConfigurationOptionsFilterSettingsFaceForward) o;
    return Objects.equals(this.colorBoost, videoProcessingConfigurationOptionsFilterSettingsFaceForward.colorBoost) &&
        Objects.equals(this.autoWhiteBalance, videoProcessingConfigurationOptionsFilterSettingsFaceForward.autoWhiteBalance) &&
        Objects.equals(this.relightIntensity, videoProcessingConfigurationOptionsFilterSettingsFaceForward.relightIntensity) &&
        Objects.equals(this.backgroundBlur, videoProcessingConfigurationOptionsFilterSettingsFaceForward.backgroundBlur);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorBoost, autoWhiteBalance, relightIntensity, backgroundBlur);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsFaceForward {\n");
    sb.append("    colorBoost: ").append(toIndentedString(colorBoost)).append("\n");
    sb.append("    autoWhiteBalance: ").append(toIndentedString(autoWhiteBalance)).append("\n");
    sb.append("    relightIntensity: ").append(toIndentedString(relightIntensity)).append("\n");
    sb.append("    backgroundBlur: ").append(toIndentedString(backgroundBlur)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `colorBoost` to the URL query string
    if (getColorBoost() != null) {
      try {
        joiner.add(String.format("%scolorBoost%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColorBoost()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `autoWhiteBalance` to the URL query string
    if (getAutoWhiteBalance() != null) {
      try {
        joiner.add(String.format("%sautoWhiteBalance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAutoWhiteBalance()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `relightIntensity` to the URL query string
    if (getRelightIntensity() != null) {
      try {
        joiner.add(String.format("%srelightIntensity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRelightIntensity()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `backgroundBlur` to the URL query string
    if (getBackgroundBlur() != null) {
      try {
        joiner.add(String.format("%sbackgroundBlur%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBackgroundBlur()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

