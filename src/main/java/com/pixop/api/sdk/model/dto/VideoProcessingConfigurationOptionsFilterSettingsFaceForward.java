/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Specifies settings for the face enhancement augmenter when &#x60;filters.augmenter&#x60; is set to &#x60;FACEFORWARD&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptionsFilterSettingsFaceForward {
  public static final String SERIALIZED_NAME_COLOR_BOOST = "colorBoost";
  @SerializedName(SERIALIZED_NAME_COLOR_BOOST)
  @javax.annotation.Nonnull
  private Integer colorBoost;

  public static final String SERIALIZED_NAME_AUTO_WHITE_BALANCE = "autoWhiteBalance";
  @SerializedName(SERIALIZED_NAME_AUTO_WHITE_BALANCE)
  @javax.annotation.Nonnull
  private Boolean autoWhiteBalance;

  public static final String SERIALIZED_NAME_RELIGHT_INTENSITY = "relightIntensity";
  @SerializedName(SERIALIZED_NAME_RELIGHT_INTENSITY)
  @javax.annotation.Nonnull
  private Integer relightIntensity;

  public static final String SERIALIZED_NAME_BACKGROUND_BLUR = "backgroundBlur";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_BLUR)
  @javax.annotation.Nonnull
  private Integer backgroundBlur;

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward() {
  }

  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward colorBoost(@javax.annotation.Nonnull Integer colorBoost) {
    this.colorBoost = colorBoost;
    return this;
  }

  /**
   * Boosts color saturation in the video.
   * minimum: 0
   * maximum: 30
   * @return colorBoost
   */
  @javax.annotation.Nonnull
  public Integer getColorBoost() {
    return colorBoost;
  }

  public void setColorBoost(@javax.annotation.Nonnull Integer colorBoost) {
    this.colorBoost = colorBoost;
  }


  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward autoWhiteBalance(@javax.annotation.Nonnull Boolean autoWhiteBalance) {
    this.autoWhiteBalance = autoWhiteBalance;
    return this;
  }

  /**
   * Enables or disables automatic white balance adjustment.
   * @return autoWhiteBalance
   */
  @javax.annotation.Nonnull
  public Boolean getAutoWhiteBalance() {
    return autoWhiteBalance;
  }

  public void setAutoWhiteBalance(@javax.annotation.Nonnull Boolean autoWhiteBalance) {
    this.autoWhiteBalance = autoWhiteBalance;
  }


  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward relightIntensity(@javax.annotation.Nonnull Integer relightIntensity) {
    this.relightIntensity = relightIntensity;
    return this;
  }

  /**
   * Intensity of face relighting, expressed as a percentage.
   * minimum: 0
   * maximum: 200
   * @return relightIntensity
   */
  @javax.annotation.Nonnull
  public Integer getRelightIntensity() {
    return relightIntensity;
  }

  public void setRelightIntensity(@javax.annotation.Nonnull Integer relightIntensity) {
    this.relightIntensity = relightIntensity;
  }


  public VideoProcessingConfigurationOptionsFilterSettingsFaceForward backgroundBlur(@javax.annotation.Nonnull Integer backgroundBlur) {
    this.backgroundBlur = backgroundBlur;
    return this;
  }

  /**
   * Level of background blur applied. Set to 0 to disable background blurring.
   * minimum: 0
   * maximum: 20
   * @return backgroundBlur
   */
  @javax.annotation.Nonnull
  public Integer getBackgroundBlur() {
    return backgroundBlur;
  }

  public void setBackgroundBlur(@javax.annotation.Nonnull Integer backgroundBlur) {
    this.backgroundBlur = backgroundBlur;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsFilterSettingsFaceForward videoProcessingConfigurationOptionsFilterSettingsFaceForward = (VideoProcessingConfigurationOptionsFilterSettingsFaceForward) o;
    return Objects.equals(this.colorBoost, videoProcessingConfigurationOptionsFilterSettingsFaceForward.colorBoost) &&
        Objects.equals(this.autoWhiteBalance, videoProcessingConfigurationOptionsFilterSettingsFaceForward.autoWhiteBalance) &&
        Objects.equals(this.relightIntensity, videoProcessingConfigurationOptionsFilterSettingsFaceForward.relightIntensity) &&
        Objects.equals(this.backgroundBlur, videoProcessingConfigurationOptionsFilterSettingsFaceForward.backgroundBlur);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorBoost, autoWhiteBalance, relightIntensity, backgroundBlur);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsFilterSettingsFaceForward {\n");
    sb.append("    colorBoost: ").append(toIndentedString(colorBoost)).append("\n");
    sb.append("    autoWhiteBalance: ").append(toIndentedString(autoWhiteBalance)).append("\n");
    sb.append("    relightIntensity: ").append(toIndentedString(relightIntensity)).append("\n");
    sb.append("    backgroundBlur: ").append(toIndentedString(backgroundBlur)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorBoost");
    openapiFields.add("autoWhiteBalance");
    openapiFields.add("relightIntensity");
    openapiFields.add("backgroundBlur");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("colorBoost");
    openapiRequiredFields.add("autoWhiteBalance");
    openapiRequiredFields.add("relightIntensity");
    openapiRequiredFields.add("backgroundBlur");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptionsFilterSettingsFaceForward
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptionsFilterSettingsFaceForward.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptionsFilterSettingsFaceForward is not found in the empty JSON string", VideoProcessingConfigurationOptionsFilterSettingsFaceForward.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptionsFilterSettingsFaceForward.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptionsFilterSettingsFaceForward` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoProcessingConfigurationOptionsFilterSettingsFaceForward.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptionsFilterSettingsFaceForward.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptionsFilterSettingsFaceForward' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptionsFilterSettingsFaceForward> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptionsFilterSettingsFaceForward.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptionsFilterSettingsFaceForward>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptionsFilterSettingsFaceForward value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptionsFilterSettingsFaceForward read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptionsFilterSettingsFaceForward given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptionsFilterSettingsFaceForward
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptionsFilterSettingsFaceForward
   */
  public static VideoProcessingConfigurationOptionsFilterSettingsFaceForward fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptionsFilterSettingsFaceForward.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptionsFilterSettingsFaceForward to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

