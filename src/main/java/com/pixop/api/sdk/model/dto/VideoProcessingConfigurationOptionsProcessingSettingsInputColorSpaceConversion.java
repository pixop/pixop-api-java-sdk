/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pixop.api.sdk.model.dto.Colorimetry;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Defines the initial color space conversion applied to the input video, including an optional tone-mapping operation to manage transitions from High Dynamic Range (HDR) to Standard Dynamic Range (SDR). This operation ensures the video is prepared for further processing by aligning it with the desired color space and dynamic range requirements before applying the first video filter.  The conversion process typically involves:   - Adjusting the input color primaries, transfer characteristics, and matrix coefficients to match the target color space.   - Optionally applying tone mapping to compress HDR luminance and color values into the SDR range.  This is critical for workflows requiring consistent color reproduction or transitioning between HDR and SDR formats. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion {
  /**
   * Defines the mapping mode used to determine the colorimetry of the source video when converting to the SDR transfer characteristic (Rec. 709 or Rec. 2020-10) utilized by the processing pipeline internally.  If the color matrix, range, primaries, or transfer characteristics are missing, they will be inferred based on the input resolution and frame rate as described below:  - &#x60;STRICT_USER&#x60;: Explicitly use the user-provided specification. Validation will fail if the specification is incomplete. - &#x60;SOURCE_PRIORITY&#x60;: Prioritize metadata from the source file, if available. Fill any missing properties with user-provided data or infer from resolution and frame rate. - &#x60;USER_PRIORITY&#x60;: Prioritize the user-provided specification. Fill any missing properties with source file metadata or infer from resolution and frame rate. - &#x60;RESOLUTION_ONLY&#x60;: Ignore metadata from both the source and the user. Infer colorimetry entirely based on resolution and frame rate, using the following resolution categories:    - **SD (NTSC)**:       - Resolution ≤ 720×576       - Frame rate: ~30 fps or ~60 fps       - Colorimetry: Rec. 601 (SMPTE 170M)    - **SD (PAL)**:       - Resolution ≤ 720×576       - Frame rate: non-NTSC       - Colorimetry: Rec. 601 (BT.470BG)    - **HD**:       - Resolution &gt; 720×576 and ≤ 1920×1080       - Frame rate: any       - Colorimetry: Rec. 709    - **UHD**:       - Resolution &gt; 1920×1080       - Frame rate: any       - Colorimetry: Rec. 2020 
   */
  @JsonAdapter(MappingModeEnum.Adapter.class)
  public enum MappingModeEnum {
    STRICT_USER("STRICT_USER"),
    
    SOURCE_PRIORITY("SOURCE_PRIORITY"),
    
    USER_PRIORITY("USER_PRIORITY"),
    
    RESOLUTION_ONLY("RESOLUTION_ONLY");

    private String value;

    MappingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MappingModeEnum fromValue(String value) {
      for (MappingModeEnum b : MappingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MappingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MappingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MappingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MappingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MappingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAPPING_MODE = "mappingMode";
  @SerializedName(SERIALIZED_NAME_MAPPING_MODE)
  @javax.annotation.Nonnull
  private MappingModeEnum mappingMode;

  public static final String SERIALIZED_NAME_COLOR_PROFILE = "colorProfile";
  @SerializedName(SERIALIZED_NAME_COLOR_PROFILE)
  @javax.annotation.Nullable
  private Colorimetry colorProfile;

  public static final String SERIALIZED_NAME_METADATA_ONLY = "metadataOnly";
  @SerializedName(SERIALIZED_NAME_METADATA_ONLY)
  @javax.annotation.Nullable
  private Boolean metadataOnly = false;

  public static final String SERIALIZED_NAME_TONE_MAPPER = "toneMapper";
  @SerializedName(SERIALIZED_NAME_TONE_MAPPER)
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper toneMapper;

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion() {
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion mappingMode(@javax.annotation.Nonnull MappingModeEnum mappingMode) {
    this.mappingMode = mappingMode;
    return this;
  }

  /**
   * Defines the mapping mode used to determine the colorimetry of the source video when converting to the SDR transfer characteristic (Rec. 709 or Rec. 2020-10) utilized by the processing pipeline internally.  If the color matrix, range, primaries, or transfer characteristics are missing, they will be inferred based on the input resolution and frame rate as described below:  - &#x60;STRICT_USER&#x60;: Explicitly use the user-provided specification. Validation will fail if the specification is incomplete. - &#x60;SOURCE_PRIORITY&#x60;: Prioritize metadata from the source file, if available. Fill any missing properties with user-provided data or infer from resolution and frame rate. - &#x60;USER_PRIORITY&#x60;: Prioritize the user-provided specification. Fill any missing properties with source file metadata or infer from resolution and frame rate. - &#x60;RESOLUTION_ONLY&#x60;: Ignore metadata from both the source and the user. Infer colorimetry entirely based on resolution and frame rate, using the following resolution categories:    - **SD (NTSC)**:       - Resolution ≤ 720×576       - Frame rate: ~30 fps or ~60 fps       - Colorimetry: Rec. 601 (SMPTE 170M)    - **SD (PAL)**:       - Resolution ≤ 720×576       - Frame rate: non-NTSC       - Colorimetry: Rec. 601 (BT.470BG)    - **HD**:       - Resolution &gt; 720×576 and ≤ 1920×1080       - Frame rate: any       - Colorimetry: Rec. 709    - **UHD**:       - Resolution &gt; 1920×1080       - Frame rate: any       - Colorimetry: Rec. 2020 
   * @return mappingMode
   */
  @javax.annotation.Nonnull
  public MappingModeEnum getMappingMode() {
    return mappingMode;
  }

  public void setMappingMode(@javax.annotation.Nonnull MappingModeEnum mappingMode) {
    this.mappingMode = mappingMode;
  }


  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion colorProfile(@javax.annotation.Nullable Colorimetry colorProfile) {
    this.colorProfile = colorProfile;
    return this;
  }

  /**
   * Get colorProfile
   * @return colorProfile
   */
  @javax.annotation.Nullable
  public Colorimetry getColorProfile() {
    return colorProfile;
  }

  public void setColorProfile(@javax.annotation.Nullable Colorimetry colorProfile) {
    this.colorProfile = colorProfile;
  }


  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion metadataOnly(@javax.annotation.Nullable Boolean metadataOnly) {
    this.metadataOnly = metadataOnly;
    return this;
  }

  /**
   * If set to &#x60;true&#x60;, the colorimetry is determined based on the specified mapping mode, but no actual color space conversion is performed. Instead, the determined colorimetry is applied only to the metadata of the output file and used if required for any output color space conversion.
   * @return metadataOnly
   */
  @javax.annotation.Nullable
  public Boolean getMetadataOnly() {
    return metadataOnly;
  }

  public void setMetadataOnly(@javax.annotation.Nullable Boolean metadataOnly) {
    this.metadataOnly = metadataOnly;
  }


  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion toneMapper(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper toneMapper) {
    this.toneMapper = toneMapper;
    return this;
  }

  /**
   * Get toneMapper
   * @return toneMapper
   */
  @javax.annotation.Nullable
  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper getToneMapper() {
    return toneMapper;
  }

  public void setToneMapper(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper toneMapper) {
    this.toneMapper = toneMapper;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion = (VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion) o;
    return Objects.equals(this.mappingMode, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.mappingMode) &&
        Objects.equals(this.colorProfile, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.colorProfile) &&
        Objects.equals(this.metadataOnly, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.metadataOnly) &&
        Objects.equals(this.toneMapper, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.toneMapper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mappingMode, colorProfile, metadataOnly, toneMapper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion {\n");
    sb.append("    mappingMode: ").append(toIndentedString(mappingMode)).append("\n");
    sb.append("    colorProfile: ").append(toIndentedString(colorProfile)).append("\n");
    sb.append("    metadataOnly: ").append(toIndentedString(metadataOnly)).append("\n");
    sb.append("    toneMapper: ").append(toIndentedString(toneMapper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mappingMode");
    openapiFields.add("colorProfile");
    openapiFields.add("metadataOnly");
    openapiFields.add("toneMapper");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mappingMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion is not found in the empty JSON string", VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("mappingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mappingMode").toString()));
      }
      // validate the required field `mappingMode`
      MappingModeEnum.validateJsonElement(jsonObj.get("mappingMode"));
      // validate the optional field `colorProfile`
      if (jsonObj.get("colorProfile") != null && !jsonObj.get("colorProfile").isJsonNull()) {
        Colorimetry.validateJsonElement(jsonObj.get("colorProfile"));
      }
      // validate the optional field `toneMapper`
      if (jsonObj.get("toneMapper") != null && !jsonObj.get("toneMapper").isJsonNull()) {
        VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper.validateJsonElement(jsonObj.get("toneMapper"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion>() {
           @Override
           public void write(JsonWriter out, VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion
   */
  public static VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.class);
  }

  /**
   * Convert an instance of VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

