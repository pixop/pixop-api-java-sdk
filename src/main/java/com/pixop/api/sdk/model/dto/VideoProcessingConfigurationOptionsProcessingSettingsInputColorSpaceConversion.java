/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pixop.api.sdk.model.dto.Colorimetry;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Defines the initial color space conversion applied to the input video, including an optional tone-mapping operation to manage transitions from High Dynamic Range (HDR) to Standard Dynamic Range (SDR). This operation ensures the video is prepared for further processing by aligning it with the desired color space and dynamic range requirements before applying the first video filter.  The conversion process typically involves:   - Adjusting the input color primaries, transfer characteristics, and matrix coefficients to match the target color space.   - Optionally applying tone mapping to compress HDR luminance and color values into the SDR range.  This is critical for workflows requiring consistent color reproduction or transitioning between HDR and SDR formats. 
 */
@JsonPropertyOrder({
  VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.JSON_PROPERTY_MAPPING_MODE,
  VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.JSON_PROPERTY_COLOR_PROFILE,
  VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.JSON_PROPERTY_METADATA_ONLY,
  VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.JSON_PROPERTY_TONE_MAPPER
})
@JsonTypeName("VideoProcessingConfigurationOptions_processingSettings_inputColorSpaceConversion")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion {
  /**
   * Defines the mapping mode used to determine the colorimetry of the source video when converting to the SDR transfer characteristic (Rec. 709 or Rec. 2020-10) utilized by the processing pipeline internally.  If the color matrix, range, primaries, or transfer characteristics are missing, they will be inferred based on the input resolution and frame rate as described below:  - &#x60;STRICT_USER&#x60;: Explicitly use the user-provided specification. Validation will fail if the specification is incomplete. - &#x60;SOURCE_PRIORITY&#x60;: Prioritize metadata from the source file, if available. Fill any missing properties with user-provided data or infer from resolution and frame rate. - &#x60;USER_PRIORITY&#x60;: Prioritize the user-provided specification. Fill any missing properties with source file metadata or infer from resolution and frame rate. - &#x60;RESOLUTION_ONLY&#x60;: Ignore metadata from both the source and the user. Infer colorimetry entirely based on resolution and frame rate, using the following resolution categories:    - **SD (NTSC)**:       - Resolution ≤ 720×576       - Frame rate: ~30 fps or ~60 fps       - Colorimetry: Rec. 601 (SMPTE 170M)    - **SD (PAL)**:       - Resolution ≤ 720×576       - Frame rate: non-NTSC       - Colorimetry: Rec. 601 (BT.470BG)    - **HD**:       - Resolution &gt; 720×576 and ≤ 1920×1080       - Frame rate: any       - Colorimetry: Rec. 709    - **UHD**:       - Resolution &gt; 1920×1080       - Frame rate: any       - Colorimetry: Rec. 2020 
   */
  public enum MappingModeEnum {
    STRICT_USER(String.valueOf("STRICT_USER")),
    
    SOURCE_PRIORITY(String.valueOf("SOURCE_PRIORITY")),
    
    USER_PRIORITY(String.valueOf("USER_PRIORITY")),
    
    RESOLUTION_ONLY(String.valueOf("RESOLUTION_ONLY")),
    
    UNKNOWN_DEFAULT_OPEN_API(String.valueOf("unknown_default_open_api"));

    private String value;

    MappingModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MappingModeEnum fromValue(String value) {
      for (MappingModeEnum b : MappingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_MAPPING_MODE = "mappingMode";
  @javax.annotation.Nonnull
  private MappingModeEnum mappingMode;

  public static final String JSON_PROPERTY_COLOR_PROFILE = "colorProfile";
  @javax.annotation.Nullable
  private Colorimetry colorProfile;

  public static final String JSON_PROPERTY_METADATA_ONLY = "metadataOnly";
  @javax.annotation.Nullable
  private Boolean metadataOnly = false;

  public static final String JSON_PROPERTY_TONE_MAPPER = "toneMapper";
  @javax.annotation.Nullable
  private VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper toneMapper;

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion() {
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion mappingMode(@javax.annotation.Nonnull MappingModeEnum mappingMode) {
    
    this.mappingMode = mappingMode;
    return this;
  }

  /**
   * Defines the mapping mode used to determine the colorimetry of the source video when converting to the SDR transfer characteristic (Rec. 709 or Rec. 2020-10) utilized by the processing pipeline internally.  If the color matrix, range, primaries, or transfer characteristics are missing, they will be inferred based on the input resolution and frame rate as described below:  - &#x60;STRICT_USER&#x60;: Explicitly use the user-provided specification. Validation will fail if the specification is incomplete. - &#x60;SOURCE_PRIORITY&#x60;: Prioritize metadata from the source file, if available. Fill any missing properties with user-provided data or infer from resolution and frame rate. - &#x60;USER_PRIORITY&#x60;: Prioritize the user-provided specification. Fill any missing properties with source file metadata or infer from resolution and frame rate. - &#x60;RESOLUTION_ONLY&#x60;: Ignore metadata from both the source and the user. Infer colorimetry entirely based on resolution and frame rate, using the following resolution categories:    - **SD (NTSC)**:       - Resolution ≤ 720×576       - Frame rate: ~30 fps or ~60 fps       - Colorimetry: Rec. 601 (SMPTE 170M)    - **SD (PAL)**:       - Resolution ≤ 720×576       - Frame rate: non-NTSC       - Colorimetry: Rec. 601 (BT.470BG)    - **HD**:       - Resolution &gt; 720×576 and ≤ 1920×1080       - Frame rate: any       - Colorimetry: Rec. 709    - **UHD**:       - Resolution &gt; 1920×1080       - Frame rate: any       - Colorimetry: Rec. 2020 
   * @return mappingMode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAPPING_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MappingModeEnum getMappingMode() {
    return mappingMode;
  }


  @JsonProperty(JSON_PROPERTY_MAPPING_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMappingMode(@javax.annotation.Nonnull MappingModeEnum mappingMode) {
    this.mappingMode = mappingMode;
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion colorProfile(@javax.annotation.Nullable Colorimetry colorProfile) {
    
    this.colorProfile = colorProfile;
    return this;
  }

  /**
   * Get colorProfile
   * @return colorProfile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Colorimetry getColorProfile() {
    return colorProfile;
  }


  @JsonProperty(JSON_PROPERTY_COLOR_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColorProfile(@javax.annotation.Nullable Colorimetry colorProfile) {
    this.colorProfile = colorProfile;
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion metadataOnly(@javax.annotation.Nullable Boolean metadataOnly) {
    
    this.metadataOnly = metadataOnly;
    return this;
  }

  /**
   * If set to &#x60;true&#x60;, the colorimetry is determined based on the specified mapping mode, but no actual color space conversion is performed. Instead, the determined colorimetry is applied only to the metadata of the output file and used if required for any output color space conversion.
   * @return metadataOnly
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMetadataOnly() {
    return metadataOnly;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataOnly(@javax.annotation.Nullable Boolean metadataOnly) {
    this.metadataOnly = metadataOnly;
  }

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion toneMapper(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper toneMapper) {
    
    this.toneMapper = toneMapper;
    return this;
  }

  /**
   * Get toneMapper
   * @return toneMapper
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONE_MAPPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper getToneMapper() {
    return toneMapper;
  }


  @JsonProperty(JSON_PROPERTY_TONE_MAPPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToneMapper(@javax.annotation.Nullable VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversionToneMapper toneMapper) {
    this.toneMapper = toneMapper;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion = (VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion) o;
    return Objects.equals(this.mappingMode, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.mappingMode) &&
        Objects.equals(this.colorProfile, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.colorProfile) &&
        Objects.equals(this.metadataOnly, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.metadataOnly) &&
        Objects.equals(this.toneMapper, videoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion.toneMapper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mappingMode, colorProfile, metadataOnly, toneMapper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingConfigurationOptionsProcessingSettingsInputColorSpaceConversion {\n");
    sb.append("    mappingMode: ").append(toIndentedString(mappingMode)).append("\n");
    sb.append("    colorProfile: ").append(toIndentedString(colorProfile)).append("\n");
    sb.append("    metadataOnly: ").append(toIndentedString(metadataOnly)).append("\n");
    sb.append("    toneMapper: ").append(toIndentedString(toneMapper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `mappingMode` to the URL query string
    if (getMappingMode() != null) {
      try {
        joiner.add(String.format("%smappingMode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMappingMode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `colorProfile` to the URL query string
    if (getColorProfile() != null) {
      joiner.add(getColorProfile().toUrlQueryString(prefix + "colorProfile" + suffix));
    }

    // add `metadataOnly` to the URL query string
    if (getMetadataOnly() != null) {
      try {
        joiner.add(String.format("%smetadataOnly%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMetadataOnly()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `toneMapper` to the URL query string
    if (getToneMapper() != null) {
      joiner.add(getToneMapper().toUrlQueryString(prefix + "toneMapper" + suffix));
    }

    return joiner.toString();
  }

}

