/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Represents the response received from a webhook endpoint.   This object is also used when the event was not sent due to rate limiting or other failures. 
 */
@JsonPropertyOrder({
  WebhookEndpointResponse.JSON_PROPERTY_REQUESTED_AT,
  WebhookEndpointResponse.JSON_PROPERTY_RESPONSE_TIME_MILLIS,
  WebhookEndpointResponse.JSON_PROPERTY_STATUS_CODE,
  WebhookEndpointResponse.JSON_PROPERTY_RESPONSE_BODY,
  WebhookEndpointResponse.JSON_PROPERTY_ERROR_CODE,
  WebhookEndpointResponse.JSON_PROPERTY_ERROR_MESSAGE,
  WebhookEndpointResponse.JSON_PROPERTY_RESPONSE_RETRY_AT,
  WebhookEndpointResponse.JSON_PROPERTY_RESPONSE_HEADERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T08:04:39.260621056Z[UTC]", comments = "Generator version: 7.15.0")
public class WebhookEndpointResponse {
  public static final String JSON_PROPERTY_REQUESTED_AT = "requestedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime requestedAt;

  public static final String JSON_PROPERTY_RESPONSE_TIME_MILLIS = "responseTimeMillis";
  @javax.annotation.Nonnull
  private Integer responseTimeMillis;

  public static final String JSON_PROPERTY_STATUS_CODE = "statusCode";
  @javax.annotation.Nonnull
  private Integer statusCode;

  public static final String JSON_PROPERTY_RESPONSE_BODY = "responseBody";
  @javax.annotation.Nullable
  private String responseBody;

  public static final String JSON_PROPERTY_ERROR_CODE = "errorCode";
  @javax.annotation.Nullable
  private String errorCode;

  public static final String JSON_PROPERTY_ERROR_MESSAGE = "errorMessage";
  @javax.annotation.Nullable
  private String errorMessage;

  public static final String JSON_PROPERTY_RESPONSE_RETRY_AT = "responseRetryAt";
  @javax.annotation.Nullable
  private OffsetDateTime responseRetryAt;

  public static final String JSON_PROPERTY_RESPONSE_HEADERS = "responseHeaders";
  @javax.annotation.Nullable
  private Map<String, String> responseHeaders = new HashMap<>();

  public WebhookEndpointResponse() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public WebhookEndpointResponse(
    @JsonProperty(JSON_PROPERTY_REQUESTED_AT) OffsetDateTime requestedAt, 
    @JsonProperty(JSON_PROPERTY_RESPONSE_TIME_MILLIS) Integer responseTimeMillis, 
    @JsonProperty(JSON_PROPERTY_STATUS_CODE) Integer statusCode, 
    @JsonProperty(JSON_PROPERTY_RESPONSE_BODY) String responseBody, 
    @JsonProperty(JSON_PROPERTY_ERROR_CODE) String errorCode, 
    @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE) String errorMessage, 
    @JsonProperty(JSON_PROPERTY_RESPONSE_RETRY_AT) OffsetDateTime responseRetryAt, 
    @JsonProperty(JSON_PROPERTY_RESPONSE_HEADERS) Map<String, String> responseHeaders
  ) {
    this();
    this.requestedAt = requestedAt;
    this.responseTimeMillis = responseTimeMillis;
    this.statusCode = statusCode;
    this.responseBody = responseBody;
    this.errorCode = errorCode;
    this.errorMessage = errorMessage;
    this.responseRetryAt = responseRetryAt;
    this.responseHeaders = responseHeaders;
  }

  /**
   * The date and time when the request was sent to the webhook.
   * @return requestedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUESTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getRequestedAt() {
    return requestedAt;
  }



  /**
   * The time taken to receive a response, measured in milliseconds.
   * @return responseTimeMillis
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESPONSE_TIME_MILLIS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getResponseTimeMillis() {
    return responseTimeMillis;
  }



  /**
   * The HTTP status code returned by the webhook endpoint.   All non-2xx status codes are considered unsuccessful. 
   * @return statusCode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStatusCode() {
    return statusCode;
  }



  /**
   * The response body returned from the webhook endpoint, truncated to 100 characters.
   * @return responseBody
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResponseBody() {
    return responseBody;
  }



  /**
   * A machine-readable error code describing the failure, if applicable.
   * @return errorCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorCode() {
    return errorCode;
  }



  /**
   * A human-readable error message associated with the &#x60;errorCode&#x60;, if present.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * If the status code is &#x60;429&#x60; and a retry header (e.g. &#x60;Retry-After&#x60;) is present and parsed, this field indicates when a retry may be attempted. 
   * @return responseRetryAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_RETRY_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getResponseRetryAt() {
    return responseRetryAt;
  }



  /**
   * A map of selected response headers returned by the endpoint, truncated to 50 characters each.   Only stored for unsuccessful responses to provide troubleshooting context. 
   * @return responseHeaders
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getResponseHeaders() {
    return responseHeaders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEndpointResponse webhookEndpointResponse = (WebhookEndpointResponse) o;
    return Objects.equals(this.requestedAt, webhookEndpointResponse.requestedAt) &&
        Objects.equals(this.responseTimeMillis, webhookEndpointResponse.responseTimeMillis) &&
        Objects.equals(this.statusCode, webhookEndpointResponse.statusCode) &&
        Objects.equals(this.responseBody, webhookEndpointResponse.responseBody) &&
        Objects.equals(this.errorCode, webhookEndpointResponse.errorCode) &&
        Objects.equals(this.errorMessage, webhookEndpointResponse.errorMessage) &&
        Objects.equals(this.responseRetryAt, webhookEndpointResponse.responseRetryAt) &&
        Objects.equals(this.responseHeaders, webhookEndpointResponse.responseHeaders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestedAt, responseTimeMillis, statusCode, responseBody, errorCode, errorMessage, responseRetryAt, responseHeaders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEndpointResponse {\n");
    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    responseTimeMillis: ").append(toIndentedString(responseTimeMillis)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    responseBody: ").append(toIndentedString(responseBody)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    responseRetryAt: ").append(toIndentedString(responseRetryAt)).append("\n");
    sb.append("    responseHeaders: ").append(toIndentedString(responseHeaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `requestedAt` to the URL query string
    if (getRequestedAt() != null) {
      try {
        joiner.add(String.format("%srequestedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `responseTimeMillis` to the URL query string
    if (getResponseTimeMillis() != null) {
      try {
        joiner.add(String.format("%sresponseTimeMillis%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResponseTimeMillis()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `statusCode` to the URL query string
    if (getStatusCode() != null) {
      try {
        joiner.add(String.format("%sstatusCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatusCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `responseBody` to the URL query string
    if (getResponseBody() != null) {
      try {
        joiner.add(String.format("%sresponseBody%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResponseBody()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `errorCode` to the URL query string
    if (getErrorCode() != null) {
      try {
        joiner.add(String.format("%serrorCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `errorMessage` to the URL query string
    if (getErrorMessage() != null) {
      try {
        joiner.add(String.format("%serrorMessage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorMessage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `responseRetryAt` to the URL query string
    if (getResponseRetryAt() != null) {
      try {
        joiner.add(String.format("%sresponseRetryAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResponseRetryAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `responseHeaders` to the URL query string
    if (getResponseHeaders() != null) {
      for (String _key : getResponseHeaders().keySet()) {
        try {
          joiner.add(String.format("%sresponseHeaders%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getResponseHeaders().get(_key), URLEncoder.encode(String.valueOf(getResponseHeaders().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

