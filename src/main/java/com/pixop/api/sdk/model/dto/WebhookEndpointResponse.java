/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Represents the response received from a webhook endpoint.   This object is also used when the event was not sent due to rate limiting or other failures. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T07:45:21.409035112Z[UTC]", comments = "Generator version: 7.12.0")
public class WebhookEndpointResponse {
  public static final String SERIALIZED_NAME_REQUESTED_AT = "requestedAt";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime requestedAt;

  public static final String SERIALIZED_NAME_RESPONSE_TIME_MILLIS = "responseTimeMillis";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME_MILLIS)
  @javax.annotation.Nonnull
  private Integer responseTimeMillis;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  @javax.annotation.Nonnull
  private Integer statusCode;

  public static final String SERIALIZED_NAME_RESPONSE_BODY = "responseBody";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY)
  @javax.annotation.Nullable
  private String responseBody;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  @javax.annotation.Nullable
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  @javax.annotation.Nullable
  private String errorMessage;

  public static final String SERIALIZED_NAME_RESPONSE_RETRY_AT = "responseRetryAt";
  @SerializedName(SERIALIZED_NAME_RESPONSE_RETRY_AT)
  @javax.annotation.Nullable
  private OffsetDateTime responseRetryAt;

  public static final String SERIALIZED_NAME_RESPONSE_HEADERS = "responseHeaders";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> responseHeaders = new HashMap<>();

  public WebhookEndpointResponse() {
  }

  public WebhookEndpointResponse(
     OffsetDateTime requestedAt, 
     Integer responseTimeMillis, 
     Integer statusCode, 
     String responseBody, 
     String errorCode, 
     String errorMessage, 
     OffsetDateTime responseRetryAt, 
     Map<String, String> responseHeaders
  ) {
    this();
    this.requestedAt = requestedAt;
    this.responseTimeMillis = responseTimeMillis;
    this.statusCode = statusCode;
    this.responseBody = responseBody;
    this.errorCode = errorCode;
    this.errorMessage = errorMessage;
    this.responseRetryAt = responseRetryAt;
    this.responseHeaders = responseHeaders;
  }

  /**
   * The date and time when the request was sent to the webhook.
   * @return requestedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getRequestedAt() {
    return requestedAt;
  }



  /**
   * The time taken to receive a response, measured in milliseconds.
   * @return responseTimeMillis
   */
  @javax.annotation.Nonnull
  public Integer getResponseTimeMillis() {
    return responseTimeMillis;
  }



  /**
   * The HTTP status code returned by the webhook endpoint.   All non-2xx status codes are considered unsuccessful. 
   * @return statusCode
   */
  @javax.annotation.Nonnull
  public Integer getStatusCode() {
    return statusCode;
  }



  /**
   * The response body returned from the webhook endpoint, truncated to 100 characters.
   * @return responseBody
   */
  @javax.annotation.Nullable
  public String getResponseBody() {
    return responseBody;
  }



  /**
   * A machine-readable error code describing the failure, if applicable.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }



  /**
   * A human-readable error message associated with the &#x60;errorCode&#x60;, if present.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * If the status code is &#x60;429&#x60; and a retry header (e.g. &#x60;Retry-After&#x60;) is present and parsed, this field indicates when a retry may be attempted. 
   * @return responseRetryAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResponseRetryAt() {
    return responseRetryAt;
  }



  /**
   * A map of selected response headers returned by the endpoint, truncated to 50 characters each.   Only stored for unsuccessful responses to provide troubleshooting context. 
   * @return responseHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseHeaders() {
    return responseHeaders;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEndpointResponse webhookEndpointResponse = (WebhookEndpointResponse) o;
    return Objects.equals(this.requestedAt, webhookEndpointResponse.requestedAt) &&
        Objects.equals(this.responseTimeMillis, webhookEndpointResponse.responseTimeMillis) &&
        Objects.equals(this.statusCode, webhookEndpointResponse.statusCode) &&
        Objects.equals(this.responseBody, webhookEndpointResponse.responseBody) &&
        Objects.equals(this.errorCode, webhookEndpointResponse.errorCode) &&
        Objects.equals(this.errorMessage, webhookEndpointResponse.errorMessage) &&
        Objects.equals(this.responseRetryAt, webhookEndpointResponse.responseRetryAt) &&
        Objects.equals(this.responseHeaders, webhookEndpointResponse.responseHeaders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestedAt, responseTimeMillis, statusCode, responseBody, errorCode, errorMessage, responseRetryAt, responseHeaders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEndpointResponse {\n");
    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    responseTimeMillis: ").append(toIndentedString(responseTimeMillis)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    responseBody: ").append(toIndentedString(responseBody)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    responseRetryAt: ").append(toIndentedString(responseRetryAt)).append("\n");
    sb.append("    responseHeaders: ").append(toIndentedString(responseHeaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestedAt");
    openapiFields.add("responseTimeMillis");
    openapiFields.add("statusCode");
    openapiFields.add("responseBody");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("responseRetryAt");
    openapiFields.add("responseHeaders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestedAt");
    openapiRequiredFields.add("responseTimeMillis");
    openapiRequiredFields.add("statusCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookEndpointResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookEndpointResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEndpointResponse is not found in the empty JSON string", WebhookEndpointResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookEndpointResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEndpointResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookEndpointResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("responseBody") != null && !jsonObj.get("responseBody").isJsonNull()) && !jsonObj.get("responseBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBody").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEndpointResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEndpointResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEndpointResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEndpointResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEndpointResponse>() {
           @Override
           public void write(JsonWriter out, WebhookEndpointResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEndpointResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookEndpointResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookEndpointResponse
   * @throws IOException if the JSON string is invalid with respect to WebhookEndpointResponse
   */
  public static WebhookEndpointResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEndpointResponse.class);
  }

  /**
   * Convert an instance of WebhookEndpointResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

