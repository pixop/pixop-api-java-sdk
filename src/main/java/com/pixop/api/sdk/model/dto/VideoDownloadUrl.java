/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pixop.api.sdk.JSON;

/**
 * Details about the video download URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T13:01:21.669747471Z[UTC]", comments = "Generator version: 7.12.0")
public class VideoDownloadUrl {
  public static final String SERIALIZED_NAME_VIDEO_ID = "videoId";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  @javax.annotation.Nonnull
  private UUID videoId;

  public static final String SERIALIZED_NAME_PRESIGNED_URL = "presignedUrl";
  @SerializedName(SERIALIZED_NAME_PRESIGNED_URL)
  @javax.annotation.Nonnull
  private URI presignedUrl;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  @javax.annotation.Nonnull
  private Long fileSize;

  public static final String SERIALIZED_NAME_CRC32C_CHECKSUM = "crc32cChecksum";
  @SerializedName(SERIALIZED_NAME_CRC32C_CHECKSUM)
  @javax.annotation.Nullable
  private Long crc32cChecksum;

  public VideoDownloadUrl() {
  }

  public VideoDownloadUrl(
     URI presignedUrl, 
     OffsetDateTime expiresAt, 
     Long fileSize
  ) {
    this();
    this.presignedUrl = presignedUrl;
    this.expiresAt = expiresAt;
    this.fileSize = fileSize;
  }

  public VideoDownloadUrl videoId(@javax.annotation.Nonnull UUID videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return videoId
   */
  @javax.annotation.Nonnull
  public UUID getVideoId() {
    return videoId;
  }

  public void setVideoId(@javax.annotation.Nonnull UUID videoId) {
    this.videoId = videoId;
  }


  /**
   * The pre-signed URL used for downloading the video.
   * @return presignedUrl
   */
  @javax.annotation.Nonnull
  public URI getPresignedUrl() {
    return presignedUrl;
  }



  /**
   * Date and time for when the pre-signed URL will expire, based on the server&#39;s clock.
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }



  /**
   * The size of the video file in bytes.
   * @return fileSize
   */
  @javax.annotation.Nonnull
  public Long getFileSize() {
    return fileSize;
  }



  public VideoDownloadUrl crc32cChecksum(@javax.annotation.Nullable Long crc32cChecksum) {
    this.crc32cChecksum = crc32cChecksum;
    return this;
  }

  /**
   * The CRC-32C checksum of a video file, represented as a 32-bit unsigned integer, used to verify data integrity.  For more information, see [RFC 3720](https://www.ietf.org/rfc/rfc3720.txt). 
   * minimum: 0
   * maximum: 4294967295
   * @return crc32cChecksum
   */
  @javax.annotation.Nullable
  public Long getCrc32cChecksum() {
    return crc32cChecksum;
  }

  public void setCrc32cChecksum(@javax.annotation.Nullable Long crc32cChecksum) {
    this.crc32cChecksum = crc32cChecksum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoDownloadUrl videoDownloadUrl = (VideoDownloadUrl) o;
    return Objects.equals(this.videoId, videoDownloadUrl.videoId) &&
        Objects.equals(this.presignedUrl, videoDownloadUrl.presignedUrl) &&
        Objects.equals(this.expiresAt, videoDownloadUrl.expiresAt) &&
        Objects.equals(this.fileSize, videoDownloadUrl.fileSize) &&
        Objects.equals(this.crc32cChecksum, videoDownloadUrl.crc32cChecksum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(videoId, presignedUrl, expiresAt, fileSize, crc32cChecksum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoDownloadUrl {\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    presignedUrl: ").append(toIndentedString(presignedUrl)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    crc32cChecksum: ").append(toIndentedString(crc32cChecksum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("videoId");
    openapiFields.add("presignedUrl");
    openapiFields.add("expiresAt");
    openapiFields.add("fileSize");
    openapiFields.add("crc32cChecksum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("videoId");
    openapiRequiredFields.add("presignedUrl");
    openapiRequiredFields.add("expiresAt");
    openapiRequiredFields.add("fileSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoDownloadUrl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoDownloadUrl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoDownloadUrl is not found in the empty JSON string", VideoDownloadUrl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoDownloadUrl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoDownloadUrl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoDownloadUrl.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("videoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoId").toString()));
      }
      if (!jsonObj.get("presignedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presignedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presignedUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoDownloadUrl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoDownloadUrl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoDownloadUrl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoDownloadUrl.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoDownloadUrl>() {
           @Override
           public void write(JsonWriter out, VideoDownloadUrl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoDownloadUrl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoDownloadUrl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoDownloadUrl
   * @throws IOException if the JSON string is invalid with respect to VideoDownloadUrl
   */
  public static VideoDownloadUrl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoDownloadUrl.class);
  }

  /**
   * Convert an instance of VideoDownloadUrl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

