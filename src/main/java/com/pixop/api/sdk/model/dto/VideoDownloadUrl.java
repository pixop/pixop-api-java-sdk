/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.model.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Details about the video download URL.
 */
@JsonPropertyOrder({
  VideoDownloadUrl.JSON_PROPERTY_VIDEO_ID,
  VideoDownloadUrl.JSON_PROPERTY_PRESIGNED_URL,
  VideoDownloadUrl.JSON_PROPERTY_EXPIRES_AT,
  VideoDownloadUrl.JSON_PROPERTY_FILE_SIZE,
  VideoDownloadUrl.JSON_PROPERTY_MIME_TYPE,
  VideoDownloadUrl.JSON_PROPERTY_FILE_EXTENSION,
  VideoDownloadUrl.JSON_PROPERTY_SUGGESTED_FILE_NAME,
  VideoDownloadUrl.JSON_PROPERTY_CRC32C_CHECKSUM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoDownloadUrl {
  public static final String JSON_PROPERTY_VIDEO_ID = "videoId";
  @javax.annotation.Nonnull
  private UUID videoId;

  public static final String JSON_PROPERTY_PRESIGNED_URL = "presignedUrl";
  @javax.annotation.Nonnull
  private URI presignedUrl;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @javax.annotation.Nonnull
  private OffsetDateTime expiresAt;

  public static final String JSON_PROPERTY_FILE_SIZE = "fileSize";
  @javax.annotation.Nonnull
  private Long fileSize;

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  @javax.annotation.Nonnull
  private String mimeType;

  public static final String JSON_PROPERTY_FILE_EXTENSION = "fileExtension";
  @javax.annotation.Nonnull
  private String fileExtension;

  public static final String JSON_PROPERTY_SUGGESTED_FILE_NAME = "suggestedFileName";
  @javax.annotation.Nonnull
  private String suggestedFileName;

  public static final String JSON_PROPERTY_CRC32C_CHECKSUM = "crc32cChecksum";
  @javax.annotation.Nullable
  private Long crc32cChecksum;

  public VideoDownloadUrl() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public VideoDownloadUrl(
    @JsonProperty(JSON_PROPERTY_PRESIGNED_URL) URI presignedUrl, 
    @JsonProperty(JSON_PROPERTY_EXPIRES_AT) OffsetDateTime expiresAt, 
    @JsonProperty(JSON_PROPERTY_FILE_SIZE) Long fileSize, 
    @JsonProperty(JSON_PROPERTY_MIME_TYPE) String mimeType, 
    @JsonProperty(JSON_PROPERTY_FILE_EXTENSION) String fileExtension, 
    @JsonProperty(JSON_PROPERTY_SUGGESTED_FILE_NAME) String suggestedFileName
  ) {
    this();
    this.presignedUrl = presignedUrl;
    this.expiresAt = expiresAt;
    this.fileSize = fileSize;
    this.mimeType = mimeType;
    this.fileExtension = fileExtension;
    this.suggestedFileName = suggestedFileName;
  }

  public VideoDownloadUrl videoId(@javax.annotation.Nonnull UUID videoId) {
    
    this.videoId = videoId;
    return this;
  }

  /**
   * A universally unique identifier (UUID) compliant with [RFC 4122](https://tools.ietf.org/html/rfc4122). Used as a unique key to identify resources or entities across systems.
   * @return videoId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VIDEO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getVideoId() {
    return videoId;
  }


  @JsonProperty(JSON_PROPERTY_VIDEO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVideoId(@javax.annotation.Nonnull UUID videoId) {
    this.videoId = videoId;
  }

  /**
   * The pre-signed URL used for downloading the video.
   * @return presignedUrl
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRESIGNED_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getPresignedUrl() {
    return presignedUrl;
  }



  /**
   * Date and time for when the pre-signed URL will expire, based on the server&#39;s clock.
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }



  /**
   * The size of the video file in bytes.
   * @return fileSize
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getFileSize() {
    return fileSize;
  }



  /**
   * The MIME type of the video file, such as video/mp4 or video/quicktime.
   * @return mimeType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMimeType() {
    return mimeType;
  }



  /**
   * The file extension of the video file, such as mp4 or mov.
   * @return fileExtension
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFileExtension() {
    return fileExtension;
  }



  /**
   * Suggested name for the video file, including its extension. E.g., myvideo.mp4.
   * @return suggestedFileName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUGGESTED_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSuggestedFileName() {
    return suggestedFileName;
  }



  public VideoDownloadUrl crc32cChecksum(@javax.annotation.Nullable Long crc32cChecksum) {
    
    this.crc32cChecksum = crc32cChecksum;
    return this;
  }

  /**
   * The CRC-32C checksum of a video file, represented as a 32-bit unsigned integer, used to verify data integrity.  For more information, see [RFC 3720](https://www.ietf.org/rfc/rfc3720.txt). 
   * minimum: 0
   * maximum: 4294967295
   * @return crc32cChecksum
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CRC32C_CHECKSUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCrc32cChecksum() {
    return crc32cChecksum;
  }


  @JsonProperty(JSON_PROPERTY_CRC32C_CHECKSUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCrc32cChecksum(@javax.annotation.Nullable Long crc32cChecksum) {
    this.crc32cChecksum = crc32cChecksum;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoDownloadUrl videoDownloadUrl = (VideoDownloadUrl) o;
    return Objects.equals(this.videoId, videoDownloadUrl.videoId) &&
        Objects.equals(this.presignedUrl, videoDownloadUrl.presignedUrl) &&
        Objects.equals(this.expiresAt, videoDownloadUrl.expiresAt) &&
        Objects.equals(this.fileSize, videoDownloadUrl.fileSize) &&
        Objects.equals(this.mimeType, videoDownloadUrl.mimeType) &&
        Objects.equals(this.fileExtension, videoDownloadUrl.fileExtension) &&
        Objects.equals(this.suggestedFileName, videoDownloadUrl.suggestedFileName) &&
        Objects.equals(this.crc32cChecksum, videoDownloadUrl.crc32cChecksum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(videoId, presignedUrl, expiresAt, fileSize, mimeType, fileExtension, suggestedFileName, crc32cChecksum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoDownloadUrl {\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    presignedUrl: ").append(toIndentedString(presignedUrl)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    suggestedFileName: ").append(toIndentedString(suggestedFileName)).append("\n");
    sb.append("    crc32cChecksum: ").append(toIndentedString(crc32cChecksum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `videoId` to the URL query string
    if (getVideoId() != null) {
      try {
        joiner.add(String.format("%svideoId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVideoId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `presignedUrl` to the URL query string
    if (getPresignedUrl() != null) {
      try {
        joiner.add(String.format("%spresignedUrl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPresignedUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      try {
        joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fileSize` to the URL query string
    if (getFileSize() != null) {
      try {
        joiner.add(String.format("%sfileSize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `mimeType` to the URL query string
    if (getMimeType() != null) {
      try {
        joiner.add(String.format("%smimeType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMimeType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fileExtension` to the URL query string
    if (getFileExtension() != null) {
      try {
        joiner.add(String.format("%sfileExtension%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileExtension()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `suggestedFileName` to the URL query string
    if (getSuggestedFileName() != null) {
      try {
        joiner.add(String.format("%ssuggestedFileName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSuggestedFileName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `crc32cChecksum` to the URL query string
    if (getCrc32cChecksum() != null) {
      try {
        joiner.add(String.format("%scrc32cChecksum%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCrc32cChecksum()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

