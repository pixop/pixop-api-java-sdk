/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.Webhook;
import com.pixop.api.sdk.model.dto.WebhookEvent;
import com.pixop.api.sdk.model.dto.WebhookEventType;
import com.pixop.api.sdk.model.dto.WebhookPatch;
import com.pixop.api.sdk.model.dto.WebhookPost;
import com.pixop.api.sdk.model.dto.WebhooksPage;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class WebhookApi extends BaseApi {

  public WebhookApi() {
    super(Configuration.getDefaultApiClient());
  }

  public WebhookApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Activate a webhook
   * Activates the specified webhook.    If the webhook is already active, the operation has no effect. If the team has reached the maximum number of allowed active webhooks, a &#x60;409 Conflict&#x60; response is returned. 
   * @param id The unique identifier for the object. (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook activateWebhookById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.activateWebhookById(id, Collections.emptyMap());
  }


  /**
   * Activate a webhook
   * Activates the specified webhook.    If the webhook is already active, the operation has no effect. If the team has reached the maximum number of allowed active webhooks, a &#x60;409 Conflict&#x60; response is returned. 
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook activateWebhookById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling activateWebhookById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/{id}/activate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a new webhook
   * Creates a new webhook for the selected team. Webhooks are used to receive notifications about events on the Pixop Platform.  Each team can have up to **10 active webhooks**. If this limit is reached, attempts to create an additional active webhook will result in a &#x60;409 Conflict&#x60; response. 
   * @param webhookPost Fields required for creating a webhook. (required)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook createWebhook(@javax.annotation.Nonnull WebhookPost webhookPost, @javax.annotation.Nullable UUID selectTeamId) throws ApiException {
    return this.createWebhook(webhookPost, selectTeamId, Collections.emptyMap());
  }


  /**
   * Create a new webhook
   * Creates a new webhook for the selected team. Webhooks are used to receive notifications about events on the Pixop Platform.  Each team can have up to **10 active webhooks**. If this limit is reached, attempts to create an additional active webhook will result in a &#x60;409 Conflict&#x60; response. 
   * @param webhookPost Fields required for creating a webhook. (required)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook createWebhook(@javax.annotation.Nonnull WebhookPost webhookPost, @javax.annotation.Nullable UUID selectTeamId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = webhookPost;
    
    // verify the required parameter 'webhookPost' is set
    if (webhookPost == null) {
      throw new ApiException(400, "Missing the required parameter 'webhookPost' when calling createWebhook");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("selectTeamId", selectTeamId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Deactivate a webhook
   * Deactivates the specified webhook.    If the webhook is already inactive, the operation has no effect. 
   * @param id The unique identifier for the object. (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook deactivateWebhookById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.deactivateWebhookById(id, Collections.emptyMap());
  }


  /**
   * Deactivate a webhook
   * Deactivates the specified webhook.    If the webhook is already inactive, the operation has no effect. 
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook deactivateWebhookById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deactivateWebhookById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/{id}/deactivate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a webhook
   * Deletes a webhook by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteWebhookById(@javax.annotation.Nonnull UUID id) throws ApiException {
    this.deleteWebhookById(id, Collections.emptyMap());
  }


  /**
   * Delete a webhook
   * Deletes a webhook by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteWebhookById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteWebhookById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Retrieve webhook details
   * Retrieves the details of a specific webhook using its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook getWebhookById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.getWebhookById(id, Collections.emptyMap());
  }


  /**
   * Retrieve webhook details
   * Retrieves the details of a specific webhook using its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook getWebhookById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getWebhookById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve webhooks
   * Retrieves a paginated list of webhooks associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @return WebhooksPage
   * @throws ApiException if fails to make API call
   */
  public WebhooksPage getWebhooks(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId) throws ApiException {
    return this.getWebhooks(pageNumber, pageSize, sortDirection, sortBy, teamId, Collections.emptyMap());
  }


  /**
   * Retrieve webhooks
   * Retrieves a paginated list of webhooks associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return WebhooksPage
   * @throws ApiException if fails to make API call
   */
  public WebhooksPage getWebhooks(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/webhooks";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("teamId", teamId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<WebhooksPage> localVarReturnType = new TypeReference<WebhooksPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a webhook
   * Updates the details of an existing webhook. To activate or deactivate a webhook, use the respective endpoints.
   * @param id The unique identifier for the object. (required)
   * @param webhookPatch Fields of a webhook that can be updated. (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook patchWebhook(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull WebhookPatch webhookPatch) throws ApiException {
    return this.patchWebhook(id, webhookPatch, Collections.emptyMap());
  }


  /**
   * Update a webhook
   * Updates the details of an existing webhook. To activate or deactivate a webhook, use the respective endpoints.
   * @param id The unique identifier for the object. (required)
   * @param webhookPatch Fields of a webhook that can be updated. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook patchWebhook(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull WebhookPatch webhookPatch, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = webhookPatch;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchWebhook");
    }
    
    // verify the required parameter 'webhookPatch' is set
    if (webhookPatch == null) {
      throw new ApiException(400, "Missing the required parameter 'webhookPatch' when calling patchWebhook");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Webhook> localVarReturnType = new TypeReference<Webhook>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Test a video webhook
   * Sends a test event to the specified video webhook.  You may optionally provide a &#x60;videoId&#x60; and/or &#x60;eventType&#x60;. If &#x60;videoId&#x60; is omitted, a random UUID will be generated.   If &#x60;eventType&#x60; is not specified, one of the webhook’s configured event types will be selected at random.  If the webhook is inactive, or if the specified &#x60;eventType&#x60; is not among the webhook’s configured types, a &#x60;409 Conflict&#x60; response is returned.  Each team can send up to **1000 test events** within a 24-hour period.   If this limit is reached, further attempts to send test events will also result in a &#x60;409 Conflict&#x60; response.  Test events are automatically deleted after 24 hours. 
   * @param id The unique identifier for the object. (required)
   * @param videoId Optional video ID to include in the test event. If omitted, a random UUID will be used. (optional)
   * @param eventType Optional event type to use for the test event. If omitted, one of the webhook’s configured event types is selected at random. If specified, it must match one of the webhook&#39;s configured event types.  (optional)
   * @return WebhookEvent
   * @throws ApiException if fails to make API call
   */
  public WebhookEvent testVideoWebhookById(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable UUID videoId, @javax.annotation.Nullable WebhookEventType eventType) throws ApiException {
    return this.testVideoWebhookById(id, videoId, eventType, Collections.emptyMap());
  }


  /**
   * Test a video webhook
   * Sends a test event to the specified video webhook.  You may optionally provide a &#x60;videoId&#x60; and/or &#x60;eventType&#x60;. If &#x60;videoId&#x60; is omitted, a random UUID will be generated.   If &#x60;eventType&#x60; is not specified, one of the webhook’s configured event types will be selected at random.  If the webhook is inactive, or if the specified &#x60;eventType&#x60; is not among the webhook’s configured types, a &#x60;409 Conflict&#x60; response is returned.  Each team can send up to **1000 test events** within a 24-hour period.   If this limit is reached, further attempts to send test events will also result in a &#x60;409 Conflict&#x60; response.  Test events are automatically deleted after 24 hours. 
   * @param id The unique identifier for the object. (required)
   * @param videoId Optional video ID to include in the test event. If omitted, a random UUID will be used. (optional)
   * @param eventType Optional event type to use for the test event. If omitted, one of the webhook’s configured event types is selected at random. If specified, it must match one of the webhook&#39;s configured event types.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return WebhookEvent
   * @throws ApiException if fails to make API call
   */
  public WebhookEvent testVideoWebhookById(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable UUID videoId, @javax.annotation.Nullable WebhookEventType eventType, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling testVideoWebhookById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/{id}/test"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("videoId", videoId));
    localVarQueryParams.addAll(apiClient.parameterToPair("eventType", eventType));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<WebhookEvent> localVarReturnType = new TypeReference<WebhookEvent>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
