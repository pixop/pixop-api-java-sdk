/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.ApiKey;
import com.pixop.api.sdk.model.dto.ApiKeyPatch;
import com.pixop.api.sdk.model.dto.ApiKeyPost;
import com.pixop.api.sdk.model.dto.ApiKeysPage;
import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class ApiKeyApi extends BaseApi {

  public ApiKeyApi() {
    super(Configuration.getDefaultApiClient());
  }

  public ApiKeyApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Activate an API key
   * Activates an API key. If the API key is already active, the operation has no effect.  If the maximum number of active API keys allowed has been reached, a &#x60;409 Conflict&#x60; response is returned. 
   * @param id The unique identifier for the object. (required)
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey activateApiKeyById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.activateApiKeyById(id, Collections.emptyMap());
  }


  /**
   * Activate an API key
   * Activates an API key. If the API key is already active, the operation has no effect.  If the maximum number of active API keys allowed has been reached, a &#x60;409 Conflict&#x60; response is returned. 
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey activateApiKeyById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling activateApiKeyById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/api-keys/{id}/activate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    TypeReference<ApiKey> localVarReturnType = new TypeReference<ApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a new API key
   * Creates a new API key associated with the authenticated user. API keys are used for authentication when accessing the Pixop API.  Each user can have up to **2 active API keys**. If this limit is reached, attempts to create an additional active API key will result in a &#x60;409 Conflict&#x60; response. 
   * @param apiKeyPost Fields required for creating a new API key. (required)
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey createApiKey(@javax.annotation.Nonnull ApiKeyPost apiKeyPost) throws ApiException {
    return this.createApiKey(apiKeyPost, Collections.emptyMap());
  }


  /**
   * Create a new API key
   * Creates a new API key associated with the authenticated user. API keys are used for authentication when accessing the Pixop API.  Each user can have up to **2 active API keys**. If this limit is reached, attempts to create an additional active API key will result in a &#x60;409 Conflict&#x60; response. 
   * @param apiKeyPost Fields required for creating a new API key. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey createApiKey(@javax.annotation.Nonnull ApiKeyPost apiKeyPost, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiKeyPost;
    
    // verify the required parameter 'apiKeyPost' is set
    if (apiKeyPost == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKeyPost' when calling createApiKey");
    }
    
    // create path and map variables
    String localVarPath = "/v1/api-keys";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    TypeReference<ApiKey> localVarReturnType = new TypeReference<ApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Deactivate an API key
   * Deactivates an API key. If the API key is already inactive, the operation has no effect.
   * @param id The unique identifier for the object. (required)
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey deactivateApiKeyById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.deactivateApiKeyById(id, Collections.emptyMap());
  }


  /**
   * Deactivate an API key
   * Deactivates an API key. If the API key is already inactive, the operation has no effect.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey deactivateApiKeyById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deactivateApiKeyById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/api-keys/{id}/deactivate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    TypeReference<ApiKey> localVarReturnType = new TypeReference<ApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an inactive API key
   * Deletes an inactive API key. Active API keys must be deactivated before they can be deleted.  A &#x60;409 Conflict&#x60; response is returned, if the API key is active. 
   * @param id The unique identifier for the object. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteApiKeyById(@javax.annotation.Nonnull UUID id) throws ApiException {
    this.deleteApiKeyById(id, Collections.emptyMap());
  }


  /**
   * Delete an inactive API key
   * Deletes an inactive API key. Active API keys must be deactivated before they can be deleted.  A &#x60;409 Conflict&#x60; response is returned, if the API key is active. 
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteApiKeyById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiKeyById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/api-keys/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Retrieve API key details
   * Retrieves the details of a specific API key using its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey getApiKeyById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.getApiKeyById(id, Collections.emptyMap());
  }


  /**
   * Retrieve API key details
   * Retrieves the details of a specific API key using its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey getApiKeyById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getApiKeyById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/api-keys/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    TypeReference<ApiKey> localVarReturnType = new TypeReference<ApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve API keys
   * Retrieves a paginated list of API keys associated with the authenticated user.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @return ApiKeysPage
   * @throws ApiException if fails to make API call
   */
  public ApiKeysPage getApiKeys(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy) throws ApiException {
    return this.getApiKeys(pageNumber, pageSize, sortDirection, sortBy, Collections.emptyMap());
  }


  /**
   * Retrieve API keys
   * Retrieves a paginated list of API keys associated with the authenticated user.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiKeysPage
   * @throws ApiException if fails to make API call
   */
  public ApiKeysPage getApiKeys(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/api-keys";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    TypeReference<ApiKeysPage> localVarReturnType = new TypeReference<ApiKeysPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an API key
   * Updates the name or description of an existing API key. To activate or deactivate an API key, use the respective endpoints.
   * @param id The unique identifier for the object. (required)
   * @param apiKeyPatch Fields of an API key that can be updated. (required)
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey patchApiKey(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull ApiKeyPatch apiKeyPatch) throws ApiException {
    return this.patchApiKey(id, apiKeyPatch, Collections.emptyMap());
  }


  /**
   * Update an API key
   * Updates the name or description of an existing API key. To activate or deactivate an API key, use the respective endpoints.
   * @param id The unique identifier for the object. (required)
   * @param apiKeyPatch Fields of an API key that can be updated. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ApiKey
   * @throws ApiException if fails to make API call
   */
  public ApiKey patchApiKey(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull ApiKeyPatch apiKeyPatch, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiKeyPatch;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchApiKey");
    }
    
    // verify the required parameter 'apiKeyPatch' is set
    if (apiKeyPatch == null) {
      throw new ApiException(400, "Missing the required parameter 'apiKeyPatch' when calling patchApiKey");
    }
    
    // create path and map variables
    String localVarPath = "/v1/api-keys/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    TypeReference<ApiKey> localVarReturnType = new TypeReference<ApiKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basic_auth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
