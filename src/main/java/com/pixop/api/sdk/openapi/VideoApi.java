/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.FilterModeEnum;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.Video;
import com.pixop.api.sdk.model.dto.VideoPatch;
import com.pixop.api.sdk.model.dto.VideosPage;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoApi extends BaseApi {

  public VideoApi() {
    super(Configuration.getDefaultApiClient());
  }

  public VideoApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Delete a video
   * Deletes a video by its unique identifier. - When deleting a master video record, all derived videos will also be deleted. - When deleting a clip, any processed clips based on it will also be deleted.  Derived videos can be retrieved using [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/). Optionally, a list of expected derived &#x60;videoIds&#x60; can be specified in the request body. If this list is specified and incomplete, the operation fails with a &#x60;409 Conflict&#x60; response. 
   * @param videoId The unique identifier for the video. (required)
   * @param UUID A list of derived video IDs expected to be deleted. An empty list indicates no derived videos are expected to be deleted. (optional)
   * @return List&lt;UUID&gt;
   * @throws ApiException if fails to make API call
   */
  public List<UUID> deleteVideoById(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable List<UUID> UUID) throws ApiException {
    return this.deleteVideoById(videoId, UUID, Collections.emptyMap());
  }


  /**
   * Delete a video
   * Deletes a video by its unique identifier. - When deleting a master video record, all derived videos will also be deleted. - When deleting a clip, any processed clips based on it will also be deleted.  Derived videos can be retrieved using [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/). Optionally, a list of expected derived &#x60;videoIds&#x60; can be specified in the request body. If this list is specified and incomplete, the operation fails with a &#x60;409 Conflict&#x60; response. 
   * @param videoId The unique identifier for the video. (required)
   * @param UUID A list of derived video IDs expected to be deleted. An empty list indicates no derived videos are expected to be deleted. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;UUID&gt;
   * @throws ApiException if fails to make API call
   */
  public List<UUID> deleteVideoById(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable List<UUID> UUID, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = UUID;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling deleteVideoById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<List<UUID>> localVarReturnType = new TypeReference<List<UUID>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve derived videos
   * Retrieves a paginated list of videos derived from the specified &#x60;videoId&#x60;. - When the &#x60;videoId&#x60; refers to a master video record, all related videos and clips are returned. - When the &#x60;videoId&#x60; refers to a clip, all processed clips based on it are returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @return VideosPage
   * @throws ApiException if fails to make API call
   */
  public VideosPage getDerivedVideos(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy) throws ApiException {
    return this.getDerivedVideos(videoId, pageNumber, pageSize, sortDirection, sortBy, Collections.emptyMap());
  }


  /**
   * Retrieve derived videos
   * Retrieves a paginated list of videos derived from the specified &#x60;videoId&#x60;. - When the &#x60;videoId&#x60; refers to a master video record, all related videos and clips are returned. - When the &#x60;videoId&#x60; refers to a clip, all processed clips based on it are returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideosPage
   * @throws ApiException if fails to make API call
   */
  public VideosPage getDerivedVideos(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling getDerivedVideos");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/derived"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideosPage> localVarReturnType = new TypeReference<VideosPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve details about a video
   * Retrieves details about a specific video by its unique identifier.
   * @param videoId The unique identifier for the video. (required)
   * @return Video
   * @throws ApiException if fails to make API call
   */
  public Video getVideoById(@javax.annotation.Nonnull UUID videoId) throws ApiException {
    return this.getVideoById(videoId, Collections.emptyMap());
  }


  /**
   * Retrieve details about a video
   * Retrieves details about a specific video by its unique identifier.
   * @param videoId The unique identifier for the video. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Video
   * @throws ApiException if fails to make API call
   */
  public Video getVideoById(@javax.annotation.Nonnull UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling getVideoById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Video> localVarReturnType = new TypeReference<Video>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve paginated list of videos
   * Retrieves a paginated list of videos associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param projectId Filters results by the specified project ID. Includes only videos with the given project ID. (optional)
   * @param masterVideoId Filters results to include only videos derived from the specified &#x60;masterVideoId&#x60;. (optional)
   * @param clipId Filters results to include only videos whose &#x60;clipId&#x60; matches the specified value. (optional)
   * @param clipMode Filters results based on the clip mode: - &#x60;INCLUDE&#x60;: Includes clips in the result. - &#x60;EXCLUDE&#x60;: Excludes clips from the result. - &#x60;ONLY&#x60;: Only returns clips in the result.  (optional, default to INCLUDE)
   * @return VideosPage
   * @throws ApiException if fails to make API call
   */
  public VideosPage getVideos(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable UUID projectId, @javax.annotation.Nullable UUID masterVideoId, @javax.annotation.Nullable UUID clipId, @javax.annotation.Nullable FilterModeEnum clipMode) throws ApiException {
    return this.getVideos(pageNumber, pageSize, sortDirection, sortBy, teamId, projectId, masterVideoId, clipId, clipMode, Collections.emptyMap());
  }


  /**
   * Retrieve paginated list of videos
   * Retrieves a paginated list of videos associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param projectId Filters results by the specified project ID. Includes only videos with the given project ID. (optional)
   * @param masterVideoId Filters results to include only videos derived from the specified &#x60;masterVideoId&#x60;. (optional)
   * @param clipId Filters results to include only videos whose &#x60;clipId&#x60; matches the specified value. (optional)
   * @param clipMode Filters results based on the clip mode: - &#x60;INCLUDE&#x60;: Includes clips in the result. - &#x60;EXCLUDE&#x60;: Excludes clips from the result. - &#x60;ONLY&#x60;: Only returns clips in the result.  (optional, default to INCLUDE)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideosPage
   * @throws ApiException if fails to make API call
   */
  public VideosPage getVideos(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable UUID projectId, @javax.annotation.Nullable UUID masterVideoId, @javax.annotation.Nullable UUID clipId, @javax.annotation.Nullable FilterModeEnum clipMode, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/videos";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("teamId", teamId));
    localVarQueryParams.addAll(apiClient.parameterToPair("projectId", projectId));
    localVarQueryParams.addAll(apiClient.parameterToPair("masterVideoId", masterVideoId));
    localVarQueryParams.addAll(apiClient.parameterToPair("clipId", clipId));
    localVarQueryParams.addAll(apiClient.parameterToPair("clipMode", clipMode));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideosPage> localVarReturnType = new TypeReference<VideosPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an existing video
   * Updates the metadata of an existing video by its unique identifier.
   * @param videoId The unique identifier for the video. (required)
   * @param videoPatch Fields of a video that can be updated. (required)
   * @return Video
   * @throws ApiException if fails to make API call
   */
  public Video patchVideo(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull VideoPatch videoPatch) throws ApiException {
    return this.patchVideo(videoId, videoPatch, Collections.emptyMap());
  }


  /**
   * Update an existing video
   * Updates the metadata of an existing video by its unique identifier.
   * @param videoId The unique identifier for the video. (required)
   * @param videoPatch Fields of a video that can be updated. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Video
   * @throws ApiException if fails to make API call
   */
  public Video patchVideo(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull VideoPatch videoPatch, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = videoPatch;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling patchVideo");
    }
    
    // verify the required parameter 'videoPatch' is set
    if (videoPatch == null) {
      throw new ApiException(400, "Missing the required parameter 'videoPatch' when calling patchVideo");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<Video> localVarReturnType = new TypeReference<Video>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
