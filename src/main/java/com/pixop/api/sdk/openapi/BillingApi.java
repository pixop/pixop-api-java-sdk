/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.BillingPeriod;
import com.pixop.api.sdk.model.dto.BillingPeriodsPage;
import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.FilterModeEnum;
import java.time.LocalDate;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import com.pixop.api.sdk.model.dto.TransactionsPage;
import java.util.UUID;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class BillingApi extends BaseApi {

  public BillingApi() {
    super(Configuration.getDefaultApiClient());
  }

  public BillingApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Retrieve billing period details
   * Retrieves the details of a specific billing period by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @return BillingPeriod
   * @throws ApiException if fails to make API call
   */
  public BillingPeriod getBillingPeriodById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.getBillingPeriodById(id, Collections.emptyMap());
  }


  /**
   * Retrieve billing period details
   * Retrieves the details of a specific billing period by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return BillingPeriod
   * @throws ApiException if fails to make API call
   */
  public BillingPeriod getBillingPeriodById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getBillingPeriodById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/billing-periods/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<BillingPeriod> localVarReturnType = new TypeReference<BillingPeriod>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve paginated list of billing periods
   * Retrieves a paginated list of billing periods associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param fromDate Filters results by creation date. Includes only items created at or after the specified date. Defaults to the creation date of the team. (optional)
   * @param toDate Filters results by creation date. Includes only items created at or before the specified date. Defaults to the current date. (optional)
   * @param endedMode Filters results based on the ended mode: - &#x60;INCLUDE&#x60;: Includes ended billing periods in the result. - &#x60;EXCLUDE&#x60;: Excludes ended billing periods from the result. - &#x60;ONLY&#x60;: Only returns ended billing periods in the result.  (optional, default to INCLUDE)
   * @return BillingPeriodsPage
   * @throws ApiException if fails to make API call
   */
  public BillingPeriodsPage getBillingPeriods(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable LocalDate fromDate, @javax.annotation.Nullable LocalDate toDate, @javax.annotation.Nullable FilterModeEnum endedMode) throws ApiException {
    return this.getBillingPeriods(pageNumber, pageSize, sortDirection, sortBy, teamId, fromDate, toDate, endedMode, Collections.emptyMap());
  }


  /**
   * Retrieve paginated list of billing periods
   * Retrieves a paginated list of billing periods associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param fromDate Filters results by creation date. Includes only items created at or after the specified date. Defaults to the creation date of the team. (optional)
   * @param toDate Filters results by creation date. Includes only items created at or before the specified date. Defaults to the current date. (optional)
   * @param endedMode Filters results based on the ended mode: - &#x60;INCLUDE&#x60;: Includes ended billing periods in the result. - &#x60;EXCLUDE&#x60;: Excludes ended billing periods from the result. - &#x60;ONLY&#x60;: Only returns ended billing periods in the result.  (optional, default to INCLUDE)
   * @param additionalHeaders additionalHeaders for this call
   * @return BillingPeriodsPage
   * @throws ApiException if fails to make API call
   */
  public BillingPeriodsPage getBillingPeriods(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable LocalDate fromDate, @javax.annotation.Nullable LocalDate toDate, @javax.annotation.Nullable FilterModeEnum endedMode, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/billing-periods";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("teamId", teamId));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("endedMode", endedMode));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<BillingPeriodsPage> localVarReturnType = new TypeReference<BillingPeriodsPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve transactions for a billing period
   * Retrieves a paginated list of transactions for a specific billing period, sorted by date.
   * @param id The unique identifier for the object. (required)
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param fromDate Filters results by creation date. Includes only items created at or after the specified date. Defaults to the creation date of the team. (optional)
   * @param toDate Filters results by creation date. Includes only items created at or before the specified date. Defaults to the current date. (optional)
   * @param processingTransactionsMode Filters results based on the processing transactions mode: - &#x60;INCLUDE&#x60;: Includes processing transactions in the result. - &#x60;EXCLUDE&#x60;: Excludes processing transactions from the result. - &#x60;ONLY&#x60;: Only returns processing transactions in the result.  (optional, default to INCLUDE)
   * @param videoId Filters results to include only those transactions that are associated with the specified &#x60;videoId&#x60;. (optional)
   * @return TransactionsPage
   * @throws ApiException if fails to make API call
   */
  public TransactionsPage getTransactionsByBillingPeriodId(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable LocalDate fromDate, @javax.annotation.Nullable LocalDate toDate, @javax.annotation.Nullable FilterModeEnum processingTransactionsMode, @javax.annotation.Nullable UUID videoId) throws ApiException {
    return this.getTransactionsByBillingPeriodId(id, pageNumber, pageSize, sortDirection, fromDate, toDate, processingTransactionsMode, videoId, Collections.emptyMap());
  }


  /**
   * Retrieve transactions for a billing period
   * Retrieves a paginated list of transactions for a specific billing period, sorted by date.
   * @param id The unique identifier for the object. (required)
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param fromDate Filters results by creation date. Includes only items created at or after the specified date. Defaults to the creation date of the team. (optional)
   * @param toDate Filters results by creation date. Includes only items created at or before the specified date. Defaults to the current date. (optional)
   * @param processingTransactionsMode Filters results based on the processing transactions mode: - &#x60;INCLUDE&#x60;: Includes processing transactions in the result. - &#x60;EXCLUDE&#x60;: Excludes processing transactions from the result. - &#x60;ONLY&#x60;: Only returns processing transactions in the result.  (optional, default to INCLUDE)
   * @param videoId Filters results to include only those transactions that are associated with the specified &#x60;videoId&#x60;. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return TransactionsPage
   * @throws ApiException if fails to make API call
   */
  public TransactionsPage getTransactionsByBillingPeriodId(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable LocalDate fromDate, @javax.annotation.Nullable LocalDate toDate, @javax.annotation.Nullable FilterModeEnum processingTransactionsMode, @javax.annotation.Nullable UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getTransactionsByBillingPeriodId");
    }
    
    // create path and map variables
    String localVarPath = "/v1/billing-periods/{id}/transactions"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("processingTransactionsMode", processingTransactionsMode));
    localVarQueryParams.addAll(apiClient.parameterToPair("videoId", videoId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<TransactionsPage> localVarReturnType = new TypeReference<TransactionsPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve transactions for the latest billing period
   * Retrieves a paginated list of transactions for the selected team&#39;s latest billing period, sorted by date.
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param fromDate Filters results by creation date. Includes only items created at or after the specified date. Defaults to the creation date of the team. (optional)
   * @param toDate Filters results by creation date. Includes only items created at or before the specified date. Defaults to the current date. (optional)
   * @param processingTransactionsMode Filters results based on the processing transactions mode: - &#x60;INCLUDE&#x60;: Includes processing transactions in the result. - &#x60;EXCLUDE&#x60;: Excludes processing transactions from the result. - &#x60;ONLY&#x60;: Only returns processing transactions in the result.  (optional, default to INCLUDE)
   * @param videoId Filters results to include only those transactions that are associated with the specified &#x60;videoId&#x60;. (optional)
   * @return TransactionsPage
   * @throws ApiException if fails to make API call
   */
  public TransactionsPage getTransactionsForLatestBillingPeriod(@javax.annotation.Nullable UUID selectTeamId, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable LocalDate fromDate, @javax.annotation.Nullable LocalDate toDate, @javax.annotation.Nullable FilterModeEnum processingTransactionsMode, @javax.annotation.Nullable UUID videoId) throws ApiException {
    return this.getTransactionsForLatestBillingPeriod(selectTeamId, pageNumber, pageSize, sortDirection, fromDate, toDate, processingTransactionsMode, videoId, Collections.emptyMap());
  }


  /**
   * Retrieve transactions for the latest billing period
   * Retrieves a paginated list of transactions for the selected team&#39;s latest billing period, sorted by date.
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param fromDate Filters results by creation date. Includes only items created at or after the specified date. Defaults to the creation date of the team. (optional)
   * @param toDate Filters results by creation date. Includes only items created at or before the specified date. Defaults to the current date. (optional)
   * @param processingTransactionsMode Filters results based on the processing transactions mode: - &#x60;INCLUDE&#x60;: Includes processing transactions in the result. - &#x60;EXCLUDE&#x60;: Excludes processing transactions from the result. - &#x60;ONLY&#x60;: Only returns processing transactions in the result.  (optional, default to INCLUDE)
   * @param videoId Filters results to include only those transactions that are associated with the specified &#x60;videoId&#x60;. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return TransactionsPage
   * @throws ApiException if fails to make API call
   */
  public TransactionsPage getTransactionsForLatestBillingPeriod(@javax.annotation.Nullable UUID selectTeamId, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable LocalDate fromDate, @javax.annotation.Nullable LocalDate toDate, @javax.annotation.Nullable FilterModeEnum processingTransactionsMode, @javax.annotation.Nullable UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/billing-periods/transactions";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("selectTeamId", selectTeamId));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("processingTransactionsMode", processingTransactionsMode));
    localVarQueryParams.addAll(apiClient.parameterToPair("videoId", videoId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<TransactionsPage> localVarReturnType = new TypeReference<TransactionsPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
