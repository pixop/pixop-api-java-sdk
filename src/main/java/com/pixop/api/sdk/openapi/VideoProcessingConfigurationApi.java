/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.openapi;

import com.pixop.api.sdk.ApiCallback;
import com.pixop.api.sdk.ApiClient;
import com.pixop.api.sdk.ApiException;
import com.pixop.api.sdk.ApiResponse;
import com.pixop.api.sdk.Configuration;
import com.pixop.api.sdk.Pair;
import com.pixop.api.sdk.ProgressRequestBody;
import com.pixop.api.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.FilterModeEnum;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoProcessingConfiguration;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationPost;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationsPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoProcessingConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideoProcessingConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoProcessingConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVideoProcessingConfiguration
     * @param videoProcessingConfigurationPost Request payload for creating a &#x60;VideoProcessingConfiguration&#x60; object, specifying the desired processing settings. (required)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoProcessingConfigurationCall(VideoProcessingConfigurationPost videoProcessingConfigurationPost, UUID selectTeamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoProcessingConfigurationPost;

        // create path and map variables
        String localVarPath = "/v1/processing-configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectTeamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectTeamId", selectTeamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoProcessingConfigurationValidateBeforeCall(VideoProcessingConfigurationPost videoProcessingConfigurationPost, UUID selectTeamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoProcessingConfigurationPost' is set
        if (videoProcessingConfigurationPost == null) {
            throw new ApiException("Missing the required parameter 'videoProcessingConfigurationPost' when calling createVideoProcessingConfiguration(Async)");
        }

        return createVideoProcessingConfigurationCall(videoProcessingConfigurationPost, selectTeamId, _callback);

    }

    /**
     * Create a new video processing configuration
     * Creates a new video processing configuration for the selected team.
     * @param videoProcessingConfigurationPost Request payload for creating a &#x60;VideoProcessingConfiguration&#x60; object, specifying the desired processing settings. (required)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @return VideoProcessingConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingConfiguration createVideoProcessingConfiguration(VideoProcessingConfigurationPost videoProcessingConfigurationPost, UUID selectTeamId) throws ApiException {
        ApiResponse<VideoProcessingConfiguration> localVarResp = createVideoProcessingConfigurationWithHttpInfo(videoProcessingConfigurationPost, selectTeamId);
        return localVarResp.getData();
    }

    /**
     * Create a new video processing configuration
     * Creates a new video processing configuration for the selected team.
     * @param videoProcessingConfigurationPost Request payload for creating a &#x60;VideoProcessingConfiguration&#x60; object, specifying the desired processing settings. (required)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @return ApiResponse&lt;VideoProcessingConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingConfiguration> createVideoProcessingConfigurationWithHttpInfo(VideoProcessingConfigurationPost videoProcessingConfigurationPost, UUID selectTeamId) throws ApiException {
        okhttp3.Call localVarCall = createVideoProcessingConfigurationValidateBeforeCall(videoProcessingConfigurationPost, selectTeamId, null);
        Type localVarReturnType = new TypeToken<VideoProcessingConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new video processing configuration (asynchronously)
     * Creates a new video processing configuration for the selected team.
     * @param videoProcessingConfigurationPost Request payload for creating a &#x60;VideoProcessingConfiguration&#x60; object, specifying the desired processing settings. (required)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoProcessingConfigurationAsync(VideoProcessingConfigurationPost videoProcessingConfigurationPost, UUID selectTeamId, final ApiCallback<VideoProcessingConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoProcessingConfigurationValidateBeforeCall(videoProcessingConfigurationPost, selectTeamId, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoProcessingConfigurationById
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video processing configuration successfully deleted. No content to return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoProcessingConfigurationByIdCall(UUID confId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/processing-configurations/{confId}"
            .replace("{" + "confId" + "}", localVarApiClient.escapeString(confId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoProcessingConfigurationByIdValidateBeforeCall(UUID confId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'confId' is set
        if (confId == null) {
            throw new ApiException("Missing the required parameter 'confId' when calling deleteVideoProcessingConfigurationById(Async)");
        }

        return deleteVideoProcessingConfigurationByIdCall(confId, _callback);

    }

    /**
     * Delete a video processing configuration
     * Deletes a video processing configuration by its unique identifier.
     * @param confId The unique identifier for the video processing configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video processing configuration successfully deleted. No content to return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public void deleteVideoProcessingConfigurationById(UUID confId) throws ApiException {
        deleteVideoProcessingConfigurationByIdWithHttpInfo(confId);
    }

    /**
     * Delete a video processing configuration
     * Deletes a video processing configuration by its unique identifier.
     * @param confId The unique identifier for the video processing configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video processing configuration successfully deleted. No content to return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoProcessingConfigurationByIdWithHttpInfo(UUID confId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoProcessingConfigurationByIdValidateBeforeCall(confId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a video processing configuration (asynchronously)
     * Deletes a video processing configuration by its unique identifier.
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Video processing configuration successfully deleted. No content to return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoProcessingConfigurationByIdAsync(UUID confId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoProcessingConfigurationByIdValidateBeforeCall(confId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoProcessingConfigurationById
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoProcessingConfigurationByIdCall(UUID confId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/processing-configurations/{confId}"
            .replace("{" + "confId" + "}", localVarApiClient.escapeString(confId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoProcessingConfigurationByIdValidateBeforeCall(UUID confId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'confId' is set
        if (confId == null) {
            throw new ApiException("Missing the required parameter 'confId' when calling getVideoProcessingConfigurationById(Async)");
        }

        return getVideoProcessingConfigurationByIdCall(confId, _callback);

    }

    /**
     * Retrieve video processing configuration details
     * Retrieves the details of a video processing configuration by its unique identifier.
     * @param confId The unique identifier for the video processing configuration. (required)
     * @return VideoProcessingConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingConfiguration getVideoProcessingConfigurationById(UUID confId) throws ApiException {
        ApiResponse<VideoProcessingConfiguration> localVarResp = getVideoProcessingConfigurationByIdWithHttpInfo(confId);
        return localVarResp.getData();
    }

    /**
     * Retrieve video processing configuration details
     * Retrieves the details of a video processing configuration by its unique identifier.
     * @param confId The unique identifier for the video processing configuration. (required)
     * @return ApiResponse&lt;VideoProcessingConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingConfiguration> getVideoProcessingConfigurationByIdWithHttpInfo(UUID confId) throws ApiException {
        okhttp3.Call localVarCall = getVideoProcessingConfigurationByIdValidateBeforeCall(confId, null);
        Type localVarReturnType = new TypeToken<VideoProcessingConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve video processing configuration details (asynchronously)
     * Retrieves the details of a video processing configuration by its unique identifier.
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved video processing configuration details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoProcessingConfigurationByIdAsync(UUID confId, final ApiCallback<VideoProcessingConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoProcessingConfigurationByIdValidateBeforeCall(confId, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoProcessingConfigurations
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param builtInMode Filters results based on the built-in mode: - &#x60;INCLUDE&#x60;: Includes built-in configurations in the result. - &#x60;EXCLUDE&#x60;: Excludes built-in configurations from the result. - &#x60;ONLY&#x60;: Only returns built-in configurations in the result.  (optional, default to INCLUDE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of video processing configuration items. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoProcessingConfigurationsCall(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum builtInMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/processing-configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamId", teamId));
        }

        if (builtInMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("builtInMode", builtInMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoProcessingConfigurationsValidateBeforeCall(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum builtInMode, final ApiCallback _callback) throws ApiException {
        return getVideoProcessingConfigurationsCall(pageNumber, pageSize, sortDirection, sortBy, teamId, builtInMode, _callback);

    }

    /**
     * Retrieve paginated list of video processing configurations
     * Retrieves a paginated list of video processing configurations associated with the provided API key.
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param builtInMode Filters results based on the built-in mode: - &#x60;INCLUDE&#x60;: Includes built-in configurations in the result. - &#x60;EXCLUDE&#x60;: Excludes built-in configurations from the result. - &#x60;ONLY&#x60;: Only returns built-in configurations in the result.  (optional, default to INCLUDE)
     * @return VideoProcessingConfigurationsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of video processing configuration items. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingConfigurationsPage getVideoProcessingConfigurations(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum builtInMode) throws ApiException {
        ApiResponse<VideoProcessingConfigurationsPage> localVarResp = getVideoProcessingConfigurationsWithHttpInfo(pageNumber, pageSize, sortDirection, sortBy, teamId, builtInMode);
        return localVarResp.getData();
    }

    /**
     * Retrieve paginated list of video processing configurations
     * Retrieves a paginated list of video processing configurations associated with the provided API key.
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param builtInMode Filters results based on the built-in mode: - &#x60;INCLUDE&#x60;: Includes built-in configurations in the result. - &#x60;EXCLUDE&#x60;: Excludes built-in configurations from the result. - &#x60;ONLY&#x60;: Only returns built-in configurations in the result.  (optional, default to INCLUDE)
     * @return ApiResponse&lt;VideoProcessingConfigurationsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of video processing configuration items. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingConfigurationsPage> getVideoProcessingConfigurationsWithHttpInfo(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum builtInMode) throws ApiException {
        okhttp3.Call localVarCall = getVideoProcessingConfigurationsValidateBeforeCall(pageNumber, pageSize, sortDirection, sortBy, teamId, builtInMode, null);
        Type localVarReturnType = new TypeToken<VideoProcessingConfigurationsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve paginated list of video processing configurations (asynchronously)
     * Retrieves a paginated list of video processing configurations associated with the provided API key.
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param builtInMode Filters results based on the built-in mode: - &#x60;INCLUDE&#x60;: Includes built-in configurations in the result. - &#x60;EXCLUDE&#x60;: Excludes built-in configurations from the result. - &#x60;ONLY&#x60;: Only returns built-in configurations in the result.  (optional, default to INCLUDE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of video processing configuration items. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoProcessingConfigurationsAsync(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum builtInMode, final ApiCallback<VideoProcessingConfigurationsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoProcessingConfigurationsValidateBeforeCall(pageNumber, pageSize, sortDirection, sortBy, teamId, builtInMode, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingConfigurationsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
