/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.FilterModeEnum;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoProcessingConfiguration;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationPost;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationsPage;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingConfigurationApi extends BaseApi {

  public VideoProcessingConfigurationApi() {
    super(Configuration.getDefaultApiClient());
  }

  public VideoProcessingConfigurationApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create a new video processing configuration
   * Creates a new video processing configuration for the selected team.
   * @param videoProcessingConfigurationPost Request payload for creating a &#x60;VideoProcessingConfiguration&#x60; object, specifying the desired processing settings. (required)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @return VideoProcessingConfiguration
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingConfiguration createVideoProcessingConfiguration(@javax.annotation.Nonnull VideoProcessingConfigurationPost videoProcessingConfigurationPost, @javax.annotation.Nullable UUID selectTeamId) throws ApiException {
    return this.createVideoProcessingConfiguration(videoProcessingConfigurationPost, selectTeamId, Collections.emptyMap());
  }


  /**
   * Create a new video processing configuration
   * Creates a new video processing configuration for the selected team.
   * @param videoProcessingConfigurationPost Request payload for creating a &#x60;VideoProcessingConfiguration&#x60; object, specifying the desired processing settings. (required)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingConfiguration
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingConfiguration createVideoProcessingConfiguration(@javax.annotation.Nonnull VideoProcessingConfigurationPost videoProcessingConfigurationPost, @javax.annotation.Nullable UUID selectTeamId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = videoProcessingConfigurationPost;
    
    // verify the required parameter 'videoProcessingConfigurationPost' is set
    if (videoProcessingConfigurationPost == null) {
      throw new ApiException(400, "Missing the required parameter 'videoProcessingConfigurationPost' when calling createVideoProcessingConfiguration");
    }
    
    // create path and map variables
    String localVarPath = "/v1/processing-configurations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("selectTeamId", selectTeamId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingConfiguration> localVarReturnType = new TypeReference<VideoProcessingConfiguration>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a video processing configuration
   * Deletes a video processing configuration by its unique identifier.
   * @param confId The unique identifier for the video processing configuration. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteVideoProcessingConfigurationById(@javax.annotation.Nonnull UUID confId) throws ApiException {
    this.deleteVideoProcessingConfigurationById(confId, Collections.emptyMap());
  }


  /**
   * Delete a video processing configuration
   * Deletes a video processing configuration by its unique identifier.
   * @param confId The unique identifier for the video processing configuration. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteVideoProcessingConfigurationById(@javax.annotation.Nonnull UUID confId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'confId' is set
    if (confId == null) {
      throw new ApiException(400, "Missing the required parameter 'confId' when calling deleteVideoProcessingConfigurationById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/processing-configurations/{confId}"
      .replaceAll("\\{" + "confId" + "\\}", apiClient.escapeString(apiClient.parameterToString(confId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Retrieve video processing configuration details
   * Retrieves the details of a video processing configuration by its unique identifier.
   * @param confId The unique identifier for the video processing configuration. (required)
   * @return VideoProcessingConfiguration
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingConfiguration getVideoProcessingConfigurationById(@javax.annotation.Nonnull UUID confId) throws ApiException {
    return this.getVideoProcessingConfigurationById(confId, Collections.emptyMap());
  }


  /**
   * Retrieve video processing configuration details
   * Retrieves the details of a video processing configuration by its unique identifier.
   * @param confId The unique identifier for the video processing configuration. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingConfiguration
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingConfiguration getVideoProcessingConfigurationById(@javax.annotation.Nonnull UUID confId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'confId' is set
    if (confId == null) {
      throw new ApiException(400, "Missing the required parameter 'confId' when calling getVideoProcessingConfigurationById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/processing-configurations/{confId}"
      .replaceAll("\\{" + "confId" + "\\}", apiClient.escapeString(apiClient.parameterToString(confId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingConfiguration> localVarReturnType = new TypeReference<VideoProcessingConfiguration>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve paginated list of video processing configurations
   * Retrieves a paginated list of video processing configurations associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param builtInMode Filters results based on the built-in mode: - &#x60;INCLUDE&#x60;: Includes built-in configurations in the result. - &#x60;EXCLUDE&#x60;: Excludes built-in configurations from the result. - &#x60;ONLY&#x60;: Only returns built-in configurations in the result.  (optional, default to INCLUDE)
   * @return VideoProcessingConfigurationsPage
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingConfigurationsPage getVideoProcessingConfigurations(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable FilterModeEnum builtInMode) throws ApiException {
    return this.getVideoProcessingConfigurations(pageNumber, pageSize, sortDirection, sortBy, teamId, builtInMode, Collections.emptyMap());
  }


  /**
   * Retrieve paginated list of video processing configurations
   * Retrieves a paginated list of video processing configurations associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param builtInMode Filters results based on the built-in mode: - &#x60;INCLUDE&#x60;: Includes built-in configurations in the result. - &#x60;EXCLUDE&#x60;: Excludes built-in configurations from the result. - &#x60;ONLY&#x60;: Only returns built-in configurations in the result.  (optional, default to INCLUDE)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingConfigurationsPage
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingConfigurationsPage getVideoProcessingConfigurations(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable FilterModeEnum builtInMode, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/processing-configurations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("teamId", teamId));
    localVarQueryParams.addAll(apiClient.parameterToPair("builtInMode", builtInMode));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingConfigurationsPage> localVarReturnType = new TypeReference<VideoProcessingConfigurationsPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
