/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.Error;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.WebhookPublicKey;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class WebhookPublicKeyApi extends BaseApi {

  public WebhookPublicKeyApi() {
    super(Configuration.getDefaultApiClient());
  }

  public WebhookPublicKeyApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Retrieve a specific webhook public key
   * Retrieves the details of a specific webhook public key using its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @return WebhookPublicKey
   * @throws ApiException if fails to make API call
   */
  public WebhookPublicKey getWebhookPublicKeyById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.getWebhookPublicKeyById(id, Collections.emptyMap());
  }


  /**
   * Retrieve a specific webhook public key
   * Retrieves the details of a specific webhook public key using its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return WebhookPublicKey
   * @throws ApiException if fails to make API call
   */
  public WebhookPublicKey getWebhookPublicKeyById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getWebhookPublicKeyById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/public-keys/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<WebhookPublicKey> localVarReturnType = new TypeReference<WebhookPublicKey>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List all webhook public keys
   * Returns a list of webhook public keys used to verify webhook signatures.  Typically, only one key is active at a time.  During key rotation — which occurs at least every three months — two keys may temporarily exist to support a smooth transition. 
   * @return List&lt;WebhookPublicKey&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WebhookPublicKey> getWebhookPublicKeys() throws ApiException {
    return this.getWebhookPublicKeys(Collections.emptyMap());
  }


  /**
   * List all webhook public keys
   * Returns a list of webhook public keys used to verify webhook signatures.  Typically, only one key is active at a time.  During key rotation — which occurs at least every three months — two keys may temporarily exist to support a smooth transition. 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;WebhookPublicKey&gt;
   * @throws ApiException if fails to make API call
   */
  public List<WebhookPublicKey> getWebhookPublicKeys(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/public-keys";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<List<WebhookPublicKey>> localVarReturnType = new TypeReference<List<WebhookPublicKey>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
