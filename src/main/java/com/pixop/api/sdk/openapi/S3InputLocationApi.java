/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.S3InputLocation;
import com.pixop.api.sdk.model.dto.S3InputLocationPatch;
import com.pixop.api.sdk.model.dto.S3InputLocationPost;
import com.pixop.api.sdk.model.dto.S3InputLocationsPage;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class S3InputLocationApi extends BaseApi {

  public S3InputLocationApi() {
    super(Configuration.getDefaultApiClient());
  }

  public S3InputLocationApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create a new S3 input location
   * Creates a new S3 input location for the selected team, which can be used with the  [POST /v1/videos/in/s3/{inputLocationId}](https://docs.pixop.com/reference/createMasterVideoFromS3InputLocationId/)  endpoint to create a master video record from video data stored in the bucket defined in the S3 input location. 
   * @param s3InputLocationPost Fields required for creating a new S3 input location. (required)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @return S3InputLocation
   * @throws ApiException if fails to make API call
   */
  public S3InputLocation createS3InputLocation(@javax.annotation.Nonnull S3InputLocationPost s3InputLocationPost, @javax.annotation.Nullable UUID selectTeamId) throws ApiException {
    return this.createS3InputLocation(s3InputLocationPost, selectTeamId, Collections.emptyMap());
  }


  /**
   * Create a new S3 input location
   * Creates a new S3 input location for the selected team, which can be used with the  [POST /v1/videos/in/s3/{inputLocationId}](https://docs.pixop.com/reference/createMasterVideoFromS3InputLocationId/)  endpoint to create a master video record from video data stored in the bucket defined in the S3 input location. 
   * @param s3InputLocationPost Fields required for creating a new S3 input location. (required)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return S3InputLocation
   * @throws ApiException if fails to make API call
   */
  public S3InputLocation createS3InputLocation(@javax.annotation.Nonnull S3InputLocationPost s3InputLocationPost, @javax.annotation.Nullable UUID selectTeamId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = s3InputLocationPost;
    
    // verify the required parameter 's3InputLocationPost' is set
    if (s3InputLocationPost == null) {
      throw new ApiException(400, "Missing the required parameter 's3InputLocationPost' when calling createS3InputLocation");
    }
    
    // create path and map variables
    String localVarPath = "/v1/input-locations/s3";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("selectTeamId", selectTeamId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<S3InputLocation> localVarReturnType = new TypeReference<S3InputLocation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an S3 input location
   * Deletes an S3 input location by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteS3InputLocationById(@javax.annotation.Nonnull UUID id) throws ApiException {
    this.deleteS3InputLocationById(id, Collections.emptyMap());
  }


  /**
   * Delete an S3 input location
   * Deletes an S3 input location by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteS3InputLocationById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteS3InputLocationById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/input-locations/s3/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Retrieve S3 input location details
   * Retrieves the details of an S3 input location by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @return S3InputLocation
   * @throws ApiException if fails to make API call
   */
  public S3InputLocation getS3InputLocationById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.getS3InputLocationById(id, Collections.emptyMap());
  }


  /**
   * Retrieve S3 input location details
   * Retrieves the details of an S3 input location by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return S3InputLocation
   * @throws ApiException if fails to make API call
   */
  public S3InputLocation getS3InputLocationById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getS3InputLocationById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/input-locations/s3/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<S3InputLocation> localVarReturnType = new TypeReference<S3InputLocation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve paginated list of S3 input locations
   * Retrieves a paginated list of S3 input locations associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @return S3InputLocationsPage
   * @throws ApiException if fails to make API call
   */
  public S3InputLocationsPage getS3InputLocations(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId) throws ApiException {
    return this.getS3InputLocations(pageNumber, pageSize, sortDirection, sortBy, teamId, Collections.emptyMap());
  }


  /**
   * Retrieve paginated list of S3 input locations
   * Retrieves a paginated list of S3 input locations associated with the provided API key.
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return S3InputLocationsPage
   * @throws ApiException if fails to make API call
   */
  public S3InputLocationsPage getS3InputLocations(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/input-locations/s3";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("teamId", teamId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<S3InputLocationsPage> localVarReturnType = new TypeReference<S3InputLocationsPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an S3 input location
   * Updates the details of an existing S3 input location by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param s3InputLocationPatch Fields of an S3 input location that can be updated. (required)
   * @return S3InputLocation
   * @throws ApiException if fails to make API call
   */
  public S3InputLocation patchS3InputLocation(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull S3InputLocationPatch s3InputLocationPatch) throws ApiException {
    return this.patchS3InputLocation(id, s3InputLocationPatch, Collections.emptyMap());
  }


  /**
   * Update an S3 input location
   * Updates the details of an existing S3 input location by its unique identifier.
   * @param id The unique identifier for the object. (required)
   * @param s3InputLocationPatch Fields of an S3 input location that can be updated. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return S3InputLocation
   * @throws ApiException if fails to make API call
   */
  public S3InputLocation patchS3InputLocation(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull S3InputLocationPatch s3InputLocationPatch, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = s3InputLocationPatch;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchS3InputLocation");
    }
    
    // verify the required parameter 's3InputLocationPatch' is set
    if (s3InputLocationPatch == null) {
      throw new ApiException(400, "Missing the required parameter 's3InputLocationPatch' when calling patchS3InputLocation");
    }
    
    // create path and map variables
    String localVarPath = "/v1/input-locations/s3/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<S3InputLocation> localVarReturnType = new TypeReference<S3InputLocation>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
