/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.openapi;

import com.pixop.api.sdk.ApiCallback;
import com.pixop.api.sdk.ApiClient;
import com.pixop.api.sdk.ApiException;
import com.pixop.api.sdk.ApiResponse;
import com.pixop.api.sdk.Configuration;
import com.pixop.api.sdk.Pair;
import com.pixop.api.sdk.ProgressRequestBody;
import com.pixop.api.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pixop.api.sdk.model.dto.CreateMasterVideoFromHttps;
import com.pixop.api.sdk.model.dto.CreateMasterVideoFromS3;
import com.pixop.api.sdk.model.dto.CreateMasterVideoFromS3Bucket;
import com.pixop.api.sdk.model.dto.Error;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoInStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoInApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideoInApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoInApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for abandonFailedVideoInOperation
     * @param videoId The unique identifier for the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The \&quot;video in\&quot; operation was successfully abandoned, and the video record was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call abandonFailedVideoInOperationCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/in/abandon"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abandonFailedVideoInOperationValidateBeforeCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling abandonFailedVideoInOperation(Async)");
        }

        return abandonFailedVideoInOperationCall(videoId, _callback);

    }

    /**
     * Abandon a failed \&quot;video in\&quot; operation
     * Abandons a failed \&quot;video in\&quot; operation. This operation permanently deletes the video record and all associated data.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
     * @param videoId The unique identifier for the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The \&quot;video in\&quot; operation was successfully abandoned, and the video record was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public void abandonFailedVideoInOperation(UUID videoId) throws ApiException {
        abandonFailedVideoInOperationWithHttpInfo(videoId);
    }

    /**
     * Abandon a failed \&quot;video in\&quot; operation
     * Abandons a failed \&quot;video in\&quot; operation. This operation permanently deletes the video record and all associated data.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
     * @param videoId The unique identifier for the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The \&quot;video in\&quot; operation was successfully abandoned, and the video record was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> abandonFailedVideoInOperationWithHttpInfo(UUID videoId) throws ApiException {
        okhttp3.Call localVarCall = abandonFailedVideoInOperationValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Abandon a failed \&quot;video in\&quot; operation (asynchronously)
     * Abandons a failed \&quot;video in\&quot; operation. This operation permanently deletes the video record and all associated data.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
     * @param videoId The unique identifier for the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The \&quot;video in\&quot; operation was successfully abandoned, and the video record was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call abandonFailedVideoInOperationAsync(UUID videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abandonFailedVideoInOperationValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMasterVideoFromHttps
     * @param createMasterVideoFromHttps Parameters required for importing a video from an HTTPS URL into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param crc32c Optional CRC32C checksum of the video file, used for data integrity verification. (optional)
     * @param maxConcurrentConnections The maximum number of concurrent connections allowed for this import. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createMasterVideoFromHttpsCall(CreateMasterVideoFromHttps createMasterVideoFromHttps, Boolean fullIngestion, UUID selectTeamId, Long crc32c, Integer maxConcurrentConnections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMasterVideoFromHttps;

        // create path and map variables
        String localVarPath = "/v1/videos/in/https";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fullIngestion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullIngestion", fullIngestion));
        }

        if (selectTeamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectTeamId", selectTeamId));
        }

        if (crc32c != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crc32c", crc32c));
        }

        if (maxConcurrentConnections != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxConcurrentConnections", maxConcurrentConnections));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMasterVideoFromHttpsValidateBeforeCall(CreateMasterVideoFromHttps createMasterVideoFromHttps, Boolean fullIngestion, UUID selectTeamId, Long crc32c, Integer maxConcurrentConnections, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMasterVideoFromHttps' is set
        if (createMasterVideoFromHttps == null) {
            throw new ApiException("Missing the required parameter 'createMasterVideoFromHttps' when calling createMasterVideoFromHttps(Async)");
        }

        return createMasterVideoFromHttpsCall(createMasterVideoFromHttps, fullIngestion, selectTeamId, crc32c, maxConcurrentConnections, _callback);

    }

    /**
     * Copy video data from an HTTPS URL into the Pixop Platform
     * Copies video data from an HTTPS URL into the Pixop Platform, making it available for processing.  A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided HTTPS URL to Pixop is initiated.   The URL must support **range requests** and remain accessible for the entire duration of the copy process.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Notes:** - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned if the URL is invalid, inaccessible, or does not support range requests. 
     * @param createMasterVideoFromHttps Parameters required for importing a video from an HTTPS URL into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param crc32c Optional CRC32C checksum of the video file, used for data integrity verification. (optional)
     * @param maxConcurrentConnections The maximum number of concurrent connections allowed for this import. (optional, default to 10)
     * @return VideoInStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoInStatus createMasterVideoFromHttps(CreateMasterVideoFromHttps createMasterVideoFromHttps, Boolean fullIngestion, UUID selectTeamId, Long crc32c, Integer maxConcurrentConnections) throws ApiException {
        ApiResponse<VideoInStatus> localVarResp = createMasterVideoFromHttpsWithHttpInfo(createMasterVideoFromHttps, fullIngestion, selectTeamId, crc32c, maxConcurrentConnections);
        return localVarResp.getData();
    }

    /**
     * Copy video data from an HTTPS URL into the Pixop Platform
     * Copies video data from an HTTPS URL into the Pixop Platform, making it available for processing.  A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided HTTPS URL to Pixop is initiated.   The URL must support **range requests** and remain accessible for the entire duration of the copy process.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Notes:** - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned if the URL is invalid, inaccessible, or does not support range requests. 
     * @param createMasterVideoFromHttps Parameters required for importing a video from an HTTPS URL into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param crc32c Optional CRC32C checksum of the video file, used for data integrity verification. (optional)
     * @param maxConcurrentConnections The maximum number of concurrent connections allowed for this import. (optional, default to 10)
     * @return ApiResponse&lt;VideoInStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoInStatus> createMasterVideoFromHttpsWithHttpInfo(CreateMasterVideoFromHttps createMasterVideoFromHttps, Boolean fullIngestion, UUID selectTeamId, Long crc32c, Integer maxConcurrentConnections) throws ApiException {
        okhttp3.Call localVarCall = createMasterVideoFromHttpsValidateBeforeCall(createMasterVideoFromHttps, fullIngestion, selectTeamId, crc32c, maxConcurrentConnections, null);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy video data from an HTTPS URL into the Pixop Platform (asynchronously)
     * Copies video data from an HTTPS URL into the Pixop Platform, making it available for processing.  A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided HTTPS URL to Pixop is initiated.   The URL must support **range requests** and remain accessible for the entire duration of the copy process.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Notes:** - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned if the URL is invalid, inaccessible, or does not support range requests. 
     * @param createMasterVideoFromHttps Parameters required for importing a video from an HTTPS URL into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param crc32c Optional CRC32C checksum of the video file, used for data integrity verification. (optional)
     * @param maxConcurrentConnections The maximum number of concurrent connections allowed for this import. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createMasterVideoFromHttpsAsync(CreateMasterVideoFromHttps createMasterVideoFromHttps, Boolean fullIngestion, UUID selectTeamId, Long crc32c, Integer maxConcurrentConnections, final ApiCallback<VideoInStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMasterVideoFromHttpsValidateBeforeCall(createMasterVideoFromHttps, fullIngestion, selectTeamId, crc32c, maxConcurrentConnections, _callback);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMasterVideoFromS3Bucket
     * @param createMasterVideoFromS3Bucket Parameters required for importing a video from a specified S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createMasterVideoFromS3BucketCall(CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket, Boolean fullIngestion, UUID selectTeamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMasterVideoFromS3Bucket;

        // create path and map variables
        String localVarPath = "/v1/videos/in/s3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fullIngestion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullIngestion", fullIngestion));
        }

        if (selectTeamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectTeamId", selectTeamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMasterVideoFromS3BucketValidateBeforeCall(CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket, Boolean fullIngestion, UUID selectTeamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMasterVideoFromS3Bucket' is set
        if (createMasterVideoFromS3Bucket == null) {
            throw new ApiException("Missing the required parameter 'createMasterVideoFromS3Bucket' when calling createMasterVideoFromS3Bucket(Async)");
        }

        return createMasterVideoFromS3BucketCall(createMasterVideoFromS3Bucket, fullIngestion, selectTeamId, _callback);

    }

    /**
     * Copy video data from an S3 bucket into the Pixop Platform
     * Copies video data from an S3 bucket into the Pixop Platform, making it available for processing. A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided S3 bucket to Pixop is initiated.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Note**: - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned for other reasons, such as invalid credentials. - A &#x60;404 Not Found&#x60; response is returned if the bucket, or object does not exist. 
     * @param createMasterVideoFromS3Bucket Parameters required for importing a video from a specified S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @return VideoInStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoInStatus createMasterVideoFromS3Bucket(CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket, Boolean fullIngestion, UUID selectTeamId) throws ApiException {
        ApiResponse<VideoInStatus> localVarResp = createMasterVideoFromS3BucketWithHttpInfo(createMasterVideoFromS3Bucket, fullIngestion, selectTeamId);
        return localVarResp.getData();
    }

    /**
     * Copy video data from an S3 bucket into the Pixop Platform
     * Copies video data from an S3 bucket into the Pixop Platform, making it available for processing. A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided S3 bucket to Pixop is initiated.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Note**: - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned for other reasons, such as invalid credentials. - A &#x60;404 Not Found&#x60; response is returned if the bucket, or object does not exist. 
     * @param createMasterVideoFromS3Bucket Parameters required for importing a video from a specified S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @return ApiResponse&lt;VideoInStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoInStatus> createMasterVideoFromS3BucketWithHttpInfo(CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket, Boolean fullIngestion, UUID selectTeamId) throws ApiException {
        okhttp3.Call localVarCall = createMasterVideoFromS3BucketValidateBeforeCall(createMasterVideoFromS3Bucket, fullIngestion, selectTeamId, null);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy video data from an S3 bucket into the Pixop Platform (asynchronously)
     * Copies video data from an S3 bucket into the Pixop Platform, making it available for processing. A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided S3 bucket to Pixop is initiated.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Note**: - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned for other reasons, such as invalid credentials. - A &#x60;404 Not Found&#x60; response is returned if the bucket, or object does not exist. 
     * @param createMasterVideoFromS3Bucket Parameters required for importing a video from a specified S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createMasterVideoFromS3BucketAsync(CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket, Boolean fullIngestion, UUID selectTeamId, final ApiCallback<VideoInStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMasterVideoFromS3BucketValidateBeforeCall(createMasterVideoFromS3Bucket, fullIngestion, selectTeamId, _callback);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMasterVideoFromS3InputLocationId
     * @param inputLocationId The unique identifier for the input location. (required)
     * @param createMasterVideoFromS3 Parameters required for importing a video from an S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createMasterVideoFromS3InputLocationIdCall(UUID inputLocationId, CreateMasterVideoFromS3 createMasterVideoFromS3, Boolean fullIngestion, UUID selectTeamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMasterVideoFromS3;

        // create path and map variables
        String localVarPath = "/v1/videos/in/s3/{inputLocationId}"
            .replace("{" + "inputLocationId" + "}", localVarApiClient.escapeString(inputLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fullIngestion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullIngestion", fullIngestion));
        }

        if (selectTeamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectTeamId", selectTeamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMasterVideoFromS3InputLocationIdValidateBeforeCall(UUID inputLocationId, CreateMasterVideoFromS3 createMasterVideoFromS3, Boolean fullIngestion, UUID selectTeamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inputLocationId' is set
        if (inputLocationId == null) {
            throw new ApiException("Missing the required parameter 'inputLocationId' when calling createMasterVideoFromS3InputLocationId(Async)");
        }

        // verify the required parameter 'createMasterVideoFromS3' is set
        if (createMasterVideoFromS3 == null) {
            throw new ApiException("Missing the required parameter 'createMasterVideoFromS3' when calling createMasterVideoFromS3InputLocationId(Async)");
        }

        return createMasterVideoFromS3InputLocationIdCall(inputLocationId, createMasterVideoFromS3, fullIngestion, selectTeamId, _callback);

    }

    /**
     * Copy video data from an S3 input location into the Pixop Platform
     * Copies video data from a preconfigured S3 input location into the Pixop Platform, creating a new master video record for the selected team.  This is similar to [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/), but uses the &#x60;inputLocationId&#x60; for the S3 bucket reference. 
     * @param inputLocationId The unique identifier for the input location. (required)
     * @param createMasterVideoFromS3 Parameters required for importing a video from an S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @return VideoInStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoInStatus createMasterVideoFromS3InputLocationId(UUID inputLocationId, CreateMasterVideoFromS3 createMasterVideoFromS3, Boolean fullIngestion, UUID selectTeamId) throws ApiException {
        ApiResponse<VideoInStatus> localVarResp = createMasterVideoFromS3InputLocationIdWithHttpInfo(inputLocationId, createMasterVideoFromS3, fullIngestion, selectTeamId);
        return localVarResp.getData();
    }

    /**
     * Copy video data from an S3 input location into the Pixop Platform
     * Copies video data from a preconfigured S3 input location into the Pixop Platform, creating a new master video record for the selected team.  This is similar to [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/), but uses the &#x60;inputLocationId&#x60; for the S3 bucket reference. 
     * @param inputLocationId The unique identifier for the input location. (required)
     * @param createMasterVideoFromS3 Parameters required for importing a video from an S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @return ApiResponse&lt;VideoInStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoInStatus> createMasterVideoFromS3InputLocationIdWithHttpInfo(UUID inputLocationId, CreateMasterVideoFromS3 createMasterVideoFromS3, Boolean fullIngestion, UUID selectTeamId) throws ApiException {
        okhttp3.Call localVarCall = createMasterVideoFromS3InputLocationIdValidateBeforeCall(inputLocationId, createMasterVideoFromS3, fullIngestion, selectTeamId, null);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy video data from an S3 input location into the Pixop Platform (asynchronously)
     * Copies video data from a preconfigured S3 input location into the Pixop Platform, creating a new master video record for the selected team.  This is similar to [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/), but uses the &#x60;inputLocationId&#x60; for the S3 bucket reference. 
     * @param inputLocationId The unique identifier for the input location. (required)
     * @param createMasterVideoFromS3 Parameters required for importing a video from an S3 bucket into the Pixop Platform. (required)
     * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
     * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createMasterVideoFromS3InputLocationIdAsync(UUID inputLocationId, CreateMasterVideoFromS3 createMasterVideoFromS3, Boolean fullIngestion, UUID selectTeamId, final ApiCallback<VideoInStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMasterVideoFromS3InputLocationIdValidateBeforeCall(inputLocationId, createMasterVideoFromS3, fullIngestion, selectTeamId, _callback);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoInStatus
     * @param videoId The unique identifier for the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video in\&quot; operation has not been initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoInStatusCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/in/status"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoInStatusValidateBeforeCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoInStatus(Async)");
        }

        return getVideoInStatusCall(videoId, _callback);

    }

    /**
     * Retrieve \&quot;video in\&quot; status
     * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/in/https](https://docs.pixop.com/reference/createMasterVideoFromHttps/) - [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/) - [POST /v1/videos/in/s3/{inputLocationId}](https://docs.pixop.com/reference/createMasterVideoFromS3InputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @return VideoInStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video in\&quot; operation has not been initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoInStatus getVideoInStatus(UUID videoId) throws ApiException {
        ApiResponse<VideoInStatus> localVarResp = getVideoInStatusWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Retrieve \&quot;video in\&quot; status
     * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/in/https](https://docs.pixop.com/reference/createMasterVideoFromHttps/) - [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/) - [POST /v1/videos/in/s3/{inputLocationId}](https://docs.pixop.com/reference/createMasterVideoFromS3InputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @return ApiResponse&lt;VideoInStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video in\&quot; operation has not been initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoInStatus> getVideoInStatusWithHttpInfo(UUID videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoInStatusValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve \&quot;video in\&quot; status (asynchronously)
     * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/in/https](https://docs.pixop.com/reference/createMasterVideoFromHttps/) - [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/) - [POST /v1/videos/in/s3/{inputLocationId}](https://docs.pixop.com/reference/createMasterVideoFromS3InputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video in\&quot; operation has not been initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoInStatusAsync(UUID videoId, final ApiCallback<VideoInStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoInStatusValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restartFailedVideoInOperation
     * @param videoId The unique identifier for the video. (required)
     * @param skipChecksumValidation Specifies whether to skip checksum validation for the completion of the \&quot;video in\&quot; operation.  This is useful when restarting a \&quot;video in\&quot; operation that was initiated with an incorrect checksum and has failed because of that.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call restartFailedVideoInOperationCall(UUID videoId, Boolean skipChecksumValidation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/in/restart"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipChecksumValidation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipChecksumValidation", skipChecksumValidation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartFailedVideoInOperationValidateBeforeCall(UUID videoId, Boolean skipChecksumValidation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling restartFailedVideoInOperation(Async)");
        }

        return restartFailedVideoInOperationCall(videoId, skipChecksumValidation, _callback);

    }

    /**
     * Restart a failed \&quot;video in\&quot; operation
     * Restarts a failed \&quot;video in\&quot; operation. The operation resumes from where it previously failed.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
     * @param videoId The unique identifier for the video. (required)
     * @param skipChecksumValidation Specifies whether to skip checksum validation for the completion of the \&quot;video in\&quot; operation.  This is useful when restarting a \&quot;video in\&quot; operation that was initiated with an incorrect checksum and has failed because of that.  (optional, default to false)
     * @return VideoInStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoInStatus restartFailedVideoInOperation(UUID videoId, Boolean skipChecksumValidation) throws ApiException {
        ApiResponse<VideoInStatus> localVarResp = restartFailedVideoInOperationWithHttpInfo(videoId, skipChecksumValidation);
        return localVarResp.getData();
    }

    /**
     * Restart a failed \&quot;video in\&quot; operation
     * Restarts a failed \&quot;video in\&quot; operation. The operation resumes from where it previously failed.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
     * @param videoId The unique identifier for the video. (required)
     * @param skipChecksumValidation Specifies whether to skip checksum validation for the completion of the \&quot;video in\&quot; operation.  This is useful when restarting a \&quot;video in\&quot; operation that was initiated with an incorrect checksum and has failed because of that.  (optional, default to false)
     * @return ApiResponse&lt;VideoInStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoInStatus> restartFailedVideoInOperationWithHttpInfo(UUID videoId, Boolean skipChecksumValidation) throws ApiException {
        okhttp3.Call localVarCall = restartFailedVideoInOperationValidateBeforeCall(videoId, skipChecksumValidation, null);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restart a failed \&quot;video in\&quot; operation (asynchronously)
     * Restarts a failed \&quot;video in\&quot; operation. The operation resumes from where it previously failed.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
     * @param videoId The unique identifier for the video. (required)
     * @param skipChecksumValidation Specifies whether to skip checksum validation for the completion of the \&quot;video in\&quot; operation.  This is useful when restarting a \&quot;video in\&quot; operation that was initiated with an incorrect checksum and has failed because of that.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of a master video upload and ingestion. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call restartFailedVideoInOperationAsync(UUID videoId, Boolean skipChecksumValidation, final ApiCallback<VideoInStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartFailedVideoInOperationValidateBeforeCall(videoId, skipChecksumValidation, _callback);
        Type localVarReturnType = new TypeToken<VideoInStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
