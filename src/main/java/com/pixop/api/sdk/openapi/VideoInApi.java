/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.4
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.CreateMasterVideoFromHttps;
import com.pixop.api.sdk.model.dto.CreateMasterVideoFromS3;
import com.pixop.api.sdk.model.dto.CreateMasterVideoFromS3Bucket;
import com.pixop.api.sdk.model.dto.Error;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoInStatus;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-03T10:21:06.144469555Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoInApi extends BaseApi {

  public VideoInApi() {
    super(Configuration.getDefaultApiClient());
  }

  public VideoInApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Abandon a failed \&quot;video in\&quot; operation
   * Abandons a failed \&quot;video in\&quot; operation. This operation permanently deletes the video record and all associated data.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
   * @param videoId The unique identifier for the video. (required)
   * @throws ApiException if fails to make API call
   */
  public void abandonFailedVideoInOperation(@javax.annotation.Nonnull UUID videoId) throws ApiException {
    this.abandonFailedVideoInOperation(videoId, Collections.emptyMap());
  }


  /**
   * Abandon a failed \&quot;video in\&quot; operation
   * Abandons a failed \&quot;video in\&quot; operation. This operation permanently deletes the video record and all associated data.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void abandonFailedVideoInOperation(@javax.annotation.Nonnull UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling abandonFailedVideoInOperation");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/in/abandon"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Copy video data from an HTTPS URL into the Pixop Platform
   * Copies video data from an HTTPS URL into the Pixop Platform, making it available for processing.  A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided HTTPS URL to Pixop is initiated.   The URL must support **range requests** and remain accessible for the entire duration of the copy process.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Notes:** - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned if the URL is invalid, inaccessible, or does not support range requests. 
   * @param createMasterVideoFromHttps Parameters required for importing a video from an HTTPS URL into the Pixop Platform. (required)
   * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param crc32c Optional CRC32C checksum of the video file, used for data integrity verification. (optional)
   * @param maxConcurrentConnections The maximum number of concurrent connections allowed for this import. (optional, default to 10)
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus createMasterVideoFromHttps(@javax.annotation.Nonnull CreateMasterVideoFromHttps createMasterVideoFromHttps, @javax.annotation.Nullable Boolean fullIngestion, @javax.annotation.Nullable UUID selectTeamId, @javax.annotation.Nullable Long crc32c, @javax.annotation.Nullable Integer maxConcurrentConnections) throws ApiException {
    return this.createMasterVideoFromHttps(createMasterVideoFromHttps, fullIngestion, selectTeamId, crc32c, maxConcurrentConnections, Collections.emptyMap());
  }


  /**
   * Copy video data from an HTTPS URL into the Pixop Platform
   * Copies video data from an HTTPS URL into the Pixop Platform, making it available for processing.  A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided HTTPS URL to Pixop is initiated.   The URL must support **range requests** and remain accessible for the entire duration of the copy process.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Notes:** - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned if the URL is invalid, inaccessible, or does not support range requests. 
   * @param createMasterVideoFromHttps Parameters required for importing a video from an HTTPS URL into the Pixop Platform. (required)
   * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param crc32c Optional CRC32C checksum of the video file, used for data integrity verification. (optional)
   * @param maxConcurrentConnections The maximum number of concurrent connections allowed for this import. (optional, default to 10)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus createMasterVideoFromHttps(@javax.annotation.Nonnull CreateMasterVideoFromHttps createMasterVideoFromHttps, @javax.annotation.Nullable Boolean fullIngestion, @javax.annotation.Nullable UUID selectTeamId, @javax.annotation.Nullable Long crc32c, @javax.annotation.Nullable Integer maxConcurrentConnections, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createMasterVideoFromHttps;
    
    // verify the required parameter 'createMasterVideoFromHttps' is set
    if (createMasterVideoFromHttps == null) {
      throw new ApiException(400, "Missing the required parameter 'createMasterVideoFromHttps' when calling createMasterVideoFromHttps");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/in/https";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("fullIngestion", fullIngestion));
    localVarQueryParams.addAll(apiClient.parameterToPair("selectTeamId", selectTeamId));
    localVarQueryParams.addAll(apiClient.parameterToPair("crc32c", crc32c));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxConcurrentConnections", maxConcurrentConnections));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoInStatus> localVarReturnType = new TypeReference<VideoInStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Copy video data from an S3 bucket into the Pixop Platform
   * Copies video data from an S3 bucket into the Pixop Platform, making it available for processing. A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided S3 bucket to Pixop is initiated.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Note**: - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned for other reasons, such as invalid credentials. - A &#x60;404 Not Found&#x60; response is returned if the bucket, or object does not exist. 
   * @param createMasterVideoFromS3Bucket Parameters required for importing a video from a specified S3 bucket into the Pixop Platform. (required)
   * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus createMasterVideoFromS3Bucket(@javax.annotation.Nonnull CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket, @javax.annotation.Nullable Boolean fullIngestion, @javax.annotation.Nullable UUID selectTeamId) throws ApiException {
    return this.createMasterVideoFromS3Bucket(createMasterVideoFromS3Bucket, fullIngestion, selectTeamId, Collections.emptyMap());
  }


  /**
   * Copy video data from an S3 bucket into the Pixop Platform
   * Copies video data from an S3 bucket into the Pixop Platform, making it available for processing. A new master video record is created for the selected team, and an asynchronous multipart copy operation from the provided S3 bucket to Pixop is initiated.  The status of the copy operation can be tracked using: - [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_in&#x60; and/or &#x60;video_in_ingestion&#x60; events to receive real-time updates  The &#x60;videoId&#x60; is returned in the response.  **Workflow:** 1. **Copy Operation**: Once complete, the status updates to &#x60;DONE&#x60;. 2. **Ingestion Process**: If &#x60;FullIngestion&#x60; is &#x60;true&#x60;, Pixop extracts thumbnails, full frames, and a web video. 3. **Free 10-Second Clip**: Unless disabled for the team, a free 10-second clip is automatically created and becomes available via [GET /v1/videos/{videoId}/derived](https://docs.pixop.com/reference/getDerivedVideos/).     This clip is treated as a separate video and will trigger its own &#x60;clip_processing&#x60; and &#x60;clip_ingestion&#x60; webhook events under a new &#x60;videoId&#x60;.  **Note**: - If the video size exceeds **500 GB**, a &#x60;400 Bad Request&#x60; response is returned. - A &#x60;400 Bad Request&#x60; may also be returned for other reasons, such as invalid credentials. - A &#x60;404 Not Found&#x60; response is returned if the bucket, or object does not exist. 
   * @param createMasterVideoFromS3Bucket Parameters required for importing a video from a specified S3 bucket into the Pixop Platform. (required)
   * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus createMasterVideoFromS3Bucket(@javax.annotation.Nonnull CreateMasterVideoFromS3Bucket createMasterVideoFromS3Bucket, @javax.annotation.Nullable Boolean fullIngestion, @javax.annotation.Nullable UUID selectTeamId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createMasterVideoFromS3Bucket;
    
    // verify the required parameter 'createMasterVideoFromS3Bucket' is set
    if (createMasterVideoFromS3Bucket == null) {
      throw new ApiException(400, "Missing the required parameter 'createMasterVideoFromS3Bucket' when calling createMasterVideoFromS3Bucket");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/in/s3";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("fullIngestion", fullIngestion));
    localVarQueryParams.addAll(apiClient.parameterToPair("selectTeamId", selectTeamId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoInStatus> localVarReturnType = new TypeReference<VideoInStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Copy video data from an S3 input location into the Pixop Platform
   * Copies video data from a preconfigured S3 input location into the Pixop Platform, creating a new master video record for the selected team.  This is similar to [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/), but uses the &#x60;inputLocationId&#x60; for the S3 bucket reference. 
   * @param inputLocationId The unique identifier for the input location. (required)
   * @param createMasterVideoFromS3 Parameters required for importing a video from an S3 bucket into the Pixop Platform. (required)
   * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus createMasterVideoFromS3InputLocationId(@javax.annotation.Nonnull UUID inputLocationId, @javax.annotation.Nonnull CreateMasterVideoFromS3 createMasterVideoFromS3, @javax.annotation.Nullable Boolean fullIngestion, @javax.annotation.Nullable UUID selectTeamId) throws ApiException {
    return this.createMasterVideoFromS3InputLocationId(inputLocationId, createMasterVideoFromS3, fullIngestion, selectTeamId, Collections.emptyMap());
  }


  /**
   * Copy video data from an S3 input location into the Pixop Platform
   * Copies video data from a preconfigured S3 input location into the Pixop Platform, creating a new master video record for the selected team.  This is similar to [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/), but uses the &#x60;inputLocationId&#x60; for the S3 bucket reference. 
   * @param inputLocationId The unique identifier for the input location. (required)
   * @param createMasterVideoFromS3 Parameters required for importing a video from an S3 bucket into the Pixop Platform. (required)
   * @param fullIngestion Determines the ingestion level: - &#x60;false&#x60;: Only metadata is ingested. Thumbnails, web video artifacts, quality assessments, and deep scanning type analysis are not performed. This mode is suitable for third-party integrations that process videos in an ephemeral manner. - &#x60;true&#x60;: Full ingestion is performed, including metadata, thumbnails, web video artifacts, quality assessments, and deep scanning analysis. This mode is used for videos that need to be available on the web application.  (optional, default to false)
   * @param selectTeamId Specifies the team ID for the operation.  - For &#x60;POST&#x60; requests, assigns the new object to the specified team. - For &#x60;GET&#x60; requests, retrieves data for the specified team. If not provided, defaults to the ID of the default team associated with the API key.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus createMasterVideoFromS3InputLocationId(@javax.annotation.Nonnull UUID inputLocationId, @javax.annotation.Nonnull CreateMasterVideoFromS3 createMasterVideoFromS3, @javax.annotation.Nullable Boolean fullIngestion, @javax.annotation.Nullable UUID selectTeamId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createMasterVideoFromS3;
    
    // verify the required parameter 'inputLocationId' is set
    if (inputLocationId == null) {
      throw new ApiException(400, "Missing the required parameter 'inputLocationId' when calling createMasterVideoFromS3InputLocationId");
    }
    
    // verify the required parameter 'createMasterVideoFromS3' is set
    if (createMasterVideoFromS3 == null) {
      throw new ApiException(400, "Missing the required parameter 'createMasterVideoFromS3' when calling createMasterVideoFromS3InputLocationId");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/in/s3/{inputLocationId}"
      .replaceAll("\\{" + "inputLocationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(inputLocationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("fullIngestion", fullIngestion));
    localVarQueryParams.addAll(apiClient.parameterToPair("selectTeamId", selectTeamId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoInStatus> localVarReturnType = new TypeReference<VideoInStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve \&quot;video in\&quot; status
   * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/in/https](https://docs.pixop.com/reference/createMasterVideoFromHttps/) - [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/) - [POST /v1/videos/in/s3/{inputLocationId}](https://docs.pixop.com/reference/createMasterVideoFromS3InputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
   * @param videoId The unique identifier for the video. (required)
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus getVideoInStatus(@javax.annotation.Nonnull UUID videoId) throws ApiException {
    return this.getVideoInStatus(videoId, Collections.emptyMap());
  }


  /**
   * Retrieve \&quot;video in\&quot; status
   * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/in/https](https://docs.pixop.com/reference/createMasterVideoFromHttps/) - [POST /v1/videos/in/s3](https://docs.pixop.com/reference/createMasterVideoFromS3Bucket/) - [POST /v1/videos/in/s3/{inputLocationId}](https://docs.pixop.com/reference/createMasterVideoFromS3InputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
   * @param videoId The unique identifier for the video. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus getVideoInStatus(@javax.annotation.Nonnull UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling getVideoInStatus");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/in/status"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoInStatus> localVarReturnType = new TypeReference<VideoInStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Restart a failed \&quot;video in\&quot; operation
   * Restarts a failed \&quot;video in\&quot; operation. The operation resumes from where it previously failed.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param skipChecksumValidation Specifies whether to skip checksum validation for the completion of the \&quot;video in\&quot; operation.  This is useful when restarting a \&quot;video in\&quot; operation that was initiated with an incorrect checksum and has failed because of that.  (optional, default to false)
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus restartFailedVideoInOperation(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable Boolean skipChecksumValidation) throws ApiException {
    return this.restartFailedVideoInOperation(videoId, skipChecksumValidation, Collections.emptyMap());
  }


  /**
   * Restart a failed \&quot;video in\&quot; operation
   * Restarts a failed \&quot;video in\&quot; operation. The operation resumes from where it previously failed.  **Note**: This is only allowed when &#x60;uploadStatus&#x60; is &#x60;FAILED&#x60;. Otherwise, a &#x60;409 Conflict&#x60; response is returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param skipChecksumValidation Specifies whether to skip checksum validation for the completion of the \&quot;video in\&quot; operation.  This is useful when restarting a \&quot;video in\&quot; operation that was initiated with an incorrect checksum and has failed because of that.  (optional, default to false)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoInStatus
   * @throws ApiException if fails to make API call
   */
  public VideoInStatus restartFailedVideoInOperation(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable Boolean skipChecksumValidation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling restartFailedVideoInOperation");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/in/restart"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("skipChecksumValidation", skipChecksumValidation));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoInStatus> localVarReturnType = new TypeReference<VideoInStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
