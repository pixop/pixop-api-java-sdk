/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.3
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.openapi;

import com.pixop.api.sdk.ApiCallback;
import com.pixop.api.sdk.ApiClient;
import com.pixop.api.sdk.ApiException;
import com.pixop.api.sdk.ApiResponse;
import com.pixop.api.sdk.Configuration;
import com.pixop.api.sdk.Pair;
import com.pixop.api.sdk.ProgressRequestBody;
import com.pixop.api.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pixop.api.sdk.model.dto.CopyVideoDataToS3BucketRequest;
import com.pixop.api.sdk.model.dto.CopyVideoDataToS3OutputLocationIdRequest;
import com.pixop.api.sdk.model.dto.Error;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoDownloadUrl;
import com.pixop.api.sdk.model.dto.VideoOutStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoOutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideoOutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoOutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for abandonFailedVideoOutOperation
     * @param videoId The unique identifier for the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully abandoned the \&quot;video out\&quot; operation and cleaned up resources. The video record remains intact. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call abandonFailedVideoOutOperationCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/out/abandon"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abandonFailedVideoOutOperationValidateBeforeCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling abandonFailedVideoOutOperation(Async)");
        }

        return abandonFailedVideoOutOperationCall(videoId, _callback);

    }

    /**
     * Abandon a failed \&quot;video out\&quot; operation
     * Abandons a failed \&quot;video out\&quot; operation and releases resources allocated for the multipart upload process.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to abandon an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
     * @param videoId The unique identifier for the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully abandoned the \&quot;video out\&quot; operation and cleaned up resources. The video record remains intact. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public void abandonFailedVideoOutOperation(UUID videoId) throws ApiException {
        abandonFailedVideoOutOperationWithHttpInfo(videoId);
    }

    /**
     * Abandon a failed \&quot;video out\&quot; operation
     * Abandons a failed \&quot;video out\&quot; operation and releases resources allocated for the multipart upload process.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to abandon an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
     * @param videoId The unique identifier for the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully abandoned the \&quot;video out\&quot; operation and cleaned up resources. The video record remains intact. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> abandonFailedVideoOutOperationWithHttpInfo(UUID videoId) throws ApiException {
        okhttp3.Call localVarCall = abandonFailedVideoOutOperationValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Abandon a failed \&quot;video out\&quot; operation (asynchronously)
     * Abandons a failed \&quot;video out\&quot; operation and releases resources allocated for the multipart upload process.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to abandon an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
     * @param videoId The unique identifier for the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully abandoned the \&quot;video out\&quot; operation and cleaned up resources. The video record remains intact. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call abandonFailedVideoOutOperationAsync(UUID videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abandonFailedVideoOutOperationValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyVideoDataToS3Bucket
     * @param videoId The unique identifier for the video. (required)
     * @param copyVideoDataToS3BucketRequest Parameters required for exporting a video from the Pixop Platform into a specified S3 bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call copyVideoDataToS3BucketCall(UUID videoId, CopyVideoDataToS3BucketRequest copyVideoDataToS3BucketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyVideoDataToS3BucketRequest;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/out/s3"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyVideoDataToS3BucketValidateBeforeCall(UUID videoId, CopyVideoDataToS3BucketRequest copyVideoDataToS3BucketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling copyVideoDataToS3Bucket(Async)");
        }

        // verify the required parameter 'copyVideoDataToS3BucketRequest' is set
        if (copyVideoDataToS3BucketRequest == null) {
            throw new ApiException("Missing the required parameter 'copyVideoDataToS3BucketRequest' when calling copyVideoDataToS3Bucket(Async)");
        }

        return copyVideoDataToS3BucketCall(videoId, copyVideoDataToS3BucketRequest, _callback);

    }

    /**
     * Copy video data to an S3 bucket
     * Initiates an asynchronous multipart copy operation to transfer video data from the Pixop Platform to the specified S3 bucket.  - The video data is **not ready for copy** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  The status of this operation can be tracked using: - [GET /v1/videos/{videoId}/out/status](https://docs.pixop.com/reference/getVideoOutStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_out&#x60; events to receive real-time updates  - When the operation succeeds, the status updates to &#x60;DONE&#x60;. If it fails, the status updates to &#x60;FAILED&#x60;.  **Retry and Abandon Options:** - Restart a &#x60;FAILED&#x60; operation using &#x60;POST /v1/videos/{videoId}/out/restart&#x60;. - Abandon a &#x60;FAILED&#x60; operation and free up resources using &#x60;POST /v1/videos/{videoId}/out/abandon&#x60;.  **Notes:**   - Only one \&quot;video out\&quot; operation can run per video at a time. Starting a new operation will result in a &#x60;409 Conflict&#x60; response.   - If the specified object key already exists in the S3 bucket, or if the video data is **not ready for copy**, a &#x60;409 Conflict&#x60; response is also returned. 
     * @param videoId The unique identifier for the video. (required)
     * @param copyVideoDataToS3BucketRequest Parameters required for exporting a video from the Pixop Platform into a specified S3 bucket. (required)
     * @return VideoOutStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoOutStatus copyVideoDataToS3Bucket(UUID videoId, CopyVideoDataToS3BucketRequest copyVideoDataToS3BucketRequest) throws ApiException {
        ApiResponse<VideoOutStatus> localVarResp = copyVideoDataToS3BucketWithHttpInfo(videoId, copyVideoDataToS3BucketRequest);
        return localVarResp.getData();
    }

    /**
     * Copy video data to an S3 bucket
     * Initiates an asynchronous multipart copy operation to transfer video data from the Pixop Platform to the specified S3 bucket.  - The video data is **not ready for copy** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  The status of this operation can be tracked using: - [GET /v1/videos/{videoId}/out/status](https://docs.pixop.com/reference/getVideoOutStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_out&#x60; events to receive real-time updates  - When the operation succeeds, the status updates to &#x60;DONE&#x60;. If it fails, the status updates to &#x60;FAILED&#x60;.  **Retry and Abandon Options:** - Restart a &#x60;FAILED&#x60; operation using &#x60;POST /v1/videos/{videoId}/out/restart&#x60;. - Abandon a &#x60;FAILED&#x60; operation and free up resources using &#x60;POST /v1/videos/{videoId}/out/abandon&#x60;.  **Notes:**   - Only one \&quot;video out\&quot; operation can run per video at a time. Starting a new operation will result in a &#x60;409 Conflict&#x60; response.   - If the specified object key already exists in the S3 bucket, or if the video data is **not ready for copy**, a &#x60;409 Conflict&#x60; response is also returned. 
     * @param videoId The unique identifier for the video. (required)
     * @param copyVideoDataToS3BucketRequest Parameters required for exporting a video from the Pixop Platform into a specified S3 bucket. (required)
     * @return ApiResponse&lt;VideoOutStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoOutStatus> copyVideoDataToS3BucketWithHttpInfo(UUID videoId, CopyVideoDataToS3BucketRequest copyVideoDataToS3BucketRequest) throws ApiException {
        okhttp3.Call localVarCall = copyVideoDataToS3BucketValidateBeforeCall(videoId, copyVideoDataToS3BucketRequest, null);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy video data to an S3 bucket (asynchronously)
     * Initiates an asynchronous multipart copy operation to transfer video data from the Pixop Platform to the specified S3 bucket.  - The video data is **not ready for copy** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  The status of this operation can be tracked using: - [GET /v1/videos/{videoId}/out/status](https://docs.pixop.com/reference/getVideoOutStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_out&#x60; events to receive real-time updates  - When the operation succeeds, the status updates to &#x60;DONE&#x60;. If it fails, the status updates to &#x60;FAILED&#x60;.  **Retry and Abandon Options:** - Restart a &#x60;FAILED&#x60; operation using &#x60;POST /v1/videos/{videoId}/out/restart&#x60;. - Abandon a &#x60;FAILED&#x60; operation and free up resources using &#x60;POST /v1/videos/{videoId}/out/abandon&#x60;.  **Notes:**   - Only one \&quot;video out\&quot; operation can run per video at a time. Starting a new operation will result in a &#x60;409 Conflict&#x60; response.   - If the specified object key already exists in the S3 bucket, or if the video data is **not ready for copy**, a &#x60;409 Conflict&#x60; response is also returned. 
     * @param videoId The unique identifier for the video. (required)
     * @param copyVideoDataToS3BucketRequest Parameters required for exporting a video from the Pixop Platform into a specified S3 bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call copyVideoDataToS3BucketAsync(UUID videoId, CopyVideoDataToS3BucketRequest copyVideoDataToS3BucketRequest, final ApiCallback<VideoOutStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyVideoDataToS3BucketValidateBeforeCall(videoId, copyVideoDataToS3BucketRequest, _callback);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyVideoDataToS3OutputLocationId
     * @param videoId The unique identifier for the video. (required)
     * @param outputLocationId The unique identifier for the output location. (required)
     * @param copyVideoDataToS3OutputLocationIdRequest Parameters required for exporting a video from the Pixop Platform into an S3 bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call copyVideoDataToS3OutputLocationIdCall(UUID videoId, UUID outputLocationId, CopyVideoDataToS3OutputLocationIdRequest copyVideoDataToS3OutputLocationIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyVideoDataToS3OutputLocationIdRequest;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/out/s3/{outputLocationId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "outputLocationId" + "}", localVarApiClient.escapeString(outputLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyVideoDataToS3OutputLocationIdValidateBeforeCall(UUID videoId, UUID outputLocationId, CopyVideoDataToS3OutputLocationIdRequest copyVideoDataToS3OutputLocationIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling copyVideoDataToS3OutputLocationId(Async)");
        }

        // verify the required parameter 'outputLocationId' is set
        if (outputLocationId == null) {
            throw new ApiException("Missing the required parameter 'outputLocationId' when calling copyVideoDataToS3OutputLocationId(Async)");
        }

        // verify the required parameter 'copyVideoDataToS3OutputLocationIdRequest' is set
        if (copyVideoDataToS3OutputLocationIdRequest == null) {
            throw new ApiException("Missing the required parameter 'copyVideoDataToS3OutputLocationIdRequest' when calling copyVideoDataToS3OutputLocationId(Async)");
        }

        return copyVideoDataToS3OutputLocationIdCall(videoId, outputLocationId, copyVideoDataToS3OutputLocationIdRequest, _callback);

    }

    /**
     * Copy video data to an S3 bucket using an output location ID
     * Initiates an asynchronous copy operation to transfer video data to an S3 bucket defined by the specified &#x60;outputLocationId&#x60;.  - The behavior is identical to [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/), but uses a predefined S3 output location. 
     * @param videoId The unique identifier for the video. (required)
     * @param outputLocationId The unique identifier for the output location. (required)
     * @param copyVideoDataToS3OutputLocationIdRequest Parameters required for exporting a video from the Pixop Platform into an S3 bucket. (required)
     * @return VideoOutStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoOutStatus copyVideoDataToS3OutputLocationId(UUID videoId, UUID outputLocationId, CopyVideoDataToS3OutputLocationIdRequest copyVideoDataToS3OutputLocationIdRequest) throws ApiException {
        ApiResponse<VideoOutStatus> localVarResp = copyVideoDataToS3OutputLocationIdWithHttpInfo(videoId, outputLocationId, copyVideoDataToS3OutputLocationIdRequest);
        return localVarResp.getData();
    }

    /**
     * Copy video data to an S3 bucket using an output location ID
     * Initiates an asynchronous copy operation to transfer video data to an S3 bucket defined by the specified &#x60;outputLocationId&#x60;.  - The behavior is identical to [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/), but uses a predefined S3 output location. 
     * @param videoId The unique identifier for the video. (required)
     * @param outputLocationId The unique identifier for the output location. (required)
     * @param copyVideoDataToS3OutputLocationIdRequest Parameters required for exporting a video from the Pixop Platform into an S3 bucket. (required)
     * @return ApiResponse&lt;VideoOutStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoOutStatus> copyVideoDataToS3OutputLocationIdWithHttpInfo(UUID videoId, UUID outputLocationId, CopyVideoDataToS3OutputLocationIdRequest copyVideoDataToS3OutputLocationIdRequest) throws ApiException {
        okhttp3.Call localVarCall = copyVideoDataToS3OutputLocationIdValidateBeforeCall(videoId, outputLocationId, copyVideoDataToS3OutputLocationIdRequest, null);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy video data to an S3 bucket using an output location ID (asynchronously)
     * Initiates an asynchronous copy operation to transfer video data to an S3 bucket defined by the specified &#x60;outputLocationId&#x60;.  - The behavior is identical to [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/), but uses a predefined S3 output location. 
     * @param videoId The unique identifier for the video. (required)
     * @param outputLocationId The unique identifier for the output location. (required)
     * @param copyVideoDataToS3OutputLocationIdRequest Parameters required for exporting a video from the Pixop Platform into an S3 bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call copyVideoDataToS3OutputLocationIdAsync(UUID videoId, UUID outputLocationId, CopyVideoDataToS3OutputLocationIdRequest copyVideoDataToS3OutputLocationIdRequest, final ApiCallback<VideoOutStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyVideoDataToS3OutputLocationIdValidateBeforeCall(videoId, outputLocationId, copyVideoDataToS3OutputLocationIdRequest, _callback);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateVideoDownloadUrl
     * @param videoId The unique identifier for the video. (required)
     * @param durationMinutes The duration, in minutes, for which the pre-signed URL will be valid. (optional, default to 15)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully generated and returned the download URL. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call generateVideoDownloadUrlCall(UUID videoId, Integer durationMinutes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/out/https"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationMinutes", durationMinutes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateVideoDownloadUrlValidateBeforeCall(UUID videoId, Integer durationMinutes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling generateVideoDownloadUrl(Async)");
        }

        return generateVideoDownloadUrlCall(videoId, durationMinutes, _callback);

    }

    /**
     * Generates a pre-signed URL for downloading video data.
     *  Generates a pre-signed HTTPS URL for downloading the video from the Pixop platform.  - **Resumable downloads** are supported via HTTP Range requests. - The URL remains valid for the specified duration. - The video file is **not ready for download** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  **Notes:** - Only **one active pre-signed URL** is allowed per video at any given time. - If a valid URL already exists, or if the video is **not ready for download**, a &#x60;409 Conflict&#x60; response will be returned. - A new pre-signed URL will be issued only after the previous one expires. 
     * @param videoId The unique identifier for the video. (required)
     * @param durationMinutes The duration, in minutes, for which the pre-signed URL will be valid. (optional, default to 15)
     * @return VideoDownloadUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully generated and returned the download URL. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoDownloadUrl generateVideoDownloadUrl(UUID videoId, Integer durationMinutes) throws ApiException {
        ApiResponse<VideoDownloadUrl> localVarResp = generateVideoDownloadUrlWithHttpInfo(videoId, durationMinutes);
        return localVarResp.getData();
    }

    /**
     * Generates a pre-signed URL for downloading video data.
     *  Generates a pre-signed HTTPS URL for downloading the video from the Pixop platform.  - **Resumable downloads** are supported via HTTP Range requests. - The URL remains valid for the specified duration. - The video file is **not ready for download** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  **Notes:** - Only **one active pre-signed URL** is allowed per video at any given time. - If a valid URL already exists, or if the video is **not ready for download**, a &#x60;409 Conflict&#x60; response will be returned. - A new pre-signed URL will be issued only after the previous one expires. 
     * @param videoId The unique identifier for the video. (required)
     * @param durationMinutes The duration, in minutes, for which the pre-signed URL will be valid. (optional, default to 15)
     * @return ApiResponse&lt;VideoDownloadUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully generated and returned the download URL. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoDownloadUrl> generateVideoDownloadUrlWithHttpInfo(UUID videoId, Integer durationMinutes) throws ApiException {
        okhttp3.Call localVarCall = generateVideoDownloadUrlValidateBeforeCall(videoId, durationMinutes, null);
        Type localVarReturnType = new TypeToken<VideoDownloadUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a pre-signed URL for downloading video data. (asynchronously)
     *  Generates a pre-signed HTTPS URL for downloading the video from the Pixop platform.  - **Resumable downloads** are supported via HTTP Range requests. - The URL remains valid for the specified duration. - The video file is **not ready for download** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  **Notes:** - Only **one active pre-signed URL** is allowed per video at any given time. - If a valid URL already exists, or if the video is **not ready for download**, a &#x60;409 Conflict&#x60; response will be returned. - A new pre-signed URL will be issued only after the previous one expires. 
     * @param videoId The unique identifier for the video. (required)
     * @param durationMinutes The duration, in minutes, for which the pre-signed URL will be valid. (optional, default to 15)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully generated and returned the download URL. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call generateVideoDownloadUrlAsync(UUID videoId, Integer durationMinutes, final ApiCallback<VideoDownloadUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateVideoDownloadUrlValidateBeforeCall(videoId, durationMinutes, _callback);
        Type localVarReturnType = new TypeToken<VideoDownloadUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoOutStatus
     * @param videoId The unique identifier for the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video out\&quot; operation has not been started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoOutStatusCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/out/status"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoOutStatusValidateBeforeCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoOutStatus(Async)");
        }

        return getVideoOutStatusCall(videoId, _callback);

    }

    /**
     * Retrieve the status of a \&quot;video out\&quot; operation
     * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/) - [POST /v1/videos/{videoId}/out/s3/{outputLocationId}](https://docs.pixop.com/reference/copyVideoDataToS3OutputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @return VideoOutStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video out\&quot; operation has not been started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoOutStatus getVideoOutStatus(UUID videoId) throws ApiException {
        ApiResponse<VideoOutStatus> localVarResp = getVideoOutStatusWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the status of a \&quot;video out\&quot; operation
     * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/) - [POST /v1/videos/{videoId}/out/s3/{outputLocationId}](https://docs.pixop.com/reference/copyVideoDataToS3OutputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @return ApiResponse&lt;VideoOutStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video out\&quot; operation has not been started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoOutStatus> getVideoOutStatusWithHttpInfo(UUID videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoOutStatusValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the status of a \&quot;video out\&quot; operation (asynchronously)
     * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/) - [POST /v1/videos/{videoId}/out/s3/{outputLocationId}](https://docs.pixop.com/reference/copyVideoDataToS3OutputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A \&quot;video out\&quot; operation has not been started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoOutStatusAsync(UUID videoId, final ApiCallback<VideoOutStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoOutStatusValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restartFailedVideoOutOperation
     * @param videoId The unique identifier for the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call restartFailedVideoOutOperationCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/out/restart"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartFailedVideoOutOperationValidateBeforeCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling restartFailedVideoOutOperation(Async)");
        }

        return restartFailedVideoOutOperationCall(videoId, _callback);

    }

    /**
     * Restart a failed \&quot;video out\&quot; operation
     * Restarts a failed \&quot;video out\&quot; operation, resuming from the point where it previously failed.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to restart an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
     * @param videoId The unique identifier for the video. (required)
     * @return VideoOutStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoOutStatus restartFailedVideoOutOperation(UUID videoId) throws ApiException {
        ApiResponse<VideoOutStatus> localVarResp = restartFailedVideoOutOperationWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Restart a failed \&quot;video out\&quot; operation
     * Restarts a failed \&quot;video out\&quot; operation, resuming from the point where it previously failed.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to restart an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
     * @param videoId The unique identifier for the video. (required)
     * @return ApiResponse&lt;VideoOutStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoOutStatus> restartFailedVideoOutOperationWithHttpInfo(UUID videoId) throws ApiException {
        okhttp3.Call localVarCall = restartFailedVideoOutOperationValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restart a failed \&quot;video out\&quot; operation (asynchronously)
     * Restarts a failed \&quot;video out\&quot; operation, resuming from the point where it previously failed.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to restart an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
     * @param videoId The unique identifier for the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of the video output. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call restartFailedVideoOutOperationAsync(UUID videoId, final ApiCallback<VideoOutStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartFailedVideoOutOperationValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoOutStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
