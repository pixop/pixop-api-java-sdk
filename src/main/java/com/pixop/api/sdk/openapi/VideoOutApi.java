/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.CopyVideoDataToS3BucketRequest;
import com.pixop.api.sdk.model.dto.CopyVideoDataToS3OutputLocationIdRequest;
import com.pixop.api.sdk.model.dto.Error;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoDownloadUrl;
import com.pixop.api.sdk.model.dto.VideoOutStatus;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoOutApi extends BaseApi {

  public VideoOutApi() {
    super(Configuration.getDefaultApiClient());
  }

  public VideoOutApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Abandon a failed \&quot;video out\&quot; operation
   * Abandons a failed \&quot;video out\&quot; operation and releases resources allocated for the multipart upload process.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to abandon an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
   * @param videoId The unique identifier for the video. (required)
   * @throws ApiException if fails to make API call
   */
  public void abandonFailedVideoOutOperation(@javax.annotation.Nonnull UUID videoId) throws ApiException {
    this.abandonFailedVideoOutOperation(videoId, Collections.emptyMap());
  }


  /**
   * Abandon a failed \&quot;video out\&quot; operation
   * Abandons a failed \&quot;video out\&quot; operation and releases resources allocated for the multipart upload process.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to abandon an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
   * @param videoId The unique identifier for the video. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void abandonFailedVideoOutOperation(@javax.annotation.Nonnull UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling abandonFailedVideoOutOperation");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/out/abandon"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Copy video data to an S3 bucket
   * Initiates an asynchronous multipart copy operation to transfer video data from the Pixop Platform to the specified S3 bucket.  - The video data is **not ready for copy** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  The status of this operation can be tracked using: - [GET /v1/videos/{videoId}/out/status](https://docs.pixop.com/reference/getVideoOutStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_out&#x60; events to receive real-time updates  - When the operation succeeds, the status updates to &#x60;DONE&#x60;. If it fails, the status updates to &#x60;FAILED&#x60;.  **Retry and Abandon Options:** - Restart a &#x60;FAILED&#x60; operation using &#x60;POST /v1/videos/{videoId}/out/restart&#x60;. - Abandon a &#x60;FAILED&#x60; operation and free up resources using &#x60;POST /v1/videos/{videoId}/out/abandon&#x60;.  **Notes:**   - Only one \&quot;video out\&quot; operation can run per video at a time. Starting a new operation will result in a &#x60;409 Conflict&#x60; response.   - If the specified object key already exists in the S3 bucket, or if the video data is **not ready for copy**, a &#x60;409 Conflict&#x60; response is also returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param copyVideoDataToS3BucketRequest Parameters required for exporting a video from the Pixop Platform into a specified S3 bucket. (required)
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus copyVideoDataToS3Bucket(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull CopyVideoDataToS3BucketRequest copyVideoDataToS3BucketRequest) throws ApiException {
    return this.copyVideoDataToS3Bucket(videoId, copyVideoDataToS3BucketRequest, Collections.emptyMap());
  }


  /**
   * Copy video data to an S3 bucket
   * Initiates an asynchronous multipart copy operation to transfer video data from the Pixop Platform to the specified S3 bucket.  - The video data is **not ready for copy** until the processing task is complete.   You can check the status of the processing task using [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) (or [GET /v1/videos/{videoId}/in/status](https://docs.pixop.com/reference/getVideoInStatus/) for a \&quot;video in\&quot; copy operation), or subscribe to &#x60;clip_processing&#x60;, &#x60;video_processing&#x60; or &#x60;video_in&#x60; [webhooks](https://docs.pixop.com/reference/createWebhook/) to receive real-time updates.  The status of this operation can be tracked using: - [GET /v1/videos/{videoId}/out/status](https://docs.pixop.com/reference/getVideoOutStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;video_out&#x60; events to receive real-time updates  - When the operation succeeds, the status updates to &#x60;DONE&#x60;. If it fails, the status updates to &#x60;FAILED&#x60;.  **Retry and Abandon Options:** - Restart a &#x60;FAILED&#x60; operation using &#x60;POST /v1/videos/{videoId}/out/restart&#x60;. - Abandon a &#x60;FAILED&#x60; operation and free up resources using &#x60;POST /v1/videos/{videoId}/out/abandon&#x60;.  **Notes:**   - Only one \&quot;video out\&quot; operation can run per video at a time. Starting a new operation will result in a &#x60;409 Conflict&#x60; response.   - If the specified object key already exists in the S3 bucket, or if the video data is **not ready for copy**, a &#x60;409 Conflict&#x60; response is also returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param copyVideoDataToS3BucketRequest Parameters required for exporting a video from the Pixop Platform into a specified S3 bucket. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus copyVideoDataToS3Bucket(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull CopyVideoDataToS3BucketRequest copyVideoDataToS3BucketRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = copyVideoDataToS3BucketRequest;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling copyVideoDataToS3Bucket");
    }
    
    // verify the required parameter 'copyVideoDataToS3BucketRequest' is set
    if (copyVideoDataToS3BucketRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'copyVideoDataToS3BucketRequest' when calling copyVideoDataToS3Bucket");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/out/s3"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoOutStatus> localVarReturnType = new TypeReference<VideoOutStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Copy video data to an S3 bucket using an output location ID
   * Initiates an asynchronous copy operation to transfer video data to an S3 bucket defined by the specified &#x60;outputLocationId&#x60;.  - The behavior is identical to [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/), but uses a predefined S3 output location. 
   * @param videoId The unique identifier for the video. (required)
   * @param outputLocationId The unique identifier for the output location. (required)
   * @param copyVideoDataToS3OutputLocationIdRequest Parameters required for exporting a video from the Pixop Platform into an S3 bucket. (required)
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus copyVideoDataToS3OutputLocationId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID outputLocationId, @javax.annotation.Nonnull CopyVideoDataToS3OutputLocationIdRequest copyVideoDataToS3OutputLocationIdRequest) throws ApiException {
    return this.copyVideoDataToS3OutputLocationId(videoId, outputLocationId, copyVideoDataToS3OutputLocationIdRequest, Collections.emptyMap());
  }


  /**
   * Copy video data to an S3 bucket using an output location ID
   * Initiates an asynchronous copy operation to transfer video data to an S3 bucket defined by the specified &#x60;outputLocationId&#x60;.  - The behavior is identical to [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/), but uses a predefined S3 output location. 
   * @param videoId The unique identifier for the video. (required)
   * @param outputLocationId The unique identifier for the output location. (required)
   * @param copyVideoDataToS3OutputLocationIdRequest Parameters required for exporting a video from the Pixop Platform into an S3 bucket. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus copyVideoDataToS3OutputLocationId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID outputLocationId, @javax.annotation.Nonnull CopyVideoDataToS3OutputLocationIdRequest copyVideoDataToS3OutputLocationIdRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = copyVideoDataToS3OutputLocationIdRequest;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling copyVideoDataToS3OutputLocationId");
    }
    
    // verify the required parameter 'outputLocationId' is set
    if (outputLocationId == null) {
      throw new ApiException(400, "Missing the required parameter 'outputLocationId' when calling copyVideoDataToS3OutputLocationId");
    }
    
    // verify the required parameter 'copyVideoDataToS3OutputLocationIdRequest' is set
    if (copyVideoDataToS3OutputLocationIdRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'copyVideoDataToS3OutputLocationIdRequest' when calling copyVideoDataToS3OutputLocationId");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/out/s3/{outputLocationId}"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)))
      .replaceAll("\\{" + "outputLocationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(outputLocationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoOutStatus> localVarReturnType = new TypeReference<VideoOutStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Generates a pre-signed URL for downloading video data.
   *  Generates a pre-signed HTTPS URL for downloading the video from the Pixop platform.  - **Resumable downloads** are supported via HTTP Range requests. - The URL remains valid for the specified duration. - The video file is **not ready for download** until the processing task is complete.   **Notes:** - If the video is **not ready for download**, a &#x60;409 Conflict&#x60; response will be returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param durationMinutes The duration, in minutes, for which the pre-signed URL will be valid. (optional, default to 15)
   * @return VideoDownloadUrl
   * @throws ApiException if fails to make API call
   */
  public VideoDownloadUrl generateVideoDownloadUrl(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable Integer durationMinutes) throws ApiException {
    return this.generateVideoDownloadUrl(videoId, durationMinutes, Collections.emptyMap());
  }


  /**
   * Generates a pre-signed URL for downloading video data.
   *  Generates a pre-signed HTTPS URL for downloading the video from the Pixop platform.  - **Resumable downloads** are supported via HTTP Range requests. - The URL remains valid for the specified duration. - The video file is **not ready for download** until the processing task is complete.   **Notes:** - If the video is **not ready for download**, a &#x60;409 Conflict&#x60; response will be returned. 
   * @param videoId The unique identifier for the video. (required)
   * @param durationMinutes The duration, in minutes, for which the pre-signed URL will be valid. (optional, default to 15)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoDownloadUrl
   * @throws ApiException if fails to make API call
   */
  public VideoDownloadUrl generateVideoDownloadUrl(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nullable Integer durationMinutes, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling generateVideoDownloadUrl");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/out/https"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("durationMinutes", durationMinutes));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoDownloadUrl> localVarReturnType = new TypeReference<VideoDownloadUrl>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve the status of a \&quot;video out\&quot; operation
   * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/) - [POST /v1/videos/{videoId}/out/s3/{outputLocationId}](https://docs.pixop.com/reference/copyVideoDataToS3OutputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
   * @param videoId The unique identifier for the video. (required)
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus getVideoOutStatus(@javax.annotation.Nonnull UUID videoId) throws ApiException {
    return this.getVideoOutStatus(videoId, Collections.emptyMap());
  }


  /**
   * Retrieve the status of a \&quot;video out\&quot; operation
   * Retrieves the status of the asynchronous copy operation initiated by: - [POST /v1/videos/{videoId}/out/s3](https://docs.pixop.com/reference/copyVideoDataToS3Bucket/) - [POST /v1/videos/{videoId}/out/s3/{outputLocationId}](https://docs.pixop.com/reference/copyVideoDataToS3OutputLocationId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
   * @param videoId The unique identifier for the video. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus getVideoOutStatus(@javax.annotation.Nonnull UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling getVideoOutStatus");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/out/status"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoOutStatus> localVarReturnType = new TypeReference<VideoOutStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Restart a failed \&quot;video out\&quot; operation
   * Restarts a failed \&quot;video out\&quot; operation, resuming from the point where it previously failed.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to restart an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
   * @param videoId The unique identifier for the video. (required)
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus restartFailedVideoOutOperation(@javax.annotation.Nonnull UUID videoId) throws ApiException {
    return this.restartFailedVideoOutOperation(videoId, Collections.emptyMap());
  }


  /**
   * Restart a failed \&quot;video out\&quot; operation
   * Restarts a failed \&quot;video out\&quot; operation, resuming from the point where it previously failed.  **Note:** This operation is only allowed when the status is &#x60;FAILED&#x60;. Attempting to restart an active or successful operation will result in a &#x60;409 Conflict&#x60; response. 
   * @param videoId The unique identifier for the video. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoOutStatus
   * @throws ApiException if fails to make API call
   */
  public VideoOutStatus restartFailedVideoOutOperation(@javax.annotation.Nonnull UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling restartFailedVideoOutOperation");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/out/restart"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoOutStatus> localVarReturnType = new TypeReference<VideoOutStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
