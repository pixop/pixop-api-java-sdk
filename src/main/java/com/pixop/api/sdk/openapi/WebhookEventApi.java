/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.2
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.openapi;

import com.pixop.api.sdk.ApiCallback;
import com.pixop.api.sdk.ApiClient;
import com.pixop.api.sdk.ApiException;
import com.pixop.api.sdk.ApiResponse;
import com.pixop.api.sdk.Configuration;
import com.pixop.api.sdk.Pair;
import com.pixop.api.sdk.ProgressRequestBody;
import com.pixop.api.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.FilterModeEnum;
import java.time.OffsetDateTime;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.WebhookEvent;
import com.pixop.api.sdk.model.dto.WebhookEventsPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookEventApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookEventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookEventApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getWebhookEventById
     * @param id The unique identifier for the object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved webhook event details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookEventByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhooks/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookEventByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getWebhookEventById(Async)");
        }

        return getWebhookEventByIdCall(id, _callback);

    }

    /**
     * Retrieve webhook event details
     * Retrieves the details of a specific webhook event using its unique identifier.    This includes metadata such as timestamps, status code, and payload sent. 
     * @param id The unique identifier for the object. (required)
     * @return WebhookEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved webhook event details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public WebhookEvent getWebhookEventById(UUID id) throws ApiException {
        ApiResponse<WebhookEvent> localVarResp = getWebhookEventByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve webhook event details
     * Retrieves the details of a specific webhook event using its unique identifier.    This includes metadata such as timestamps, status code, and payload sent. 
     * @param id The unique identifier for the object. (required)
     * @return ApiResponse&lt;WebhookEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved webhook event details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEvent> getWebhookEventByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getWebhookEventByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WebhookEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve webhook event details (asynchronously)
     * Retrieves the details of a specific webhook event using its unique identifier.    This includes metadata such as timestamps, status code, and payload sent. 
     * @param id The unique identifier for the object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved webhook event details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookEventByIdAsync(UUID id, final ApiCallback<WebhookEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookEventByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WebhookEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhookEvents
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param successfulMode Filters results based on the successful mode: - &#x60;INCLUDE&#x60;: Includes successful events in the result. - &#x60;EXCLUDE&#x60;: Excludes successful events from the result. - &#x60;ONLY&#x60;: Only returns successful events in the result.  (optional, default to INCLUDE)
     * @param testMode Filters results based on the test mode: - &#x60;INCLUDE&#x60;: Includes test events in the result. - &#x60;EXCLUDE&#x60;: Excludes test events from the result. - &#x60;ONLY&#x60;: Only returns test events in the result.  (optional, default to INCLUDE)
     * @param occurredAtFrom Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is greater than or equal to the specified date-time (inclusive).  (optional)
     * @param occurredAtUntil Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is strictly less than the specified date-time (exclusive).  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of webhook events. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookEventsCall(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum successfulMode, FilterModeEnum testMode, OffsetDateTime occurredAtFrom, OffsetDateTime occurredAtUntil, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhooks/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamId", teamId));
        }

        if (successfulMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successfulMode", successfulMode));
        }

        if (testMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testMode", testMode));
        }

        if (occurredAtFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAtFrom", occurredAtFrom));
        }

        if (occurredAtUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAtUntil", occurredAtUntil));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookEventsValidateBeforeCall(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum successfulMode, FilterModeEnum testMode, OffsetDateTime occurredAtFrom, OffsetDateTime occurredAtUntil, final ApiCallback _callback) throws ApiException {
        return getWebhookEventsCall(pageNumber, pageSize, sortDirection, sortBy, teamId, successfulMode, testMode, occurredAtFrom, occurredAtUntil, _callback);

    }

    /**
     * Retrieve webhook events
     * Retrieves a paginated list of webhook events associated with the provided API key.  Each event represents delivery attempts for a configured webhook, including both successful and failed attempts. 
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param successfulMode Filters results based on the successful mode: - &#x60;INCLUDE&#x60;: Includes successful events in the result. - &#x60;EXCLUDE&#x60;: Excludes successful events from the result. - &#x60;ONLY&#x60;: Only returns successful events in the result.  (optional, default to INCLUDE)
     * @param testMode Filters results based on the test mode: - &#x60;INCLUDE&#x60;: Includes test events in the result. - &#x60;EXCLUDE&#x60;: Excludes test events from the result. - &#x60;ONLY&#x60;: Only returns test events in the result.  (optional, default to INCLUDE)
     * @param occurredAtFrom Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is greater than or equal to the specified date-time (inclusive).  (optional)
     * @param occurredAtUntil Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is strictly less than the specified date-time (exclusive).  (optional)
     * @return WebhookEventsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of webhook events. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public WebhookEventsPage getWebhookEvents(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum successfulMode, FilterModeEnum testMode, OffsetDateTime occurredAtFrom, OffsetDateTime occurredAtUntil) throws ApiException {
        ApiResponse<WebhookEventsPage> localVarResp = getWebhookEventsWithHttpInfo(pageNumber, pageSize, sortDirection, sortBy, teamId, successfulMode, testMode, occurredAtFrom, occurredAtUntil);
        return localVarResp.getData();
    }

    /**
     * Retrieve webhook events
     * Retrieves a paginated list of webhook events associated with the provided API key.  Each event represents delivery attempts for a configured webhook, including both successful and failed attempts. 
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param successfulMode Filters results based on the successful mode: - &#x60;INCLUDE&#x60;: Includes successful events in the result. - &#x60;EXCLUDE&#x60;: Excludes successful events from the result. - &#x60;ONLY&#x60;: Only returns successful events in the result.  (optional, default to INCLUDE)
     * @param testMode Filters results based on the test mode: - &#x60;INCLUDE&#x60;: Includes test events in the result. - &#x60;EXCLUDE&#x60;: Excludes test events from the result. - &#x60;ONLY&#x60;: Only returns test events in the result.  (optional, default to INCLUDE)
     * @param occurredAtFrom Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is greater than or equal to the specified date-time (inclusive).  (optional)
     * @param occurredAtUntil Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is strictly less than the specified date-time (exclusive).  (optional)
     * @return ApiResponse&lt;WebhookEventsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of webhook events. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEventsPage> getWebhookEventsWithHttpInfo(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum successfulMode, FilterModeEnum testMode, OffsetDateTime occurredAtFrom, OffsetDateTime occurredAtUntil) throws ApiException {
        okhttp3.Call localVarCall = getWebhookEventsValidateBeforeCall(pageNumber, pageSize, sortDirection, sortBy, teamId, successfulMode, testMode, occurredAtFrom, occurredAtUntil, null);
        Type localVarReturnType = new TypeToken<WebhookEventsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve webhook events (asynchronously)
     * Retrieves a paginated list of webhook events associated with the provided API key.  Each event represents delivery attempts for a configured webhook, including both successful and failed attempts. 
     * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
     * @param pageSize Specifies the number of items per page. (optional, default to 10)
     * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
     * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
     * @param teamId Filters results by the specified team ID. (optional)
     * @param successfulMode Filters results based on the successful mode: - &#x60;INCLUDE&#x60;: Includes successful events in the result. - &#x60;EXCLUDE&#x60;: Excludes successful events from the result. - &#x60;ONLY&#x60;: Only returns successful events in the result.  (optional, default to INCLUDE)
     * @param testMode Filters results based on the test mode: - &#x60;INCLUDE&#x60;: Includes test events in the result. - &#x60;EXCLUDE&#x60;: Excludes test events from the result. - &#x60;ONLY&#x60;: Only returns test events in the result.  (optional, default to INCLUDE)
     * @param occurredAtFrom Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is greater than or equal to the specified date-time (inclusive).  (optional)
     * @param occurredAtUntil Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is strictly less than the specified date-time (exclusive).  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the paginated list of webhook events. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookEventsAsync(Integer pageNumber, Integer pageSize, SortDirectionEnum sortDirection, SortByBaseEnum sortBy, UUID teamId, FilterModeEnum successfulMode, FilterModeEnum testMode, OffsetDateTime occurredAtFrom, OffsetDateTime occurredAtUntil, final ApiCallback<WebhookEventsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookEventsValidateBeforeCall(pageNumber, pageSize, sortDirection, sortBy, teamId, successfulMode, testMode, occurredAtFrom, occurredAtUntil, _callback);
        Type localVarReturnType = new TypeToken<WebhookEventsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
