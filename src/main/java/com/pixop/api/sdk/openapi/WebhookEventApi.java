/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.Error;
import com.pixop.api.sdk.model.dto.FilterModeEnum;
import java.time.OffsetDateTime;
import com.pixop.api.sdk.model.dto.SortByBaseEnum;
import com.pixop.api.sdk.model.dto.SortDirectionEnum;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.WebhookEvent;
import com.pixop.api.sdk.model.dto.WebhookEventsPage;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class WebhookEventApi extends BaseApi {

  public WebhookEventApi() {
    super(Configuration.getDefaultApiClient());
  }

  public WebhookEventApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Retrieve webhook event details
   * Retrieves the details of a specific webhook event using its unique identifier.    This includes metadata such as timestamps, status code, and payload sent. 
   * @param id The unique identifier for the object. (required)
   * @return WebhookEvent
   * @throws ApiException if fails to make API call
   */
  public WebhookEvent getWebhookEventById(@javax.annotation.Nonnull UUID id) throws ApiException {
    return this.getWebhookEventById(id, Collections.emptyMap());
  }


  /**
   * Retrieve webhook event details
   * Retrieves the details of a specific webhook event using its unique identifier.    This includes metadata such as timestamps, status code, and payload sent. 
   * @param id The unique identifier for the object. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return WebhookEvent
   * @throws ApiException if fails to make API call
   */
  public WebhookEvent getWebhookEventById(@javax.annotation.Nonnull UUID id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getWebhookEventById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/events/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<WebhookEvent> localVarReturnType = new TypeReference<WebhookEvent>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve webhook events
   * Retrieves a paginated list of webhook events associated with the provided API key.  Each event represents delivery attempts for a configured webhook, including both successful and failed attempts. 
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param successfulMode Filters results based on the successful mode: - &#x60;INCLUDE&#x60;: Includes successful events in the result. - &#x60;EXCLUDE&#x60;: Excludes successful events from the result. - &#x60;ONLY&#x60;: Only returns successful events in the result.  (optional, default to INCLUDE)
   * @param testMode Filters results based on the test mode: - &#x60;INCLUDE&#x60;: Includes test events in the result. - &#x60;EXCLUDE&#x60;: Excludes test events from the result. - &#x60;ONLY&#x60;: Only returns test events in the result.  (optional, default to INCLUDE)
   * @param occurredAtFrom Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is greater than or equal to the specified date-time (inclusive).  (optional)
   * @param occurredAtUntil Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is strictly less than the specified date-time (exclusive).  (optional)
   * @return WebhookEventsPage
   * @throws ApiException if fails to make API call
   */
  public WebhookEventsPage getWebhookEvents(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable FilterModeEnum successfulMode, @javax.annotation.Nullable FilterModeEnum testMode, @javax.annotation.Nullable OffsetDateTime occurredAtFrom, @javax.annotation.Nullable OffsetDateTime occurredAtUntil) throws ApiException {
    return this.getWebhookEvents(pageNumber, pageSize, sortDirection, sortBy, teamId, successfulMode, testMode, occurredAtFrom, occurredAtUntil, Collections.emptyMap());
  }


  /**
   * Retrieve webhook events
   * Retrieves a paginated list of webhook events associated with the provided API key.  Each event represents delivery attempts for a configured webhook, including both successful and failed attempts. 
   * @param pageNumber Specifies the current page number, starting at 0. (optional, default to 0)
   * @param pageSize Specifies the number of items per page. (optional, default to 10)
   * @param sortDirection Specifies the sort direction for the results: - &#x60;ASC&#x60;: ascending order. - &#x60;DESC&#x60;: descending order.  (optional, default to ASC)
   * @param sortBy Specifies the field to sort the results by. (optional, default to createdAt)
   * @param teamId Filters results by the specified team ID. (optional)
   * @param successfulMode Filters results based on the successful mode: - &#x60;INCLUDE&#x60;: Includes successful events in the result. - &#x60;EXCLUDE&#x60;: Excludes successful events from the result. - &#x60;ONLY&#x60;: Only returns successful events in the result.  (optional, default to INCLUDE)
   * @param testMode Filters results based on the test mode: - &#x60;INCLUDE&#x60;: Includes test events in the result. - &#x60;EXCLUDE&#x60;: Excludes test events from the result. - &#x60;ONLY&#x60;: Only returns test events in the result.  (optional, default to INCLUDE)
   * @param occurredAtFrom Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is greater than or equal to the specified date-time (inclusive).  (optional)
   * @param occurredAtUntil Filters results by the occurredAt date and time.   Includes only items where the occurredAt value is strictly less than the specified date-time (exclusive).  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return WebhookEventsPage
   * @throws ApiException if fails to make API call
   */
  public WebhookEventsPage getWebhookEvents(@javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable SortDirectionEnum sortDirection, @javax.annotation.Nullable SortByBaseEnum sortBy, @javax.annotation.Nullable UUID teamId, @javax.annotation.Nullable FilterModeEnum successfulMode, @javax.annotation.Nullable FilterModeEnum testMode, @javax.annotation.Nullable OffsetDateTime occurredAtFrom, @javax.annotation.Nullable OffsetDateTime occurredAtUntil, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/v1/webhooks/events";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortDirection", sortDirection));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("teamId", teamId));
    localVarQueryParams.addAll(apiClient.parameterToPair("successfulMode", successfulMode));
    localVarQueryParams.addAll(apiClient.parameterToPair("testMode", testMode));
    localVarQueryParams.addAll(apiClient.parameterToPair("occurredAtFrom", occurredAtFrom));
    localVarQueryParams.addAll(apiClient.parameterToPair("occurredAtUntil", occurredAtUntil));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<WebhookEventsPage> localVarReturnType = new TypeReference<WebhookEventsPage>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
