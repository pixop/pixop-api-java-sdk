/*
 * Pixop API
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.pixop.api.sdk.openapi;

import com.fasterxml.jackson.core.type.TypeReference;

import com.pixop.api.sdk.invoker.ApiException;
import com.pixop.api.sdk.invoker.ApiClient;
import com.pixop.api.sdk.invoker.BaseApi;
import com.pixop.api.sdk.invoker.Configuration;
import com.pixop.api.sdk.invoker.Pair;

import com.pixop.api.sdk.model.dto.Error;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoProcessingAppraisal;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptions;
import com.pixop.api.sdk.model.dto.VideoProcessingStatus;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-07T11:16:38.307086065Z[UTC]", comments = "Generator version: 7.15.0")
public class VideoProcessingApi extends BaseApi {

  public VideoProcessingApi() {
    super(Configuration.getDefaultApiClient());
  }

  public VideoProcessingApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Accept a video processing appraisal
   * Accepts a video processing appraisal and initiates the processing of the specified video.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
   * @param videoId The unique identifier for the video. (required)
   * @param appraisalId The unique identifier for the video processing appraisal. (required)
   * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus acceptVideoProcessingAppraisal(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID appraisalId, @javax.annotation.Nullable String videoName) throws ApiException {
    return this.acceptVideoProcessingAppraisal(videoId, appraisalId, videoName, Collections.emptyMap());
  }


  /**
   * Accept a video processing appraisal
   * Accepts a video processing appraisal and initiates the processing of the specified video.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
   * @param videoId The unique identifier for the video. (required)
   * @param appraisalId The unique identifier for the video processing appraisal. (required)
   * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus acceptVideoProcessingAppraisal(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID appraisalId, @javax.annotation.Nullable String videoName, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling acceptVideoProcessingAppraisal");
    }
    
    // verify the required parameter 'appraisalId' is set
    if (appraisalId == null) {
      throw new ApiException(400, "Missing the required parameter 'appraisalId' when calling acceptVideoProcessingAppraisal");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/processing/appraisals/{appraisalId}/accept"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)))
      .replaceAll("\\{" + "appraisalId" + "\\}", apiClient.escapeString(apiClient.parameterToString(appraisalId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("videoName", videoName));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingStatus> localVarReturnType = new TypeReference<VideoProcessingStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an appraisal for processing a video
   * Creates an appraisal for processing a video with options specified in the query parameters and request body.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
   * @param videoId The unique identifier for the video. (required)
   * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @return VideoProcessingAppraisal
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingAppraisal createVideoProcessingAppraisal(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs) throws ApiException {
    return this.createVideoProcessingAppraisal(videoId, videoProcessingConfigurationOptions, startPosMs, endPosMs, Collections.emptyMap());
  }


  /**
   * Create an appraisal for processing a video
   * Creates an appraisal for processing a video with options specified in the query parameters and request body.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
   * @param videoId The unique identifier for the video. (required)
   * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingAppraisal
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingAppraisal createVideoProcessingAppraisal(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = videoProcessingConfigurationOptions;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling createVideoProcessingAppraisal");
    }
    
    // verify the required parameter 'videoProcessingConfigurationOptions' is set
    if (videoProcessingConfigurationOptions == null) {
      throw new ApiException(400, "Missing the required parameter 'videoProcessingConfigurationOptions' when calling createVideoProcessingAppraisal");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/processing/appraisals/create"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("startPosMs", startPosMs));
    localVarQueryParams.addAll(apiClient.parameterToPair("endPosMs", endPosMs));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingAppraisal> localVarReturnType = new TypeReference<VideoProcessingAppraisal>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create an appraisal using a configuration ID
   * Creates an appraisal for processing a video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
   * @param videoId The unique identifier for the video. (required)
   * @param confId The unique identifier for the video processing configuration. (required)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @return VideoProcessingAppraisal
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingAppraisal createVideoProcessingAppraisalByConfId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID confId, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs) throws ApiException {
    return this.createVideoProcessingAppraisalByConfId(videoId, confId, startPosMs, endPosMs, Collections.emptyMap());
  }


  /**
   * Create an appraisal using a configuration ID
   * Creates an appraisal for processing a video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
   * @param videoId The unique identifier for the video. (required)
   * @param confId The unique identifier for the video processing configuration. (required)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingAppraisal
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingAppraisal createVideoProcessingAppraisalByConfId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID confId, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling createVideoProcessingAppraisalByConfId");
    }
    
    // verify the required parameter 'confId' is set
    if (confId == null) {
      throw new ApiException(400, "Missing the required parameter 'confId' when calling createVideoProcessingAppraisalByConfId");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/processing/appraisals/create/{confId}"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)))
      .replaceAll("\\{" + "confId" + "\\}", apiClient.escapeString(apiClient.parameterToString(confId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("startPosMs", startPosMs));
    localVarQueryParams.addAll(apiClient.parameterToPair("endPosMs", endPosMs));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingAppraisal> localVarReturnType = new TypeReference<VideoProcessingAppraisal>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve video processing status
   * Retrieves the status of the asynchronous video processing task initiated by: - [POST /v1/videos/{videoId}/processing/appraisals/{appraisalId}/accept](https://docs.pixop.com/reference/acceptVideoProcessingAppraisal/) - [POST /v1/videos/{videoId}/processing/start/{confId}](https://docs.pixop.com/reference/startProcessingByVideoIdAndConfId/) - [POST /v1/videos/{videoId}/processing/start](https://docs.pixop.com/reference/startProcessingByVideoId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
   * @param videoId The unique identifier for the video. (required)
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus getVideoProcessingStatus(@javax.annotation.Nonnull UUID videoId) throws ApiException {
    return this.getVideoProcessingStatus(videoId, Collections.emptyMap());
  }


  /**
   * Retrieve video processing status
   * Retrieves the status of the asynchronous video processing task initiated by: - [POST /v1/videos/{videoId}/processing/appraisals/{appraisalId}/accept](https://docs.pixop.com/reference/acceptVideoProcessingAppraisal/) - [POST /v1/videos/{videoId}/processing/start/{confId}](https://docs.pixop.com/reference/startProcessingByVideoIdAndConfId/) - [POST /v1/videos/{videoId}/processing/start](https://docs.pixop.com/reference/startProcessingByVideoId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
   * @param videoId The unique identifier for the video. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus getVideoProcessingStatus(@javax.annotation.Nonnull UUID videoId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling getVideoProcessingStatus");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/processing/status"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingStatus> localVarReturnType = new TypeReference<VideoProcessingStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Start video processing
   * Initiates the processing of the specified video with options specified in the query parameters and request body.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
   * @param videoId The unique identifier for the video. (required)
   * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
   * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus startProcessingByVideoId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, @javax.annotation.Nullable String videoName, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs) throws ApiException {
    return this.startProcessingByVideoId(videoId, videoProcessingConfigurationOptions, videoName, startPosMs, endPosMs, Collections.emptyMap());
  }


  /**
   * Start video processing
   * Initiates the processing of the specified video with options specified in the query parameters and request body.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
   * @param videoId The unique identifier for the video. (required)
   * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
   * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus startProcessingByVideoId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, @javax.annotation.Nullable String videoName, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = videoProcessingConfigurationOptions;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling startProcessingByVideoId");
    }
    
    // verify the required parameter 'videoProcessingConfigurationOptions' is set
    if (videoProcessingConfigurationOptions == null) {
      throw new ApiException(400, "Missing the required parameter 'videoProcessingConfigurationOptions' when calling startProcessingByVideoId");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/processing/start"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("videoName", videoName));
    localVarQueryParams.addAll(apiClient.parameterToPair("startPosMs", startPosMs));
    localVarQueryParams.addAll(apiClient.parameterToPair("endPosMs", endPosMs));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingStatus> localVarReturnType = new TypeReference<VideoProcessingStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Start video processing using a configuration ID
   * Initiates the processing of the specified video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
   * @param videoId The unique identifier for the video. (required)
   * @param confId The unique identifier for the video processing configuration. (required)
   * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus startProcessingByVideoIdAndConfId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID confId, @javax.annotation.Nullable String videoName, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs) throws ApiException {
    return this.startProcessingByVideoIdAndConfId(videoId, confId, videoName, startPosMs, endPosMs, Collections.emptyMap());
  }


  /**
   * Start video processing using a configuration ID
   * Initiates the processing of the specified video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
   * @param videoId The unique identifier for the video. (required)
   * @param confId The unique identifier for the video processing configuration. (required)
   * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
   * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VideoProcessingStatus
   * @throws ApiException if fails to make API call
   */
  public VideoProcessingStatus startProcessingByVideoIdAndConfId(@javax.annotation.Nonnull UUID videoId, @javax.annotation.Nonnull UUID confId, @javax.annotation.Nullable String videoName, @javax.annotation.Nullable Integer startPosMs, @javax.annotation.Nullable Integer endPosMs, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      throw new ApiException(400, "Missing the required parameter 'videoId' when calling startProcessingByVideoIdAndConfId");
    }
    
    // verify the required parameter 'confId' is set
    if (confId == null) {
      throw new ApiException(400, "Missing the required parameter 'confId' when calling startProcessingByVideoIdAndConfId");
    }
    
    // create path and map variables
    String localVarPath = "/v1/videos/{videoId}/processing/start/{confId}"
      .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(apiClient.parameterToString(videoId)))
      .replaceAll("\\{" + "confId" + "\\}", apiClient.escapeString(apiClient.parameterToString(confId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("videoName", videoName));
    localVarQueryParams.addAll(apiClient.parameterToPair("startPosMs", startPosMs));
    localVarQueryParams.addAll(apiClient.parameterToPair("endPosMs", endPosMs));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<VideoProcessingStatus> localVarReturnType = new TypeReference<VideoProcessingStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
