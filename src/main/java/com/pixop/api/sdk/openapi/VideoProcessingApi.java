/*
 * Pixop API Documentation
 *  The Pixop API provides a comprehensive RESTful interface for interacting with the Pixop Platform. It allows users to manage API keys, projects, videos, and more.  The Pixop Platform offers video processing features such as upscaling, format conversion, and compression. It uses AI-driven algorithms to optimize video quality, reduce file sizes, and improve playback performance.  **Quick Start Guide** - Explore the [Pixop API Documentation](https://docs.pixop.com/reference/) to familiarize yourself with the API's capabilities.  **Required Headers** Include the following headers in all API requests: - `Accept`: `application/json` - `Content-Type`: `application/json` - `X-API-Key`: Your API key for authentication (e.g., `X-API-Key: <your-api-key>`).     **Note:** API key management endpoints that use Basic Authentication do not require the `X-API-Key` header.  **Rate Limits** All endpoints, except those related to API key management, enforce rate limits. Response headers provide the following rate limit details: - `X-RateLimit-Limit`: The maximum number of requests allowed per minute. - `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window. - `X-RateLimit-Reset`: The number of seconds until the current rate limit window resets. 
 *
 * The version of the OpenAPI document: 1.0.0-rc.1
 * Contact: api@pixop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pixop.api.sdk.openapi;

import com.pixop.api.sdk.ApiCallback;
import com.pixop.api.sdk.ApiClient;
import com.pixop.api.sdk.ApiException;
import com.pixop.api.sdk.ApiResponse;
import com.pixop.api.sdk.Configuration;
import com.pixop.api.sdk.Pair;
import com.pixop.api.sdk.ProgressRequestBody;
import com.pixop.api.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pixop.api.sdk.model.dto.Error;
import java.util.UUID;
import com.pixop.api.sdk.model.dto.VideoProcessingAppraisal;
import com.pixop.api.sdk.model.dto.VideoProcessingConfigurationOptions;
import com.pixop.api.sdk.model.dto.VideoProcessingStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoProcessingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideoProcessingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoProcessingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptVideoProcessingAppraisal
     * @param videoId The unique identifier for the video. (required)
     * @param appraisalId The unique identifier for the video processing appraisal. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call acceptVideoProcessingAppraisalCall(UUID videoId, UUID appraisalId, String videoName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/processing/appraisals/{appraisalId}/accept"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "appraisalId" + "}", localVarApiClient.escapeString(appraisalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (videoName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoName", videoName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptVideoProcessingAppraisalValidateBeforeCall(UUID videoId, UUID appraisalId, String videoName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling acceptVideoProcessingAppraisal(Async)");
        }

        // verify the required parameter 'appraisalId' is set
        if (appraisalId == null) {
            throw new ApiException("Missing the required parameter 'appraisalId' when calling acceptVideoProcessingAppraisal(Async)");
        }

        return acceptVideoProcessingAppraisalCall(videoId, appraisalId, videoName, _callback);

    }

    /**
     * Accept a video processing appraisal
     * Accepts a video processing appraisal and initiates the processing of the specified video.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param appraisalId The unique identifier for the video processing appraisal. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @return VideoProcessingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingStatus acceptVideoProcessingAppraisal(UUID videoId, UUID appraisalId, String videoName) throws ApiException {
        ApiResponse<VideoProcessingStatus> localVarResp = acceptVideoProcessingAppraisalWithHttpInfo(videoId, appraisalId, videoName);
        return localVarResp.getData();
    }

    /**
     * Accept a video processing appraisal
     * Accepts a video processing appraisal and initiates the processing of the specified video.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param appraisalId The unique identifier for the video processing appraisal. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @return ApiResponse&lt;VideoProcessingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingStatus> acceptVideoProcessingAppraisalWithHttpInfo(UUID videoId, UUID appraisalId, String videoName) throws ApiException {
        okhttp3.Call localVarCall = acceptVideoProcessingAppraisalValidateBeforeCall(videoId, appraisalId, videoName, null);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept a video processing appraisal (asynchronously)
     * Accepts a video processing appraisal and initiates the processing of the specified video.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param appraisalId The unique identifier for the video processing appraisal. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call acceptVideoProcessingAppraisalAsync(UUID videoId, UUID appraisalId, String videoName, final ApiCallback<VideoProcessingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptVideoProcessingAppraisalValidateBeforeCall(videoId, appraisalId, videoName, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVideoProcessingAppraisal
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoProcessingAppraisalCall(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoProcessingConfigurationOptions;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/processing/appraisals/create"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startPosMs", startPosMs));
        }

        if (endPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endPosMs", endPosMs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoProcessingAppraisalValidateBeforeCall(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createVideoProcessingAppraisal(Async)");
        }

        // verify the required parameter 'videoProcessingConfigurationOptions' is set
        if (videoProcessingConfigurationOptions == null) {
            throw new ApiException("Missing the required parameter 'videoProcessingConfigurationOptions' when calling createVideoProcessingAppraisal(Async)");
        }

        return createVideoProcessingAppraisalCall(videoId, videoProcessingConfigurationOptions, startPosMs, endPosMs, _callback);

    }

    /**
     * Create an appraisal for processing a video
     * Creates an appraisal for processing a video with options specified in the query parameters and request body.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return VideoProcessingAppraisal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingAppraisal createVideoProcessingAppraisal(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, Integer startPosMs, Integer endPosMs) throws ApiException {
        ApiResponse<VideoProcessingAppraisal> localVarResp = createVideoProcessingAppraisalWithHttpInfo(videoId, videoProcessingConfigurationOptions, startPosMs, endPosMs);
        return localVarResp.getData();
    }

    /**
     * Create an appraisal for processing a video
     * Creates an appraisal for processing a video with options specified in the query parameters and request body.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return ApiResponse&lt;VideoProcessingAppraisal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingAppraisal> createVideoProcessingAppraisalWithHttpInfo(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, Integer startPosMs, Integer endPosMs) throws ApiException {
        okhttp3.Call localVarCall = createVideoProcessingAppraisalValidateBeforeCall(videoId, videoProcessingConfigurationOptions, startPosMs, endPosMs, null);
        Type localVarReturnType = new TypeToken<VideoProcessingAppraisal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an appraisal for processing a video (asynchronously)
     * Creates an appraisal for processing a video with options specified in the query parameters and request body.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoProcessingAppraisalAsync(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, Integer startPosMs, Integer endPosMs, final ApiCallback<VideoProcessingAppraisal> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoProcessingAppraisalValidateBeforeCall(videoId, videoProcessingConfigurationOptions, startPosMs, endPosMs, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingAppraisal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVideoProcessingAppraisalByConfId
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoProcessingAppraisalByConfIdCall(UUID videoId, UUID confId, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/processing/appraisals/create/{confId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "confId" + "}", localVarApiClient.escapeString(confId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startPosMs", startPosMs));
        }

        if (endPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endPosMs", endPosMs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoProcessingAppraisalByConfIdValidateBeforeCall(UUID videoId, UUID confId, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createVideoProcessingAppraisalByConfId(Async)");
        }

        // verify the required parameter 'confId' is set
        if (confId == null) {
            throw new ApiException("Missing the required parameter 'confId' when calling createVideoProcessingAppraisalByConfId(Async)");
        }

        return createVideoProcessingAppraisalByConfIdCall(videoId, confId, startPosMs, endPosMs, _callback);

    }

    /**
     * Create an appraisal using a configuration ID
     * Creates an appraisal for processing a video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return VideoProcessingAppraisal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingAppraisal createVideoProcessingAppraisalByConfId(UUID videoId, UUID confId, Integer startPosMs, Integer endPosMs) throws ApiException {
        ApiResponse<VideoProcessingAppraisal> localVarResp = createVideoProcessingAppraisalByConfIdWithHttpInfo(videoId, confId, startPosMs, endPosMs);
        return localVarResp.getData();
    }

    /**
     * Create an appraisal using a configuration ID
     * Creates an appraisal for processing a video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return ApiResponse&lt;VideoProcessingAppraisal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingAppraisal> createVideoProcessingAppraisalByConfIdWithHttpInfo(UUID videoId, UUID confId, Integer startPosMs, Integer endPosMs) throws ApiException {
        okhttp3.Call localVarCall = createVideoProcessingAppraisalByConfIdValidateBeforeCall(videoId, confId, startPosMs, endPosMs, null);
        Type localVarReturnType = new TypeToken<VideoProcessingAppraisal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an appraisal using a configuration ID (asynchronously)
     * Creates an appraisal for processing a video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  The processed video will be associated with the same team and project as the specified &#x60;videoId&#x60; once accepted.  Appraisals have an expiry time and must be accepted before the processing task can start. 
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved video processing appraisal details. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoProcessingAppraisalByConfIdAsync(UUID videoId, UUID confId, Integer startPosMs, Integer endPosMs, final ApiCallback<VideoProcessingAppraisal> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoProcessingAppraisalByConfIdValidateBeforeCall(videoId, confId, startPosMs, endPosMs, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingAppraisal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoProcessingStatus
     * @param videoId The unique identifier for the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A video processing task has not started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoProcessingStatusCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/processing/status"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoProcessingStatusValidateBeforeCall(UUID videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoProcessingStatus(Async)");
        }

        return getVideoProcessingStatusCall(videoId, _callback);

    }

    /**
     * Retrieve video processing status
     * Retrieves the status of the asynchronous video processing task initiated by: - [POST /v1/videos/{videoId}/processing/appraisals/{appraisalId}/accept](https://docs.pixop.com/reference/acceptVideoProcessingAppraisal/) - [POST /v1/videos/{videoId}/processing/start/{confId}](https://docs.pixop.com/reference/startProcessingByVideoIdAndConfId/) - [POST /v1/videos/{videoId}/processing/start](https://docs.pixop.com/reference/startProcessingByVideoId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @return VideoProcessingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A video processing task has not started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingStatus getVideoProcessingStatus(UUID videoId) throws ApiException {
        ApiResponse<VideoProcessingStatus> localVarResp = getVideoProcessingStatusWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Retrieve video processing status
     * Retrieves the status of the asynchronous video processing task initiated by: - [POST /v1/videos/{videoId}/processing/appraisals/{appraisalId}/accept](https://docs.pixop.com/reference/acceptVideoProcessingAppraisal/) - [POST /v1/videos/{videoId}/processing/start/{confId}](https://docs.pixop.com/reference/startProcessingByVideoIdAndConfId/) - [POST /v1/videos/{videoId}/processing/start](https://docs.pixop.com/reference/startProcessingByVideoId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @return ApiResponse&lt;VideoProcessingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A video processing task has not started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingStatus> getVideoProcessingStatusWithHttpInfo(UUID videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoProcessingStatusValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve video processing status (asynchronously)
     * Retrieves the status of the asynchronous video processing task initiated by: - [POST /v1/videos/{videoId}/processing/appraisals/{appraisalId}/accept](https://docs.pixop.com/reference/acceptVideoProcessingAppraisal/) - [POST /v1/videos/{videoId}/processing/start/{confId}](https://docs.pixop.com/reference/startProcessingByVideoIdAndConfId/) - [POST /v1/videos/{videoId}/processing/start](https://docs.pixop.com/reference/startProcessingByVideoId/)  The status indicates whether the operation is &#x60;IN_PROGRESS&#x60;, &#x60;DONE&#x60;, or &#x60;FAILED&#x60;. 
     * @param videoId The unique identifier for the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> A video processing task has not started yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoProcessingStatusAsync(UUID videoId, final ApiCallback<VideoProcessingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoProcessingStatusValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startProcessingByVideoId
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startProcessingByVideoIdCall(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, String videoName, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videoProcessingConfigurationOptions;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/processing/start"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (videoName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoName", videoName));
        }

        if (startPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startPosMs", startPosMs));
        }

        if (endPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endPosMs", endPosMs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startProcessingByVideoIdValidateBeforeCall(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, String videoName, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling startProcessingByVideoId(Async)");
        }

        // verify the required parameter 'videoProcessingConfigurationOptions' is set
        if (videoProcessingConfigurationOptions == null) {
            throw new ApiException("Missing the required parameter 'videoProcessingConfigurationOptions' when calling startProcessingByVideoId(Async)");
        }

        return startProcessingByVideoIdCall(videoId, videoProcessingConfigurationOptions, videoName, startPosMs, endPosMs, _callback);

    }

    /**
     * Start video processing
     * Initiates the processing of the specified video with options specified in the query parameters and request body.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return VideoProcessingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingStatus startProcessingByVideoId(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, String videoName, Integer startPosMs, Integer endPosMs) throws ApiException {
        ApiResponse<VideoProcessingStatus> localVarResp = startProcessingByVideoIdWithHttpInfo(videoId, videoProcessingConfigurationOptions, videoName, startPosMs, endPosMs);
        return localVarResp.getData();
    }

    /**
     * Start video processing
     * Initiates the processing of the specified video with options specified in the query parameters and request body.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return ApiResponse&lt;VideoProcessingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingStatus> startProcessingByVideoIdWithHttpInfo(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, String videoName, Integer startPosMs, Integer endPosMs) throws ApiException {
        okhttp3.Call localVarCall = startProcessingByVideoIdValidateBeforeCall(videoId, videoProcessingConfigurationOptions, videoName, startPosMs, endPosMs, null);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start video processing (asynchronously)
     * Initiates the processing of the specified video with options specified in the query parameters and request body.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param videoProcessingConfigurationOptions Request payload for processing a video, defining the configuration options and processing filters to apply. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startProcessingByVideoIdAsync(UUID videoId, VideoProcessingConfigurationOptions videoProcessingConfigurationOptions, String videoName, Integer startPosMs, Integer endPosMs, final ApiCallback<VideoProcessingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = startProcessingByVideoIdValidateBeforeCall(videoId, videoProcessingConfigurationOptions, videoName, startPosMs, endPosMs, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startProcessingByVideoIdAndConfId
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startProcessingByVideoIdAndConfIdCall(UUID videoId, UUID confId, String videoName, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/videos/{videoId}/processing/start/{confId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "confId" + "}", localVarApiClient.escapeString(confId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (videoName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoName", videoName));
        }

        if (startPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startPosMs", startPosMs));
        }

        if (endPosMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endPosMs", endPosMs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startProcessingByVideoIdAndConfIdValidateBeforeCall(UUID videoId, UUID confId, String videoName, Integer startPosMs, Integer endPosMs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling startProcessingByVideoIdAndConfId(Async)");
        }

        // verify the required parameter 'confId' is set
        if (confId == null) {
            throw new ApiException("Missing the required parameter 'confId' when calling startProcessingByVideoIdAndConfId(Async)");
        }

        return startProcessingByVideoIdAndConfIdCall(videoId, confId, videoName, startPosMs, endPosMs, _callback);

    }

    /**
     * Start video processing using a configuration ID
     * Initiates the processing of the specified video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return VideoProcessingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public VideoProcessingStatus startProcessingByVideoIdAndConfId(UUID videoId, UUID confId, String videoName, Integer startPosMs, Integer endPosMs) throws ApiException {
        ApiResponse<VideoProcessingStatus> localVarResp = startProcessingByVideoIdAndConfIdWithHttpInfo(videoId, confId, videoName, startPosMs, endPosMs);
        return localVarResp.getData();
    }

    /**
     * Start video processing using a configuration ID
     * Initiates the processing of the specified video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @return ApiResponse&lt;VideoProcessingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VideoProcessingStatus> startProcessingByVideoIdAndConfIdWithHttpInfo(UUID videoId, UUID confId, String videoName, Integer startPosMs, Integer endPosMs) throws ApiException {
        okhttp3.Call localVarCall = startProcessingByVideoIdAndConfIdValidateBeforeCall(videoId, confId, videoName, startPosMs, endPosMs, null);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start video processing using a configuration ID (asynchronously)
     * Initiates the processing of the specified video with options specified in the query parameters and a predefined configuration identified by &#x60;confId&#x60;.  A new video, identified by the &#x60;videoId&#x60; returned in the response, is created. This &#x60;videoId&#x60; should be used to track the asynchronous processing operation using: - [GET /v1/videos/{videoId}/processing/status](https://docs.pixop.com/reference/getVideoProcessingStatus/) - [GET /v1/videos/{videoId}](https://docs.pixop.com/reference/getVideoById/) (for full video details) - [Webhooks](https://docs.pixop.com/reference/createWebhook/): Subscribe to &#x60;clip_processing&#x60; and/or &#x60;video_processing&#x60; events to receive real-time updates 
     * @param videoId The unique identifier for the video. (required)
     * @param confId The unique identifier for the video processing configuration. (required)
     * @param videoName Specifies the name of the video. If not provided, the name will be derived from the source video. (optional)
     * @param startPosMs Specifies the start position of the source video for processing, in milliseconds. Defaults to the start of the source video.  Providing a value greater than &#x60;(source video duration or EndPositionMillisecondsParam) - 1000&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param endPosMs Specifies the end position of the source video for processing, in milliseconds. Defaults to the end of the source video. - If the specified value exceeds the source video duration, it will be adjusted to match the end of the source video. - Providing a value smaller than &#x60;(StartPositionMillisecondsParam + 1000)&#x60; results in a &#x60;400 Bad Request&#x60; response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully retrieved the status of video processing. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Inspect the details of the error for more information. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> Authorization failed. Missing or invalid &#x60;X-API-Key&#x60; or basic authentication credentials. </td><td>  * WWW-Authenticate - The authentication method that should be used to gain access to the resource. <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> Access denied. You do not have the necessary permissions to access this resource. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict detected. The request could not be processed due to conflicting data. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests. The rate limit for this resource has been exceeded. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * X-RateLimit-Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred on the server. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startProcessingByVideoIdAndConfIdAsync(UUID videoId, UUID confId, String videoName, Integer startPosMs, Integer endPosMs, final ApiCallback<VideoProcessingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = startProcessingByVideoIdAndConfIdValidateBeforeCall(videoId, confId, videoName, startPosMs, endPosMs, _callback);
        Type localVarReturnType = new TypeToken<VideoProcessingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
